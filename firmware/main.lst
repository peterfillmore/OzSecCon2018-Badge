
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000874 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/cc4CFxCq.o
f108f85f l       *ABS*	00000000 BootRAM
08005a34 l       .text	00000000 LoopCopyDataInit
08005a2c l       .text	00000000 CopyDataInit
08005a48 l       .text	00000000 LoopFillZerobss
08005a42 l       .text	00000000 FillZerobss
08005a5a l       .text	00000000 LoopForever
08005a74 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_tim.c
00000000 l    df *ABS*	00000000 drv_I2C_M24SR.c
20000010 l     O .data	00000001 uSynchroMode
00000000 l    df *ABS*	00000000 gfx.c
20000874 l     O .bss	00000001 gfxInitDone
00000000 l    df *ABS*	00000000 gdriver.c
20000878 l     O .bss	00000004 dhead
2000087c l     O .bss	00000004 dtail
00000000 l    df *ABS*	00000000 gdisp.c
08001a20 l     F .text	00000032 hline_clip
08001a54 l     F .text	00000032 vline_clip
08001a88 l     F .text	00000024 drawcharglyph
08001ad0 l     F .text	0000006a drawcharline
08001aac l     F .text	00000024 fillcharglyph
08006874 l     O .text	00000080 blks.6091
20000880 l     O .bss	00000001 gdispInitDone
00000000 l    df *ABS*	00000000 gdisp_fonts.c
0800251c l     F .text	00000048 matchfont
20000884 l     O .bss	00000004 fontList
00000000 l    df *ABS*	00000000 gdisp_image.c
20000014 l     O .data	00000020 ImageHandlers
00000000 l    df *ABS*	00000000 gdisp_image_bmp.c
08002870 l     F .text	000000a4 getPixels
00000000 l    df *ABS*	00000000 mf_font.c
08006920 l     O .text	00000018 mf_bwfont_DejaVuSans12_char_ranges
08006918 l     O .text	00000008 mf_bwfont_DejaVuSans12_listentry
08006938 l     O .text	0000005f mf_bwfont_DejaVuSans12_glyph_widths_0
08006998 l     O .text	000000c0 mf_bwfont_DejaVuSans12_glyph_offsets_0
08006a58 l     O .text	0000055c mf_bwfont_DejaVuSans12_glyph_data_0
00000000 l    df *ABS*	00000000 mf_justify.c
080030b0 l     F .text	00000036 mf_round_to_tab
080030e8 l     F .text	0000005a render_left
00000000 l    df *ABS*	00000000 mf_bwfont.c
00000000 l    df *ABS*	00000000 mf_scaledfont.c
08003508 l     F .text	0000005c scaled_pixel_callback
00000000 l    df *ABS*	00000000 gdisp_lld_SSD1306.c
00000000 l    df *ABS*	00000000 gos_raw32.c
00000000 l    df *ABS*	00000000 gos_x_threads.c
08004210 l     F .text	000000e0 _gfxXSwitch.isra.1
20000888 l     O .bss	00000004 pframeinfo
2000088c l     O .bss	00000008 readyQ
20000894 l     O .bss	00000018 mainthread
200008ac l     O .bss	0000005c maincxt
20000908 l     O .bss	00000001 stackdirup
2000090c l     O .bss	00000004 jmpmask2
20000910 l     O .bss	00000004 jmpmask1
20000914 l     O .bss	00000004 stackbase
20000918 l     O .bss	00000008 deadQ
00000000 l    df *ABS*	00000000 gos_x_heap.c
00000000 l    df *ABS*	00000000 gfile.c
20000920 l     O .bss	00000030 gfileArr
00000000 l    df *ABS*	00000000 gfile_fs_mem.c
0800472c l     F .text	00000004 MEMSetpos
08004730 l     F .text	00000014 MEMWrite
08004744 l     F .text	00000016 MEMRead
08007014 l     O .text	0000003c FsMemVMT
00000000 l    df *ABS*	00000000 stm32f0xx_i2c.c
00000000 l    df *ABS*	00000000 stm32f0xx_spi.c
00000000 l    df *ABS*	00000000 mf_encoding.c
00000000 l    df *ABS*	00000000 _udivsi3.o
08004f90 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
080050b0 l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 lib_a-setjmp.o
00000000 l    df *ABS*	00000000 main.c
08007050 l     O .text	00000482 aura_logo
00000000 l    df *ABS*	00000000 stm32f0xx_it.c
00000000 l    df *ABS*	00000000 hw_config.c
20000950 l     O .bss	00000002 counter_delay_ms
20000954 l     O .bss	00000004 timestamp_us
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 LED_config.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 sbrk.c
2000098c l     O .bss	00000004 heap_end.4079
00000000 l    df *ABS*	00000000 impure.c
20000038 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
080009ac g     F .text	00000012 TIM_TimeBaseStructInit
080052ac g     F .text	00000000 longjmp
08005684 g     F .text	0000003e Timer_Structure_Config
08000354 g     F .text	00000020 RCC_HSICmd
080025d0 g     F .text	0000002a gdispScaleFont
08000d24 g     F .text	00000014 TIM_ForcedOC2Config
08004014 g     F .text	0000000a gfxHalt
080003e8 g     F .text	00000018 RCC_LSEDriveConfig
08002230 g     F .text	000000f8 gdispGDrawStringBox
08000440 g     F .text	00000024 RCC_PLLCmd
08005678 g     F .text	0000000c Timer_RCC_Config
080019bc g     F .text	00000024 gdriverGetNext
08000d0c g     F .text	00000004 TIM_SetCompare2
0800071c g     F .text	00000018 RCC_AHBPeriphResetCmd
08005294 g     F .text	00000000 setjmp
080024c0 g     F .text	00000020 gdispGetStringWidth
080002ac g     F .text	00000024 GPIO_PinAFConfig
08001f70 g     F .text	000000ba gdispGDrawBox
08004e68 g     F .text	00000004 SPI_SendData8
08000edc g     F .text	00000018 TIM_SelectCOM
0800080c g     F .text	0000000c RCC_ClearITPendingBit
080026e0 g     F .text	0000001c gdispImageIsOpen
08000280 g     F .text	0000000c GPIO_ReadOutputDataBit
08000eac g     F .text	00000018 TIM_CCxCmd
080011f0 g     F .text	00000018 TIM_SetIC4Prescaler
08003564 g     F .text	00000014 mf_scaled_character_width
08003050 g     F .text	00000054 mf_find_font
08000d58 g     F .text	00000018 TIM_CCPreloadControl
08005a74  w    F .text	00000002 TIM1_CC_IRQHandler
08004bac g     F .text	00000006 I2C_ReceiveData
0800388c g     F .text	0000005c gdisp_lld_get_pixel_color
0800562a g     F .text	00000002 HardFault_Handler
080046a0 g     F .text	00000028 gfileSetPos
08006130 g     F .text	00000002 __malloc_unlock
08005a74  w    F .text	00000002 ADC1_COMP_IRQHandler
080056c2 g     F .text	0000000c Timer_Config
08000d70 g     F .text	0000000c TIM_OC1PreloadConfig
080032f4 g     F .text	00000020 mf_render_justified
08005630 g     F .text	00000010 SysTick_Handler
0800049c g     F .text	0000000c RCC_MCOConfig
080048e4 g     F .text	00000024 I2C_OwnAddress2Config
08005a74  w    F .text	00000002 PVD_IRQHandler
0800468c g     F .text	00000014 gfileGetPos
08004714 g     F .text	00000004 gfileUnmount
08001850 g     F .text	00000002 _gdriverInit
08006790 g     F .text	00000096 memmove
08004d98 g     F .text	00000018 SPI_TIModeCmd
0800052c g     F .text	00000018 RCC_CECCLKConfig
08007524 g       .text	00000000 _sidata
0800562e g     F .text	00000002 PendSV_Handler
08004c10 g     F .text	00000044 SPI_I2S_DeInit
08005628 g     F .text	00000002 NMI_Handler
08004060 g     F .text	00000012 gfxSemSignal
200009a0 g       .bss	00000000 __exidx_end
08004ed0 g     F .text	00000006 SPI_GetCRCPolynomial
08002914 g     F .text	0000003c gdispImageClose_BMP
08001340 g     F .text	00000020 TIM_ETRClockMode2Config
08005a74  w    F .text	00000002 I2C1_IRQHandler
08004044 g     F .text	00000006 gfxSemInit
080038e8 g     F .text	00000094 gdisp_lld_flush
08000764 g     F .text	00000018 RCC_ITConfig
08004020 g     F .text	0000000a gfxExit
08000e34 g     F .text	0000000c TIM_OC1NPolarityConfig
08000d18 g     F .text	0000000c TIM_ForcedOC1Config
08001bd8 g     F .text	00000138 gdispGDrawLine
0800125c g     F .text	00000012 TIM_DMACmd
08001320 g     F .text	00000020 TIM_ETRClockMode1Config
08002864 g     F .text	0000000a gdispImageFree
08004df4 g     F .text	00000020 SPI_BiDirectionalLineConfig
0800158c g     F .text	00000098 M24SR_SendI2Ccommand
080011e0 g     F .text	00000010 TIM_SetIC3Prescaler
08000e0c g     F .text	0000000c TIM_ClearOC3Ref
2000099c g     O .bss	00000004 errno
080044e8 g     F .text	00000002 _gfileInit
08007524 g       .text	00000000 _etext
08002130 g     F .text	00000058 gdispGDrawString
20000874 g       .bss	00000000 _sbss
080004a8 g     F .text	00000014 RCC_SYSCLKConfig
080034c8 g     F .text	0000003e mf_bwfont_character_width
08004b2c g     F .text	0000001c I2C_TimeoutBConfig
08001b54 g     F .text	0000001c _gdispDeInitDriver
080019e0 g     F .text	00000040 gdriverGetDriverInstanceNumber
08001944 g     F .text	0000001c _gdriverDeinit
080007b0 g     F .text	00000034 RCC_WaitForHSEStartUp
08005918 g     F .text	00000060 timer_pwm_init
08004928 g     F .text	00000020 I2C_SlaveByteControlCmd
08002704 g     F .text	00000024 gdispImageCache
080041a8 g     F .text	00000068 gfxThreadExit
08004f88 g     F .text	00000008 mf_rewind
08004010 g     F .text	00000002 _gosDeinit
080006b0 g     F .text	00000024 RCC_BackupResetCmd
08004870 g     F .text	00000012 I2C_ITConfig
08000aa0 g     F .text	0000001c TIM_CtrlPWMOutputs
08004354 g     F .text	0000005c gfxSemWait
08006024 g     F .text	0000007c memcpy
08004e80 g     F .text	00000014 SPI_CRCLengthConfig
08000478 g     F .text	00000024 RCC_ClockSecuritySystemCmd
080007e4 g     F .text	00000014 RCC_ClearFlag
08004074 g     F .text	00000012 gfxSemSignalI
08000a54 g     F .text	00000018 TIM_Cmd
08004a2c g     F .text	00000020 I2C_10BitAddressHeaderCmd
08004f74 g     F .text	00000012 mf_getchar
08000d9c g     F .text	00000014 TIM_OC4PreloadConfig
20000034 g     O .data	00000004 SystemCoreClock
08004338 g     F .text	0000001a gfxMutexEnter
080044e0 g     F .text	00000008 gfxFree
08000330 g     F .text	00000010 RCC_HSEConfig
08005ac0 g     F .text	00000014 malloc
08004f90 g     F .text	0000010a .hidden __udivsi3
0800122c g     F .text	00000008 TIM_ClearFlag
080035b8 g     F .text	00000058 mf_scale_font
08004aa4 g     F .text	00000020 I2C_SMBusAlertCmd
08004e94 g     F .text	00000020 SPI_CalculateCRC
0800124c g     F .text	00000008 TIM_ClearITPendingBit
08001624 g     F .text	000000b4 M24SR_ReceiveI2Cresponse
080009dc g     F .text	00000004 TIM_GetCounter
08004030 g     F .text	00000002 gfxSystemUnlock
08004f40 g     F .text	00000008 SPI_I2S_ClearFlag
080006ec g     F .text	00000018 RCC_APB2PeriphClockCmd
08002b40 g     F .text	0000012c gdispImageCache_BMP
08004bb4 g     F .text	00000012 I2C_DMACmd
080011b0 g     F .text	00000004 TIM_GetCapture3
20000960 g     O .bss	00000004 __malloc_top_pad
08004480 g     F .text	00000048 gfxThreadWait
08000168 g     F .text	000000c6 GPIO_Init
08000420 g     F .text	00000020 RCC_PLLConfig
080004f8 g     F .text	00000034 RCC_ADCCLKConfig
08001b7c g     F .text	00000010 gdispSetDisplay
20000000 g       .data	00000000 _sdata
08005a74  w    F .text	00000002 SPI1_IRQHandler
08001b70 g     F .text	0000000c gdispGetDisplay
0800651c g     F .text	00000024 _sbrk_r
080011a8 g     F .text	00000004 TIM_GetCapture1
080018fc g     F .text	00000048 gdriverUnRegister
08000e9c g     F .text	00000010 TIM_SelectOCREFClear
080002a8 g     F .text	00000004 GPIO_Write
20000990 g     O .bss	00000004 MSec
08005a74  w    F .text	00000002 TIM6_DAC_IRQHandler
0800028c g     F .text	00000006 GPIO_ReadOutputData
08000bbc g     F .text	00000084 TIM_OC3Init
08002728 g     F .text	000000b8 gdispGImageDraw
080003c8 g     F .text	00000020 RCC_LSEConfig
08004b48 g     F .text	00000020 I2C_CalculatePEC
080040a0 g     F .text	00000018 _gfxGetStackStateInFn
0800068c g     F .text	00000024 RCC_RTCCLKCmd
08001bb4 g     F .text	00000004 gdispGGetContrast
2000095c g     O .bss	00000004 __malloc_max_sbrked_mem
08000818 g     F .text	000000f8 TIM_DeInit
080030a4 g     F .text	0000000c mf_get_font_list
08000704 g     F .text	00000018 RCC_APB1PeriphClockCmd
080007f8 g     F .text	00000014 RCC_GetITStatus
08001d84 g     F .text	000000dc _gdispPostInitDriver
200009a0 g       .bss	00000000 __exidx_start
08004958 g     F .text	00000020 I2C_10BitAddressingModeCmd
08002514 g     F .text	00000008 gdispContrastColor
08004f48 g     F .text	0000002a SPI_I2S_GetITStatus
08001b98 g     F .text	00000006 gdispGGetWidth
0800614c g     F .text	000003d0 _realloc_r
08005a78 g     F .text	00000048 __libc_init_array
08001220 g     F .text	0000000c TIM_GetFlagStatus
08004f34 g     F .text	0000000c SPI_I2S_GetFlagStatus
08002444 g     F .text	00000040 gdispGetFontMetric
080006d4 g     F .text	00000018 RCC_AHBPeriphClockCmd
08000dd0 g     F .text	0000000c TIM_OC3FastConfig
08004ba8 g     F .text	00000004 I2C_SendData
08005a74  w    F .text	00000002 EXTI2_3_IRQHandler
08006828 g     F .text	0000001c _sbrk
08001270 g     F .text	00000018 TIM_SelectCCDMA
080043b0 g     F .text	00000030 gfxSleepMilliseconds
0800750c g     F .text	00000000 _init
08005a74  w    F .text	00000002 I2C2_IRQHandler
08000a40 g     F .text	00000014 TIM_SetClockDivision
08004db0 g     F .text	00000020 I2S_Cmd
08004e38 g     F .text	00000018 SPI_SSOutputCmd
08001e88 g     F .text	000000e6 gdispGBlitArea
08004dd0 g     F .text	00000010 SPI_DataSizeConfig
080047bc g     F .text	00000064 I2C_Init
08005a74  w    F .text	00000002 TIM17_IRQHandler
08004afc g     F .text	00000020 I2C_IdleClockTimeoutCmd
08005a74  w    F .text	00000002 RTC_IRQHandler
08003578 g     F .text	00000040 mf_scaled_render_character
200009a0 g       .bss	00000000 _ebss
08000abc g     F .text	00000080 TIM_OC1Init
08000d90 g     F .text	0000000c TIM_OC3PreloadConfig
08005a24  w    F .text	00000038 Reset_Handler
08000278 g     F .text	00000006 GPIO_ReadInputData
080009d8 g     F .text	00000004 TIM_SetAutoreload
08001804 g     F .text	00000028 gfxInit
0800077c g     F .text	00000034 RCC_GetFlagStatus
08003038 g     F .text	00000018 mf_character_width
0800202c g     F .text	00000070 gdispGDrawChar
08001e60 g     F .text	00000028 gdispGFillArea
08004718 g     F .text	00000012 gfileSync
08004ac4 g     F .text	00000020 I2C_ClockTimeoutCmd
080024a0 g     F .text	0000001e gdispGetStringWidthCount
08000294 g     F .text	00000004 GPIO_SetBits
080004bc g     F .text	00000010 RCC_GetSYSCLKSource
0800182c g     F .text	00000024 gfxDeinit
08000a18 g     F .text	00000018 TIM_ARRPreloadConfig
0800029c g     F .text	0000000c GPIO_WriteBit
080024e0 g     F .text	00000034 gdispBlendColor
08002188 g     F .text	000000a8 gdispGFillString
08004034 g     F .text	00000006 gfxMutexInit
080026fc g     F .text	00000008 gdispImageSetBgColor
08003144 g     F .text	00000058 mf_get_string_width
080049ec g     F .text	00000020 I2C_GenerateSTART
08004820 g     F .text	00000016 I2C_StructInit
08002fa0 g     F .text	00000016 gdispImageGetPaletteSize_BMP
080046e8 g     F .text	00000026 gfileEOF
200009a0 g       .bss	00000000 end
080050b0 g     F .text	00000000 .hidden __aeabi_idiv
080045e0 g     F .text	0000001e gfileClose
08001b8c g     F .text	0000000a gdispGetDisplayCount
08001498 g     F .text	000000a8 M24SR_I2CInit
08001234 g     F .text	00000016 TIM_GetITStatus
08000574 g     F .text	00000108 RCC_GetClocksFreq
080040b8 g     F .text	000000e4 _gosThreadsInit
08005a74  w    F .text	00000002 TIM16_IRQHandler
08000cbc g     F .text	0000004c TIM_SelectOCxM
08002804 g     F .text	0000001a gdispImageGetPaletteSize
080045c0 g     F .text	00000004 gfileExists
08002c6c g     F .text	0000032c gdispGImageDraw_BMP
080065e0 g     F .text	000001b0 _free_r
080013fc g     F .text	00000006 TIM_RemapConfig
08005654 g     F .text	00000014 TIM3_IRQHandler
08005a74  w    F .text	00000002 EXTI4_15_IRQHandler
08005a74  w    F .text	00000002 RCC_IRQHandler
20000874 g       .bss	00000000 _bss
08005a74  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000db0 g     F .text	0000000c TIM_OC1FastConfig
080025b8 g     F .text	00000018 gdispCloseFont
08005a74 g       .text	00000002 Default_Handler
20000870 g     O .data	00000004 __malloc_sbrk_base
08004a84 g     F .text	00000020 I2C_TransferHandling
08004ae4 g     F .text	00000018 I2C_ExtendedClockTimeoutCmd
08004bc8 g     F .text	0000000c I2C_GetFlagStatus
08002328 g     F .text	0000011c gdispGFillStringBox
0800400c g     F .text	00000002 _gosPostInit
08003610 g     F .text	000001e4 gdisp_lld_fill_area
08004eec g     F .text	00000014 SPI_LastDMATransferCmd
08000d7c g     F .text	00000014 TIM_OC2PreloadConfig
0800067c g     F .text	00000010 RCC_RTCCLKConfig
08001360 g     F .text	0000000c TIM_SelectInputTrigger
08004e50 g     F .text	00000018 SPI_NSSPulseModeCmd
08005a74  w    F .text	00000002 CEC_IRQHandler
08004624 g     F .text	00000034 gfileRead
08000388 g     F .text	00000020 RCC_HSI14Cmd
0800209c g     F .text	00000094 gdispGFillChar
08001208 g     F .text	00000012 TIM_ITConfig
08000b3c g     F .text	00000080 TIM_OC2Init
08002858 g     F .text	0000000a gdispImageAlloc
08005a74  w    F .text	00000002 TIM14_IRQHandler
08002fb8 g     F .text	00000022 gdispImageGetPalette_BMP
08005a74  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
00001800 g       *ABS*	00000000 __ram_size__
0800404c g     F .text	00000014 gfxSemWaitI
20000964 g     O .bss	00000028 __malloc_current_mallinfo
0800319c g     F .text	00000158 mf_render_aligned
0800589c g     F .text	0000001e get_timer_clock_frequency
080009c0 g     F .text	00000006 TIM_PrescalerConfig
08006134 g     F .text	00000018 realloc
08004e14 g     F .text	00000024 SPI_NSSInternalSoftwareConfig
08004784 g     F .text	00000038 I2C_DeInit
08005a74  w    F .text	00000002 TIM7_DAC_IRQHandler
08004838 g     F .text	00000018 I2C_Cmd
08000298 g     F .text	00000004 GPIO_ResetBits
08000e88 g     F .text	00000014 TIM_OC4PolarityConfig
0800136c g     F .text	00000010 TIM_SelectOutputTrigger
08001854 g     F .text	000000a8 gdriverRegister
08004bd4 g     F .text	00000004 I2C_ClearFlag
08004eb4 g     F .text	0000000c SPI_TransmitCRC
08004000 g     F .text	0000000c _gosInit
08001bc0 g     F .text	00000018 gdispGDrawPixel
08004418 g     F .text	00000068 gfxThreadCreate
080057d4 g     F .text	00000014 increment_timestamp
08000d10 g     F .text	00000004 TIM_SetCompare3
08003314 g     F .text	000001b4 mf_bwfont_render_character
080048a4 g     F .text	00000020 I2C_StopModeCmd
08000c40 g     F .text	00000068 TIM_OC4Init
08005a74  w    F .text	00000002 TIM15_IRQHandler
080043e0 g     F .text	00000038 gfxSleepMicroseconds
08005a74  w    F .text	00000002 EXTI0_1_IRQHandler
08005a74  w    F .text	00000002 USB_IRQHandler
080013e4 g     F .text	00000018 TIM_SelectHallSensor
08005290  w    F .text	00000002 .hidden __aeabi_ldiv0
0800475c g     F .text	00000028 gfileOpenMemory
08001960 g     F .text	00000034 gdriverGetInstance
08001bb0 g     F .text	00000004 gdispGGetBacklight
080003a8 g     F .text	00000020 RCC_HSI14ADCRequestCmd
08003000 g     F .text	00000036 mf_render_character
20000464 g     O .data	00000408 __malloc_av_
0800403c g     F .text	00000006 gfxMutexExit
08005748 g     F .text	00000074 delay_us
080011b8 g     F .text	00000010 TIM_SetIC1Prescaler
08004cc4 g     F .text	00000012 I2S_StructInit
08004998 g     F .text	00000020 I2C_ReloadCmd
0800612c g     F .text	00000002 __malloc_lock
080068f4 g     O .text	00000024 mf_bwfont_DejaVuSans12
08006fb4 g     O .text	00000060 GDISPVMT_OnlyOne
08004710 g     F .text	00000004 gfileMount
08000d44 g     F .text	00000014 TIM_ForcedOC4Config
08005a74  w    F .text	00000002 SPI2_IRQHandler
080046c8 g     F .text	00000020 gfileGetSize
080060a0 g     F .text	0000008c memset
08004e78 g     F .text	00000006 SPI_I2S_ReceiveData16
08000340 g     F .text	00000014 RCC_AdjustHSICalibrationValue
080052e0 g     F .text	00000348 main
080056d0 g     F .text	00000078 delay_ms
080017ec g     F .text	00000018 M24SR_RFConfig_Hard
20000958 g     O .bss	00000004 __malloc_max_total_mem
08004a78 g     F .text	0000000a I2C_GetTransferDirection
08001294 g     F .text	00000014 TIM_ITRxExternalClockConfig
08000e60 g     F .text	00000014 TIM_OC3PolarityConfig
08004f90 g     F .text	00000000 .hidden __aeabi_uidiv
08001b40 g     F .text	00000012 _gdispInitDriver
0800562c g     F .text	00000002 SVC_Handler
08004ed8 g     F .text	00000012 SPI_I2S_DMACmd
00000000  w      *UND*	00000000 __init_array_end
08005ae8 g     F .text	0000053c _malloc_r
08001288 g     F .text	0000000a TIM_InternalClockConfig
08000e28 g     F .text	0000000c TIM_OC1PolarityConfig
08000dbc g     F .text	00000014 TIM_OC2FastConfig
08002950 g     F .text	000001f0 gdispImageOpen_BMP
080044c8 g     F .text	00000002 _gosHeapInit
080009d4 g     F .text	00000004 TIM_SetCounter
08004978 g     F .text	00000020 I2C_AutoEndCmd
080050b0 g     F .text	000001cc .hidden __divsi3
08006540 g     F .text	000000a0 _malloc_trim_r
08002fdc g     F .text	00000024 gdispImageAdjustPalette_BMP
08000d14 g     F .text	00000004 TIM_SetCompare4
08004908 g     F .text	00000020 I2C_GeneralCallCmd
080011ac g     F .text	00000004 TIM_GetCapture2
0800419c g     F .text	0000000c gfxThreadMe
08004d80 g     F .text	00000018 SPI_Cmd
080009e0 g     F .text	00000006 TIM_GetPrescaler
20000000 g       .isr_vector	00000000 __ram_start__
08000dfc g     F .text	00000010 TIM_ClearOC2Ref
08004850 g     F .text	00000020 I2C_SoftwareResetCmd
080057e8 g     F .text	000000b4 SystemInit
08004e6c g     F .text	00000004 SPI_I2S_SendData16
08000374 g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
08000ef4 g     F .text	0000014c TIM_ICInit
080000c4 g     F .text	000000a4 GPIO_DeInit
08007518 g     F .text	00000000 _fini
080025fc g     F .text	00000004 gdispGetFontName
08002484 g     F .text	0000001a gdispGetCharWidth
08004b68 g     F .text	00000020 I2C_PECRequestCmd
080049cc g     F .text	00000020 I2C_MasterRequestConfig
080002d0 g     F .text	00000060 RCC_DeInit
08001040 g     F .text	00000010 TIM_ICStructInit
0800397c g     F .text	00000684 gdisp_lld_init
08001050 g     F .text	00000158 TIM_PWMIConfig
08001540 g     F .text	0000000c M24SR_SetI2CSynchroMode
08002f98 g     F .text	00000006 gdispImageNext_BMP
08001bb8 g     F .text	00000008 gdispGFlush
20000460 g     O .data	00000004 _impure_ptr
08001d10 g     F .text	00000022 gdispGClear
08005668 g     F .text	00000010 Interrupts_Config
08000e50 g     F .text	00000010 TIM_OC2NPolarityConfig
080052dc g     F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08000df0 g     F .text	0000000c TIM_ClearOC1Ref
0800402c g     F .text	00000002 gfxSystemLock
080052d6 g     F .text	00000002 WWDG_IRQHandler
0800074c g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08000464 g     F .text	00000014 RCC_PREDIV1Config
08004bd8 g     F .text	00000032 I2C_GetITStatus
080026bc g     F .text	00000024 gdispImageClose
08005640 g     F .text	00000012 TIM2_IRQHandler
08005978 g     F .text	000000ac led_init
08000a00 g     F .text	00000018 TIM_UpdateRequestConfig
08002640 g     F .text	00000006 gdispImageInit
080037f4 g     F .text	00000098 gdisp_lld_draw_pixel
08000d38 g     F .text	0000000c TIM_ForcedOC3Config
080012a8 g     F .text	00000078 TIM_TIxExternalClockConfig
08004884 g     F .text	00000020 I2C_StretchClockCmd
08000230 g     F .text	00000018 GPIO_StructInit
08005a74  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
20000998 g     O .bss	00000004 _gfxCurrentThread
08001d34 g     F .text	00000050 _gdispInit
08000a8c g     F .text	00000012 TIM_BDTRStructInit
08000ca8 g     F .text	00000014 TIM_OCStructInit
080049b8 g     F .text	00000014 I2C_NumberOfBytesConfig
08000e74 g     F .text	00000014 TIM_OC3NPolarityConfig
20001800 g       *ABS*	00000000 _estack
08000ec4 g     F .text	00000018 TIM_CCxNCmd
080044ec g     F .text	000000d4 _gfileFindSlot
0800154c g     F .text	00000040 M24SR_I2CTokenRelease
080058bc g     F .text	0000005c timer_clock_init
0800509c g     F .text	00000012 .hidden __aeabi_uidivmod
08001ba8 g     F .text	00000004 gdispGGetPowerMode
08001788 g     F .text	00000064 M24SR_IsAnswerReady
0800138c g     F .text	00000010 TIM_SelectMasterSlaveMode
08004b90 g     F .text	00000016 I2C_ReadRegister
08004088 g     F .text	00000018 _gfxGetStackState
080042f0 g     F .text	00000048 gfxYield
08004ec0 g     F .text	00000010 SPI_GetCRC
20001800 g       *ABS*	00000000 __ram_end__
20000874 g       .data	00000000 _edata
080011b4 g     F .text	00000004 TIM_GetCapture4
08004de0 g     F .text	00000014 SPI_RxFIFOThresholdConfig
080045d4 g     F .text	0000000c gfileOpen
08000910 g     F .text	0000009c TIM_TimeBaseInit
08001ba0 g     F .text	00000006 gdispGGetHeight
08002820 g     F .text	0000001a gdispImageGetPalette
08001b3c g     F .text	00000002 _gdispDeinit
080044d4 g     F .text	0000000a gfxRealloc
08004b1c g     F .text	00000010 I2C_TimeoutAConfig
20000994 g     O .bss	00000004 GDISP
080052d8 g     F .text	00000002 USART2_IRQHandler
2000086c g     O .data	00000004 __malloc_trim_threshold
08001bac g     F .text	00000004 gdispGGetOrientation
08000000 g     O .isr_vector	00000000 g_pfnVectors
08004b88 g     F .text	00000006 I2C_GetPEC
08001254 g     F .text	00000008 TIM_DMAConfig
08004f00 g     F .text	0000001a SPI_I2S_ITConfig
0800055c g     F .text	00000018 RCC_USARTCLKConfig
0800283c g     F .text	0000001a gdispImageAdjustPalette
08002600 g     F .text	00000040 gdispAddFont
08002648 g     F .text	00000074 gdispImageOpenGFile
0800121c g     F .text	00000004 TIM_GenerateEvent
080048c4 g     F .text	00000020 I2C_DualAddressCmd
08004948 g     F .text	00000010 I2C_SlaveAddressConfig
00000000  w      *UND*	00000000 __init_array_start
08005290  w    F .text	00000002 .hidden __aeabi_idiv0
08000a6c g     F .text	00000020 TIM_BDTRConfig
08000544 g     F .text	00000018 RCC_I2CCLKConfig
080044cc g     F .text	00000008 gfxAlloc
080045c4 g     F .text	00000004 gfileDelete
08005a74  w    F .text	00000002 USART3_4_5_6_7_8_IRQHandler
080004e0 g     F .text	00000018 RCC_PCLKConfig
08005a74  w    F .text	00000002 FLASH_IRQHandler
08004600 g     F .text	00000024 _gfileDeinit
08001404 g     F .text	00000094 M24SR_PollI2C
08004f1c g     F .text	0000000a SPI_GetTransmissionFIFOStatus
08004658 g     F .text	00000034 gfileWrite
08000248 g     F .text	00000024 GPIO_PinLockConfig
080052da g     F .text	00000002 USART1_IRQHandler
080052c8 g     F .text	0000000c gfxSystemTicks
08001994 g     F .text	00000028 gdriverInstanceCount
08000400 g     F .text	00000020 RCC_LSICmd
08004a4c g     F .text	00000020 I2C_AcknowledgeConfig
080045c8 g     F .text	00000006 gfileGetFilesize
080052d4 g     F .text	00000002 gfxMillisecondsToTicks
080011c8 g     F .text	00000018 TIM_SetIC2Prescaler
0800139c g     F .text	00000016 TIM_ETRConfig
080016d8 g     F .text	000000b0 M24SR_ReceiveI2Cbuffer
08000734 g     F .text	00000018 RCC_APB2PeriphResetCmd
08004a0c g     F .text	00000020 I2C_GenerateSTOP
0800137c g     F .text	00000010 TIM_SelectSlaveMode
08004f28 g     F .text	0000000a SPI_GetReceptionFIFOStatus
08002564 g     F .text	00000054 gdispOpenFont
08005a74  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
08004c54 g     F .text	0000001c SPI_StructInit
08004c70 g     F .text	00000054 SPI_Init
080027e0 g     F .text	00000024 gdispImageNext
08000e18 g     F .text	00000010 TIM_ClearOC4Ref
08000a30 g     F .text	00000010 TIM_SelectOnePulseMode
080013b4 g     F .text	00000030 TIM_EncoderInterfaceConfig
08004c0c g     F .text	00000004 I2C_ClearITPendingBit
00000000  w      *UND*	00000000 __preinit_array_start
08000d08 g     F .text	00000004 TIM_SetCompare1
08000e40 g     F .text	00000010 TIM_OC2PolarityConfig
080057bc g     F .text	00000018 decrement_delay
08004e70 g     F .text	00000006 SPI_ReceiveData8
0800527c g     F .text	00000012 .hidden __aeabi_idivmod
080009e8 g     F .text	00000018 TIM_UpdateDisableConfig
0800026c g     F .text	0000000c GPIO_ReadInputDataBit
08000ddc g     F .text	00000014 TIM_OC4FastConfig
080045d0 g     F .text	00000004 gfileRename
08004cd8 g     F .text	000000a8 I2S_Init
08004a6c g     F .text	0000000c I2C_GetAddressMatched
080004cc g     F .text	00000014 RCC_HCLKConfig
080009c8 g     F .text	0000000c TIM_CounterModeConfig
08005ad4 g     F .text	00000014 free



Disassembly of section .text:

080000c4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80000c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80000c6:	2390      	movs	r3, #144	; 0x90
 80000c8:	05db      	lsls	r3, r3, #23
 80000ca:	4298      	cmp	r0, r3
 80000cc:	d017      	beq.n	80000fe <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80000ce:	4b22      	ldr	r3, [pc, #136]	; (8000158 <GPIO_DeInit+0x94>)
 80000d0:	4298      	cmp	r0, r3
 80000d2:	d01f      	beq.n	8000114 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80000d4:	4b21      	ldr	r3, [pc, #132]	; (800015c <GPIO_DeInit+0x98>)
 80000d6:	4298      	cmp	r0, r3
 80000d8:	d027      	beq.n	800012a <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80000da:	4b21      	ldr	r3, [pc, #132]	; (8000160 <GPIO_DeInit+0x9c>)
 80000dc:	4298      	cmp	r0, r3
 80000de:	d02f      	beq.n	8000140 <GPIO_DeInit+0x7c>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80000e0:	4b20      	ldr	r3, [pc, #128]	; (8000164 <GPIO_DeInit+0xa0>)
 80000e2:	4298      	cmp	r0, r3
 80000e4:	d000      	beq.n	80000e8 <GPIO_DeInit+0x24>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80000e6:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80000e8:	2080      	movs	r0, #128	; 0x80
 80000ea:	2101      	movs	r1, #1
 80000ec:	03c0      	lsls	r0, r0, #15
 80000ee:	f000 fb15 	bl	800071c <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80000f2:	2080      	movs	r0, #128	; 0x80
 80000f4:	2100      	movs	r1, #0
 80000f6:	03c0      	lsls	r0, r0, #15
 80000f8:	f000 fb10 	bl	800071c <RCC_AHBPeriphResetCmd>
 80000fc:	e7f3      	b.n	80000e6 <GPIO_DeInit+0x22>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80000fe:	2080      	movs	r0, #128	; 0x80
 8000100:	2101      	movs	r1, #1
 8000102:	0280      	lsls	r0, r0, #10
 8000104:	f000 fb0a 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000108:	2080      	movs	r0, #128	; 0x80
 800010a:	2100      	movs	r1, #0
 800010c:	0280      	lsls	r0, r0, #10
 800010e:	f000 fb05 	bl	800071c <RCC_AHBPeriphResetCmd>
 8000112:	e7e8      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000114:	2080      	movs	r0, #128	; 0x80
 8000116:	2101      	movs	r1, #1
 8000118:	02c0      	lsls	r0, r0, #11
 800011a:	f000 faff 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800011e:	2080      	movs	r0, #128	; 0x80
 8000120:	2100      	movs	r1, #0
 8000122:	02c0      	lsls	r0, r0, #11
 8000124:	f000 fafa 	bl	800071c <RCC_AHBPeriphResetCmd>
 8000128:	e7dd      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800012a:	2080      	movs	r0, #128	; 0x80
 800012c:	2101      	movs	r1, #1
 800012e:	0300      	lsls	r0, r0, #12
 8000130:	f000 faf4 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000134:	2080      	movs	r0, #128	; 0x80
 8000136:	2100      	movs	r1, #0
 8000138:	0300      	lsls	r0, r0, #12
 800013a:	f000 faef 	bl	800071c <RCC_AHBPeriphResetCmd>
 800013e:	e7d2      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000140:	2080      	movs	r0, #128	; 0x80
 8000142:	2101      	movs	r1, #1
 8000144:	0340      	lsls	r0, r0, #13
 8000146:	f000 fae9 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800014a:	2080      	movs	r0, #128	; 0x80
 800014c:	2100      	movs	r1, #0
 800014e:	0340      	lsls	r0, r0, #13
 8000150:	f000 fae4 	bl	800071c <RCC_AHBPeriphResetCmd>
 8000154:	e7c7      	b.n	80000e6 <GPIO_DeInit+0x22>
 8000156:	46c0      	nop			; (mov r8, r8)
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800
 8000160:	48000c00 	.word	0x48000c00
 8000164:	48001400 	.word	0x48001400

08000168 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800016a:	4644      	mov	r4, r8
 800016c:	465f      	mov	r7, fp
 800016e:	4656      	mov	r6, sl
 8000170:	464d      	mov	r5, r9
 8000172:	b4f0      	push	{r4, r5, r6, r7}
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000174:	2403      	movs	r4, #3
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000176:	468c      	mov	ip, r1
 8000178:	b083      	sub	sp, #12
 800017a:	6809      	ldr	r1, [r1, #0]
 800017c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800017e:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000180:	2701      	movs	r7, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000182:	46a0      	mov	r8, r4
 8000184:	e003      	b.n	800018e <GPIO_Init+0x26>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000186:	3301      	adds	r3, #1
 8000188:	3202      	adds	r2, #2
 800018a:	2b10      	cmp	r3, #16
 800018c:	d027      	beq.n	80001de <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800018e:	1c3c      	adds	r4, r7, #0

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000190:	1c0d      	adds	r5, r1, #0

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000192:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000194:	4025      	ands	r5, r4

    if (currentpin == pos)
 8000196:	42a5      	cmp	r5, r4
 8000198:	d1f5      	bne.n	8000186 <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800019a:	4664      	mov	r4, ip
 800019c:	7924      	ldrb	r4, [r4, #4]
 800019e:	46a3      	mov	fp, r4
 80001a0:	3c01      	subs	r4, #1
 80001a2:	2c01      	cmp	r4, #1
 80001a4:	d922      	bls.n	80001ec <GPIO_Init+0x84>
 80001a6:	4644      	mov	r4, r8
 80001a8:	4094      	lsls	r4, r2
 80001aa:	43e4      	mvns	r4, r4
 80001ac:	9401      	str	r4, [sp, #4]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001ae:	6805      	ldr	r5, [r0, #0]
 80001b0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001b2:	3301      	adds	r3, #1
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	402c      	ands	r4, r5
 80001b6:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001b8:	465c      	mov	r4, fp
 80001ba:	4094      	lsls	r4, r2
 80001bc:	6805      	ldr	r5, [r0, #0]
 80001be:	432c      	orrs	r4, r5

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c0:	4645      	mov	r5, r8
 80001c2:	4095      	lsls	r5, r2
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001c4:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c6:	68c4      	ldr	r4, [r0, #12]
 80001c8:	43ac      	bics	r4, r5
 80001ca:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001cc:	4664      	mov	r4, ip
 80001ce:	79e4      	ldrb	r4, [r4, #7]
 80001d0:	68c5      	ldr	r5, [r0, #12]
 80001d2:	4094      	lsls	r4, r2
 80001d4:	432c      	orrs	r4, r5
 80001d6:	60c4      	str	r4, [r0, #12]
 80001d8:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001da:	2b10      	cmp	r3, #16
 80001dc:	d1d7      	bne.n	800018e <GPIO_Init+0x26>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80001de:	b003      	add	sp, #12
 80001e0:	bc3c      	pop	{r2, r3, r4, r5}
 80001e2:	4690      	mov	r8, r2
 80001e4:	4699      	mov	r9, r3
 80001e6:	46a2      	mov	sl, r4
 80001e8:	46ab      	mov	fp, r5
 80001ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001ec:	6884      	ldr	r4, [r0, #8]
 80001ee:	46a1      	mov	r9, r4
 80001f0:	4644      	mov	r4, r8
 80001f2:	4094      	lsls	r4, r2
 80001f4:	464e      	mov	r6, r9
 80001f6:	43e4      	mvns	r4, r4
 80001f8:	4026      	ands	r6, r4
 80001fa:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001fc:	6886      	ldr	r6, [r0, #8]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001fe:	9401      	str	r4, [sp, #4]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000200:	46b2      	mov	sl, r6
 8000202:	4666      	mov	r6, ip
 8000204:	7976      	ldrb	r6, [r6, #5]
 8000206:	4096      	lsls	r6, r2
 8000208:	46b1      	mov	r9, r6
 800020a:	4656      	mov	r6, sl
 800020c:	464c      	mov	r4, r9
 800020e:	4326      	orrs	r6, r4
 8000210:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000212:	8884      	ldrh	r4, [r0, #4]
 8000214:	1c26      	adds	r6, r4, #0
 8000216:	43ae      	bics	r6, r5
 8000218:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800021a:	8884      	ldrh	r4, [r0, #4]
 800021c:	46a1      	mov	r9, r4
 800021e:	4664      	mov	r4, ip
 8000220:	79a5      	ldrb	r5, [r4, #6]
 8000222:	464c      	mov	r4, r9
 8000224:	409d      	lsls	r5, r3
 8000226:	4325      	orrs	r5, r4
 8000228:	b2ad      	uxth	r5, r5
 800022a:	8085      	strh	r5, [r0, #4]
 800022c:	e7bf      	b.n	80001ae <GPIO_Init+0x46>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000232:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000234:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000236:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000238:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800023a:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800023c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800023e:	71c3      	strb	r3, [r0, #7]
}
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	0000ffff 	.word	0x0000ffff

08000248 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000248:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800024a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800024c:	025b      	lsls	r3, r3, #9
 800024e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	430b      	orrs	r3, r1
 8000254:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000256:	9b01      	ldr	r3, [sp, #4]
 8000258:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800025a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000260:	69c3      	ldr	r3, [r0, #28]
 8000262:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000264:	69c3      	ldr	r3, [r0, #28]
 8000266:	9301      	str	r3, [sp, #4]
}
 8000268:	b002      	add	sp, #8
 800026a:	4770      	bx	lr

0800026c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800026c:	8a00      	ldrh	r0, [r0, #16]
 800026e:	4008      	ands	r0, r1
 8000270:	1e41      	subs	r1, r0, #1
 8000272:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000274:	b2c0      	uxtb	r0, r0
}
 8000276:	4770      	bx	lr

08000278 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000278:	8a00      	ldrh	r0, [r0, #16]
 800027a:	b280      	uxth	r0, r0
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000280:	8a80      	ldrh	r0, [r0, #20]
 8000282:	4008      	ands	r0, r1
 8000284:	1e41      	subs	r1, r0, #1
 8000286:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000288:	b2c0      	uxtb	r0, r0
}
 800028a:	4770      	bx	lr

0800028c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800028c:	8a80      	ldrh	r0, [r0, #20]
 800028e:	b280      	uxth	r0, r0
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000294:	6181      	str	r1, [r0, #24]
}
 8000296:	4770      	bx	lr

08000298 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000298:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800029a:	4770      	bx	lr

0800029c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800029c:	2a00      	cmp	r2, #0
 800029e:	d101      	bne.n	80002a4 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80002a0:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 80002a2:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80002a4:	6181      	str	r1, [r0, #24]
 80002a6:	e7fc      	b.n	80002a2 <GPIO_WriteBit+0x6>

080002a8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80002a8:	8281      	strh	r1, [r0, #20]
}
 80002aa:	4770      	bx	lr

080002ac <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ac:	2307      	movs	r3, #7
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002ae:	b510      	push	{r4, lr}
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b0:	240f      	movs	r4, #15
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b2:	400b      	ands	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b8:	409c      	lsls	r4, r3
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ba:	1c13      	adds	r3, r2, #0
 80002bc:	08c9      	lsrs	r1, r1, #3
 80002be:	0089      	lsls	r1, r1, #2
 80002c0:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002c2:	6a01      	ldr	r1, [r0, #32]
 80002c4:	43a1      	bics	r1, r4
 80002c6:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002c8:	6a01      	ldr	r1, [r0, #32]
 80002ca:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002cc:	6203      	str	r3, [r0, #32]
}
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d0:	2101      	movs	r1, #1
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <RCC_DeInit+0x48>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80002da:	6858      	ldr	r0, [r3, #4]
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <RCC_DeInit+0x4c>)
 80002de:	4002      	ands	r2, r0
 80002e0:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <RCC_DeInit+0x50>)
 80002e6:	4002      	ands	r2, r0
 80002e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <RCC_DeInit+0x54>)
 80002ee:	4002      	ands	r2, r0
 80002f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80002f2:	6858      	ldr	r0, [r3, #4]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <RCC_DeInit+0x58>)
 80002f6:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002f8:	200f      	movs	r0, #15

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80002fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002fe:	4382      	bics	r2, r0
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000302:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <RCC_DeInit+0x5c>)
 8000306:	4002      	ands	r2, r0
 8000308:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800030a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800030c:	438a      	bics	r2, r1
 800030e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
}
 8000314:	4770      	bx	lr
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40021000 	.word	0x40021000
 800031c:	f8ffb80c 	.word	0xf8ffb80c
 8000320:	fef6ffff 	.word	0xfef6ffff
 8000324:	fffbffff 	.word	0xfffbffff
 8000328:	ffc0ffff 	.word	0xffc0ffff
 800032c:	fffffeac 	.word	0xfffffeac

08000330 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8000330:	2200      	movs	r2, #0
 8000332:	4b02      	ldr	r3, [pc, #8]	; (800033c <RCC_HSEConfig+0xc>)
 8000334:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8000336:	7018      	strb	r0, [r3, #0]

}
 8000338:	4770      	bx	lr
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021002 	.word	0x40021002

08000340 <RCC_AdjustHSICalibrationValue>:
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000340:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000342:	4a03      	ldr	r2, [pc, #12]	; (8000350 <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000344:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000346:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000348:	438b      	bics	r3, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800034a:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR = tmpreg;
 800034c:	6010      	str	r0, [r2, #0]
}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <RCC_HSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000356:	2800      	cmp	r0, #0
 8000358:	d104      	bne.n	8000364 <RCC_HSICmd+0x10>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 800035a:	2101      	movs	r1, #1
 800035c:	6813      	ldr	r3, [r2, #0]
 800035e:	438b      	bics	r3, r1
 8000360:	6013      	str	r3, [r2, #0]
  }
}
 8000362:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8000364:	2301      	movs	r3, #1
 8000366:	6811      	ldr	r1, [r2, #0]
 8000368:	430b      	orrs	r3, r1
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	e7f9      	b.n	8000362 <RCC_HSICmd+0xe>
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40021000 	.word	0x40021000

08000374 <RCC_AdjustHSI14CalibrationValue>:
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000374:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8000376:	4a03      	ldr	r2, [pc, #12]	; (8000384 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8000378:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 800037a:	6b53      	ldr	r3, [r2, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 800037c:	438b      	bics	r3, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800037e:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR2 = tmpreg;
 8000380:	6350      	str	r0, [r2, #52]	; 0x34
}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <RCC_HSI14Cmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000388:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800038a:	2800      	cmp	r0, #0
 800038c:	d104      	bne.n	8000398 <RCC_HSI14Cmd+0x10>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800038e:	2101      	movs	r1, #1
 8000390:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000392:	438b      	bics	r3, r1
 8000394:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 8000396:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000398:	2301      	movs	r3, #1
 800039a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800039c:	430b      	orrs	r3, r1
 800039e:	6353      	str	r3, [r2, #52]	; 0x34
 80003a0:	e7f9      	b.n	8000396 <RCC_HSI14Cmd+0xe>
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000

080003a8 <RCC_HSI14ADCRequestCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d104      	bne.n	80003b8 <RCC_HSI14ADCRequestCmd+0x10>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 80003ae:	2304      	movs	r3, #4
 80003b0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80003b2:	430b      	orrs	r3, r1
 80003b4:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 80003b6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80003b8:	2104      	movs	r1, #4
 80003ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80003bc:	438b      	bics	r3, r1
 80003be:	6353      	str	r3, [r2, #52]	; 0x34
 80003c0:	e7f9      	b.n	80003b6 <RCC_HSI14ADCRequestCmd+0xe>
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000

080003c8 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80003c8:	2101      	movs	r1, #1
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <RCC_LSEConfig+0x1c>)
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	438a      	bics	r2, r1
 80003d0:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80003d2:	6a1a      	ldr	r2, [r3, #32]
 80003d4:	3103      	adds	r1, #3
 80003d6:	438a      	bics	r2, r1
 80003d8:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 80003da:	6a1a      	ldr	r2, [r3, #32]
 80003dc:	4310      	orrs	r0, r2
 80003de:	6218      	str	r0, [r3, #32]
}
 80003e0:	4770      	bx	lr
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000

080003e8 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 80003e8:	2118      	movs	r1, #24
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <RCC_LSEDriveConfig+0x14>)
 80003ec:	6a1a      	ldr	r2, [r3, #32]
 80003ee:	438a      	bics	r2, r1
 80003f0:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 80003f2:	6a1a      	ldr	r2, [r3, #32]
 80003f4:	4310      	orrs	r0, r2
 80003f6:	6218      	str	r0, [r3, #32]
}
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000

08000400 <RCC_LSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <RCC_LSICmd+0x10>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 8000406:	2101      	movs	r1, #1
 8000408:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800040a:	438b      	bics	r3, r1
 800040c:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 800040e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000410:	2301      	movs	r3, #1
 8000412:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000414:	430b      	orrs	r3, r1
 8000416:	6253      	str	r3, [r2, #36]	; 0x24
 8000418:	e7f9      	b.n	800040e <RCC_LSICmd+0xe>
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000422:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000424:	4a05      	ldr	r2, [pc, #20]	; (800043c <RCC_PLLConfig+0x1c>)
 8000426:	685c      	ldr	r4, [r3, #4]
 8000428:	4022      	ands	r2, r4
 800042a:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 800042c:	685a      	ldr	r2, [r3, #4]
 800042e:	4311      	orrs	r1, r2
 8000430:	4308      	orrs	r0, r1
 8000432:	6058      	str	r0, [r3, #4]
}
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40021000 	.word	0x40021000
 800043c:	ffc2ffff 	.word	0xffc2ffff

08000440 <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 8000440:	4a06      	ldr	r2, [pc, #24]	; (800045c <RCC_PLLCmd+0x1c>)
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000442:	2800      	cmp	r0, #0
 8000444:	d104      	bne.n	8000450 <RCC_PLLCmd+0x10>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 8000446:	6811      	ldr	r1, [r2, #0]
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <RCC_PLLCmd+0x20>)
 800044a:	400b      	ands	r3, r1
 800044c:	6013      	str	r3, [r2, #0]
  }
}
 800044e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	6813      	ldr	r3, [r2, #0]
 8000454:	0449      	lsls	r1, r1, #17
 8000456:	430b      	orrs	r3, r1
 8000458:	6013      	str	r3, [r2, #0]
 800045a:	e7f8      	b.n	800044e <RCC_PLLCmd+0xe>
 800045c:	40021000 	.word	0x40021000
 8000460:	feffffff 	.word	0xfeffffff

08000464 <RCC_PREDIV1Config>:
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8000464:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8000466:	4a03      	ldr	r2, [pc, #12]	; (8000474 <RCC_PREDIV1Config+0x10>)
 8000468:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800046a:	438b      	bics	r3, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 800046c:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 800046e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000478:	4a06      	ldr	r2, [pc, #24]	; (8000494 <RCC_ClockSecuritySystemCmd+0x1c>)
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <RCC_ClockSecuritySystemCmd+0x10>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 800047e:	6811      	ldr	r1, [r2, #0]
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <RCC_ClockSecuritySystemCmd+0x20>)
 8000482:	400b      	ands	r3, r1
 8000484:	6013      	str	r3, [r2, #0]
  }
}
 8000486:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	6813      	ldr	r3, [r2, #0]
 800048c:	0309      	lsls	r1, r1, #12
 800048e:	430b      	orrs	r3, r1
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	e7f8      	b.n	8000486 <RCC_ClockSecuritySystemCmd+0xe>
 8000494:	40021000 	.word	0x40021000
 8000498:	fff7ffff 	.word	0xfff7ffff

0800049c <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_MCOConfig+0x8>)
 800049e:	7018      	strb	r0, [r3, #0]
}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021007 	.word	0x40021007

080004a8 <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80004a8:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 80004aa:	4a03      	ldr	r2, [pc, #12]	; (80004b8 <RCC_SYSCLKConfig+0x10>)
 80004ac:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80004ae:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80004b0:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004b2:	6050      	str	r0, [r2, #4]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80004bc:	200c      	movs	r0, #12
 80004be:	4b02      	ldr	r3, [pc, #8]	; (80004c8 <RCC_GetSYSCLKSource+0xc>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	4018      	ands	r0, r3
}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <RCC_HCLKConfig>:
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80004cc:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 80004ce:	4a03      	ldr	r2, [pc, #12]	; (80004dc <RCC_HCLKConfig+0x10>)
 80004d0:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80004d2:	438b      	bics	r3, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80004d4:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004d6:	6050      	str	r0, [r2, #4]
}
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000

080004e0 <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80004e0:	4a03      	ldr	r2, [pc, #12]	; (80004f0 <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80004e4:	6851      	ldr	r1, [r2, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 80004e6:	400b      	ands	r3, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80004e8:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004ea:	6050      	str	r0, [r2, #4]
}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000
 80004f4:	fffff8ff 	.word	0xfffff8ff

080004f8 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <RCC_ADCCLKConfig+0x28>)
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <RCC_ADCCLKConfig+0x2c>)
 80004fc:	6859      	ldr	r1, [r3, #4]
 80004fe:	400a      	ands	r2, r1
 8000500:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	0402      	lsls	r2, r0, #16
 8000506:	0c12      	lsrs	r2, r2, #16
 8000508:	430a      	orrs	r2, r1
 800050a:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 800050c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800050e:	4a06      	ldr	r2, [pc, #24]	; (8000528 <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000510:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000512:	400a      	ands	r2, r1
 8000514:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000518:	4310      	orrs	r0, r2
 800051a:	6318      	str	r0, [r3, #48]	; 0x30
}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40021000 	.word	0x40021000
 8000524:	ffffbfff 	.word	0xffffbfff
 8000528:	fffffeff 	.word	0xfffffeff

0800052c <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <RCC_CECCLKConfig+0x14>)
 8000530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000532:	438a      	bics	r2, r1
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	4310      	orrs	r0, r2
 800053a:	6318      	str	r0, [r3, #48]	; 0x30
}
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000

08000544 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000544:	2110      	movs	r1, #16
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <RCC_I2CCLKConfig+0x14>)
 8000548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054a:	438a      	bics	r2, r1
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 800054e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000550:	4310      	orrs	r0, r2
 8000552:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 800055c:	2103      	movs	r1, #3
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <RCC_USARTCLKConfig+0x14>)
 8000560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000562:	438a      	bics	r2, r1
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8000566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000568:	4310      	orrs	r0, r2
 800056a:	6318      	str	r0, [r3, #48]	; 0x30
}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000

08000574 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000574:	210c      	movs	r1, #12
 8000576:	4a3b      	ldr	r2, [pc, #236]	; (8000664 <RCC_GetClocksFreq+0xf0>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800057a:	6853      	ldr	r3, [r2, #4]
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800057c:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800057e:	400b      	ands	r3, r1
  
  switch (tmp)
 8000580:	2b04      	cmp	r3, #4
 8000582:	d001      	beq.n	8000588 <RCC_GetClocksFreq+0x14>
 8000584:	2b08      	cmp	r3, #8
 8000586:	d051      	beq.n	800062c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000588:	4837      	ldr	r0, [pc, #220]	; (8000668 <RCC_GetClocksFreq+0xf4>)
 800058a:	6020      	str	r0, [r4, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800058c:	4935      	ldr	r1, [pc, #212]	; (8000664 <RCC_GetClocksFreq+0xf0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 800058e:	4d37      	ldr	r5, [pc, #220]	; (800066c <RCC_GetClocksFreq+0xf8>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000590:	684b      	ldr	r3, [r1, #4]
 8000592:	061b      	lsls	r3, r3, #24
  tmp = tmp >> 4;
 8000594:	0f1b      	lsrs	r3, r3, #28
  presc = APBAHBPrescTable[tmp]; 
 8000596:	5cea      	ldrb	r2, [r5, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000598:	1c03      	adds	r3, r0, #0
 800059a:	40d3      	lsrs	r3, r2
 800059c:	1c1a      	adds	r2, r3, #0
 800059e:	6063      	str	r3, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 80005a0:	684b      	ldr	r3, [r1, #4]
 80005a2:	055b      	lsls	r3, r3, #21
  tmp = tmp >> 8;
 80005a4:	0f5b      	lsrs	r3, r3, #29
  presc = APBAHBPrescTable[tmp];
 80005a6:	5ceb      	ldrb	r3, [r5, r3]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 80005ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	d421      	bmi.n	80005f6 <RCC_GetClocksFreq+0x82>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <RCC_GetClocksFreq+0xfc>)
 80005b4:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	065b      	lsls	r3, r3, #25
 80005bc:	d424      	bmi.n	8000608 <RCC_GetClocksFreq+0x94>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <RCC_GetClocksFreq+0x100>)
 80005c0:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	06db      	lsls	r3, r3, #27
 80005c8:	d425      	bmi.n	8000616 <RCC_GetClocksFreq+0xa2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <RCC_GetClocksFreq+0xf4>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80005cc:	4925      	ldr	r1, [pc, #148]	; (8000664 <RCC_GetClocksFreq+0xf0>)

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005ce:	6163      	str	r3, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80005d0:	2303      	movs	r3, #3
 80005d2:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80005d4:	422b      	tst	r3, r5
 80005d6:	d024      	beq.n	8000622 <RCC_GetClocksFreq+0xae>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80005d8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80005da:	401a      	ands	r2, r3
 80005dc:	2a01      	cmp	r2, #1
 80005de:	d03a      	beq.n	8000656 <RCC_GetClocksFreq+0xe2>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80005e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80005e2:	401a      	ands	r2, r3
 80005e4:	2a02      	cmp	r2, #2
 80005e6:	d038      	beq.n	800065a <RCC_GetClocksFreq+0xe6>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80005e8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80005ea:	4013      	ands	r3, r2
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d101      	bne.n	80005f4 <RCC_GetClocksFreq+0x80>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <RCC_GetClocksFreq+0xf4>)
 80005f2:	61a3      	str	r3, [r4, #24]
  }
}
 80005f4:	bd38      	pop	{r3, r4, r5, pc}
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80005f6:	684b      	ldr	r3, [r1, #4]
 80005f8:	045b      	lsls	r3, r3, #17
 80005fa:	d414      	bmi.n	8000626 <RCC_GetClocksFreq+0xb2>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80005fc:	0853      	lsrs	r3, r2, #1
 80005fe:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	065b      	lsls	r3, r3, #25
 8000606:	d5da      	bpl.n	80005be <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	06db      	lsls	r3, r3, #27
 8000614:	d5d9      	bpl.n	80005ca <RCC_GetClocksFreq+0x56>
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000616:	2303      	movs	r3, #3
 8000618:	4912      	ldr	r1, [pc, #72]	; (8000664 <RCC_GetClocksFreq+0xf0>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800061a:	6160      	str	r0, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800061c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800061e:	422b      	tst	r3, r5
 8000620:	d1da      	bne.n	80005d8 <RCC_GetClocksFreq+0x64>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000622:	61a2      	str	r2, [r4, #24]
 8000624:	e7e6      	b.n	80005f4 <RCC_GetClocksFreq+0x80>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8000626:	0893      	lsrs	r3, r2, #2
 8000628:	60e3      	str	r3, [r4, #12]
 800062a:	e7c4      	b.n	80005b6 <RCC_GetClocksFreq+0x42>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800062c:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800062e:	6853      	ldr	r3, [r2, #4]
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000630:	0280      	lsls	r0, r0, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000632:	0f00      	lsrs	r0, r0, #28
 8000634:	1c85      	adds	r5, r0, #2
      
      if (pllsource == 0x00)
 8000636:	03db      	lsls	r3, r3, #15
 8000638:	d403      	bmi.n	8000642 <RCC_GetClocksFreq+0xce>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <RCC_GetClocksFreq+0x104>)
 800063c:	4368      	muls	r0, r5
 800063e:	6020      	str	r0, [r4, #0]
 8000640:	e7a4      	b.n	800058c <RCC_GetClocksFreq+0x18>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000642:	210f      	movs	r1, #15
 8000644:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <RCC_GetClocksFreq+0xf4>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000648:	4019      	ands	r1, r3
 800064a:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 800064c:	f004 fca0 	bl	8004f90 <__aeabi_uidiv>
 8000650:	4368      	muls	r0, r5
 8000652:	6020      	str	r0, [r4, #0]
 8000654:	e79a      	b.n	800058c <RCC_GetClocksFreq+0x18>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000656:	61a0      	str	r0, [r4, #24]
 8000658:	e7cc      	b.n	80005f4 <RCC_GetClocksFreq+0x80>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	61a3      	str	r3, [r4, #24]
 8000660:	e7c8      	b.n	80005f4 <RCC_GetClocksFreq+0x80>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000
 8000668:	007a1200 	.word	0x007a1200
 800066c:	20000000 	.word	0x20000000
 8000670:	00d59f80 	.word	0x00d59f80
 8000674:	00008012 	.word	0x00008012
 8000678:	003d0900 	.word	0x003d0900

0800067c <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800067c:	4a02      	ldr	r2, [pc, #8]	; (8000688 <RCC_RTCCLKConfig+0xc>)
 800067e:	6a13      	ldr	r3, [r2, #32]
 8000680:	4318      	orrs	r0, r3
 8000682:	6210      	str	r0, [r2, #32]
}
 8000684:	4770      	bx	lr
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <RCC_RTCCLKCmd+0x1c>)
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800068e:	2800      	cmp	r0, #0
 8000690:	d104      	bne.n	800069c <RCC_RTCCLKCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000692:	6a11      	ldr	r1, [r2, #32]
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <RCC_RTCCLKCmd+0x20>)
 8000696:	400b      	ands	r3, r1
 8000698:	6213      	str	r3, [r2, #32]
  }
}
 800069a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	6a13      	ldr	r3, [r2, #32]
 80006a0:	0209      	lsls	r1, r1, #8
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6213      	str	r3, [r2, #32]
 80006a6:	e7f8      	b.n	800069a <RCC_RTCCLKCmd+0xe>
 80006a8:	40021000 	.word	0x40021000
 80006ac:	ffff7fff 	.word	0xffff7fff

080006b0 <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <RCC_BackupResetCmd+0x1c>)
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006b2:	2800      	cmp	r0, #0
 80006b4:	d104      	bne.n	80006c0 <RCC_BackupResetCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 80006b6:	6a11      	ldr	r1, [r2, #32]
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <RCC_BackupResetCmd+0x20>)
 80006ba:	400b      	ands	r3, r1
 80006bc:	6213      	str	r3, [r2, #32]
  }
}
 80006be:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	6a13      	ldr	r3, [r2, #32]
 80006c4:	0249      	lsls	r1, r1, #9
 80006c6:	430b      	orrs	r3, r1
 80006c8:	6213      	str	r3, [r2, #32]
 80006ca:	e7f8      	b.n	80006be <RCC_BackupResetCmd+0xe>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	fffeffff 	.word	0xfffeffff

080006d4 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <RCC_AHBPeriphClockCmd+0x14>)
 80006d6:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006d8:	2900      	cmp	r1, #0
 80006da:	d102      	bne.n	80006e2 <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80006dc:	4383      	bics	r3, r0
 80006de:	6153      	str	r3, [r2, #20]
  }
}
 80006e0:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80006e2:	4318      	orrs	r0, r3
 80006e4:	6150      	str	r0, [r2, #20]
 80006e6:	e7fb      	b.n	80006e0 <RCC_AHBPeriphClockCmd+0xc>
 80006e8:	40021000 	.word	0x40021000

080006ec <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <RCC_APB2PeriphClockCmd+0x14>)
 80006ee:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006f0:	2900      	cmp	r1, #0
 80006f2:	d102      	bne.n	80006fa <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006f4:	4383      	bics	r3, r0
 80006f6:	6193      	str	r3, [r2, #24]
  }
}
 80006f8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006fa:	4318      	orrs	r0, r3
 80006fc:	6190      	str	r0, [r2, #24]
 80006fe:	e7fb      	b.n	80006f8 <RCC_APB2PeriphClockCmd+0xc>
 8000700:	40021000 	.word	0x40021000

08000704 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <RCC_APB1PeriphClockCmd+0x14>)
 8000706:	69d3      	ldr	r3, [r2, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000708:	2900      	cmp	r1, #0
 800070a:	d102      	bne.n	8000712 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800070c:	4383      	bics	r3, r0
 800070e:	61d3      	str	r3, [r2, #28]
  }
}
 8000710:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000712:	4318      	orrs	r0, r3
 8000714:	61d0      	str	r0, [r2, #28]
 8000716:	e7fb      	b.n	8000710 <RCC_APB1PeriphClockCmd+0xc>
 8000718:	40021000 	.word	0x40021000

0800071c <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <RCC_AHBPeriphResetCmd+0x14>)
 800071e:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000720:	2900      	cmp	r1, #0
 8000722:	d102      	bne.n	800072a <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000724:	4383      	bics	r3, r0
 8000726:	6293      	str	r3, [r2, #40]	; 0x28
  }
}
 8000728:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800072a:	4318      	orrs	r0, r3
 800072c:	6290      	str	r0, [r2, #40]	; 0x28
 800072e:	e7fb      	b.n	8000728 <RCC_AHBPeriphResetCmd+0xc>
 8000730:	40021000 	.word	0x40021000

08000734 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <RCC_APB2PeriphResetCmd+0x14>)
 8000736:	68d3      	ldr	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000738:	2900      	cmp	r1, #0
 800073a:	d102      	bne.n	8000742 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800073c:	4383      	bics	r3, r0
 800073e:	60d3      	str	r3, [r2, #12]
  }
}
 8000740:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000742:	4318      	orrs	r0, r3
 8000744:	60d0      	str	r0, [r2, #12]
 8000746:	e7fb      	b.n	8000740 <RCC_APB2PeriphResetCmd+0xc>
 8000748:	40021000 	.word	0x40021000

0800074c <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <RCC_APB1PeriphResetCmd+0x14>)
 800074e:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000750:	2900      	cmp	r1, #0
 8000752:	d102      	bne.n	800075a <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000754:	4383      	bics	r3, r0
 8000756:	6113      	str	r3, [r2, #16]
  }
}
 8000758:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800075a:	4318      	orrs	r0, r3
 800075c:	6110      	str	r0, [r2, #16]
 800075e:	e7fb      	b.n	8000758 <RCC_APB1PeriphResetCmd+0xc>
 8000760:	40021000 	.word	0x40021000

08000764 <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <RCC_ITConfig+0x14>)
 8000766:	7813      	ldrb	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000768:	2900      	cmp	r1, #0
 800076a:	d102      	bne.n	8000772 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 800076c:	4383      	bics	r3, r0
 800076e:	7013      	strb	r3, [r2, #0]
  }
}
 8000770:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000772:	4318      	orrs	r0, r3
 8000774:	7010      	strb	r0, [r2, #0]
 8000776:	e7fb      	b.n	8000770 <RCC_ITConfig+0xc>
 8000778:	40021009 	.word	0x40021009

0800077c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800077c:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 800077e:	d108      	bne.n	8000792 <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->CR;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <RCC_GetFlagStatus+0x30>)
 8000782:	681b      	ldr	r3, [r3, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000784:	221f      	movs	r2, #31
 8000786:	4010      	ands	r0, r2
 8000788:	40c3      	lsrs	r3, r0
 800078a:	1c18      	adds	r0, r3, #0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 800078c:	2301      	movs	r3, #1
 800078e:	4018      	ands	r0, r3
}
 8000790:	4770      	bx	lr

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000792:	2b01      	cmp	r3, #1
 8000794:	d004      	beq.n	80007a0 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000796:	2b02      	cmp	r3, #2
 8000798:	d005      	beq.n	80007a6 <RCC_GetFlagStatus+0x2a>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <RCC_GetFlagStatus+0x30>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	e7f1      	b.n	8000784 <RCC_GetFlagStatus+0x8>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <RCC_GetFlagStatus+0x30>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	e7ee      	b.n	8000784 <RCC_GetFlagStatus+0x8>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80007a6:	4b01      	ldr	r3, [pc, #4]	; (80007ac <RCC_GetFlagStatus+0x30>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	e7eb      	b.n	8000784 <RCC_GetFlagStatus+0x8>
 80007ac:	40021000 	.word	0x40021000

080007b0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80007b0:	b510      	push	{r4, lr}
  __IO uint32_t StartUpCounter = 0;
 80007b2:	2300      	movs	r3, #0
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007b4:	24a0      	movs	r4, #160	; 0xa0
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80007b6:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 80007b8:	9301      	str	r3, [sp, #4]
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007ba:	00e4      	lsls	r4, r4, #3
 80007bc:	e001      	b.n	80007c2 <RCC_WaitForHSEStartUp+0x12>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d108      	bne.n	80007d4 <RCC_WaitForHSEStartUp+0x24>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80007c2:	2011      	movs	r0, #17
 80007c4:	f7ff ffda 	bl	800077c <RCC_GetFlagStatus>
    StartUpCounter++;  
 80007c8:	9b01      	ldr	r3, [sp, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007ce:	9b01      	ldr	r3, [sp, #4]
 80007d0:	42a3      	cmp	r3, r4
 80007d2:	d1f4      	bne.n	80007be <RCC_WaitForHSEStartUp+0xe>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80007d4:	2011      	movs	r0, #17
 80007d6:	f7ff ffd1 	bl	800077c <RCC_GetFlagStatus>
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 80007de:	b2c0      	uxtb	r0, r0
}
 80007e0:	b002      	add	sp, #8
 80007e2:	bd10      	pop	{r4, pc}

080007e4 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <RCC_ClearFlag+0x10>)
 80007e8:	0449      	lsls	r1, r1, #17
 80007ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6253      	str	r3, [r2, #36]	; 0x24
}
 80007f0:	4770      	bx	lr
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <RCC_GetITStatus+0x10>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4018      	ands	r0, r3
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000802:	b2c0      	uxtb	r0, r0
}
 8000804:	4770      	bx	lr
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000

0800080c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 800080c:	4b01      	ldr	r3, [pc, #4]	; (8000814 <RCC_ClearITPendingBit+0x8>)
 800080e:	7018      	strb	r0, [r3, #0]
}
 8000810:	4770      	bx	lr
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	4002100a 	.word	0x4002100a

08000818 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 6, 14, 15, 16 and 17 to select the TIM peripheral.
  * @retval None
  *   
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8000818:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <TIM_DeInit+0xdc>)
 800081c:	4298      	cmp	r0, r3
 800081e:	d021      	beq.n	8000864 <TIM_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  }     
  else if (TIMx == TIM2)
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	4298      	cmp	r0, r3
 8000826:	d028      	beq.n	800087a <TIM_DeInit+0x62>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <TIM_DeInit+0xe0>)
 800082a:	4298      	cmp	r0, r3
 800082c:	d02e      	beq.n	800088c <TIM_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }
  else if (TIMx == TIM6)
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <TIM_DeInit+0xe4>)
 8000830:	4298      	cmp	r0, r3
 8000832:	d034      	beq.n	800089e <TIM_DeInit+0x86>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  } 
  else if (TIMx == TIM14) 
 8000834:	4b32      	ldr	r3, [pc, #200]	; (8000900 <TIM_DeInit+0xe8>)
 8000836:	4298      	cmp	r0, r3
 8000838:	d03a      	beq.n	80008b0 <TIM_DeInit+0x98>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
  }        
  else if (TIMx == TIM15)
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <TIM_DeInit+0xec>)
 800083c:	4298      	cmp	r0, r3
 800083e:	d042      	beq.n	80008c6 <TIM_DeInit+0xae>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
  } 
  else if (TIMx == TIM16)
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <TIM_DeInit+0xf0>)
 8000842:	4298      	cmp	r0, r3
 8000844:	d04a      	beq.n	80008dc <TIM_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
  } 
  else
  {
    if (TIMx == TIM17)
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <TIM_DeInit+0xf4>)
 8000848:	4298      	cmp	r0, r3
 800084a:	d000      	beq.n	800084e <TIM_DeInit+0x36>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
     
}
 800084c:	bd08      	pop	{r3, pc}
  } 
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 800084e:	2080      	movs	r0, #128	; 0x80
 8000850:	2101      	movs	r1, #1
 8000852:	02c0      	lsls	r0, r0, #11
 8000854:	f7ff ff6e 	bl	8000734 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8000858:	2080      	movs	r0, #128	; 0x80
 800085a:	2100      	movs	r1, #0
 800085c:	02c0      	lsls	r0, r0, #11
 800085e:	f7ff ff69 	bl	8000734 <RCC_APB2PeriphResetCmd>
 8000862:	e7f3      	b.n	800084c <TIM_DeInit+0x34>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000864:	2080      	movs	r0, #128	; 0x80
 8000866:	2101      	movs	r1, #1
 8000868:	0100      	lsls	r0, r0, #4
 800086a:	f7ff ff63 	bl	8000734 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	2100      	movs	r1, #0
 8000872:	0100      	lsls	r0, r0, #4
 8000874:	f7ff ff5e 	bl	8000734 <RCC_APB2PeriphResetCmd>
 8000878:	e7e8      	b.n	800084c <TIM_DeInit+0x34>
  }     
  else if (TIMx == TIM2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800087a:	2001      	movs	r0, #1
 800087c:	2101      	movs	r1, #1
 800087e:	f7ff ff65 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8000882:	2001      	movs	r0, #1
 8000884:	2100      	movs	r1, #0
 8000886:	f7ff ff61 	bl	800074c <RCC_APB1PeriphResetCmd>
 800088a:	e7df      	b.n	800084c <TIM_DeInit+0x34>
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800088c:	2002      	movs	r0, #2
 800088e:	2101      	movs	r1, #1
 8000890:	f7ff ff5c 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8000894:	2002      	movs	r0, #2
 8000896:	2100      	movs	r1, #0
 8000898:	f7ff ff58 	bl	800074c <RCC_APB1PeriphResetCmd>
 800089c:	e7d6      	b.n	800084c <TIM_DeInit+0x34>
  }
  else if (TIMx == TIM6)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800089e:	2010      	movs	r0, #16
 80008a0:	2101      	movs	r1, #1
 80008a2:	f7ff ff53 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80008a6:	2010      	movs	r0, #16
 80008a8:	2100      	movs	r1, #0
 80008aa:	f7ff ff4f 	bl	800074c <RCC_APB1PeriphResetCmd>
 80008ae:	e7cd      	b.n	800084c <TIM_DeInit+0x34>
  } 
  else if (TIMx == TIM14) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80008b0:	2080      	movs	r0, #128	; 0x80
 80008b2:	2101      	movs	r1, #1
 80008b4:	0040      	lsls	r0, r0, #1
 80008b6:	f7ff ff49 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	2100      	movs	r1, #0
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	f7ff ff44 	bl	800074c <RCC_APB1PeriphResetCmd>
 80008c4:	e7c2      	b.n	800084c <TIM_DeInit+0x34>
  }        
  else if (TIMx == TIM15)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80008c6:	2080      	movs	r0, #128	; 0x80
 80008c8:	2101      	movs	r1, #1
 80008ca:	0240      	lsls	r0, r0, #9
 80008cc:	f7ff ff32 	bl	8000734 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 80008d0:	2080      	movs	r0, #128	; 0x80
 80008d2:	2100      	movs	r1, #0
 80008d4:	0240      	lsls	r0, r0, #9
 80008d6:	f7ff ff2d 	bl	8000734 <RCC_APB2PeriphResetCmd>
 80008da:	e7b7      	b.n	800084c <TIM_DeInit+0x34>
  } 
  else if (TIMx == TIM16)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80008dc:	2080      	movs	r0, #128	; 0x80
 80008de:	2101      	movs	r1, #1
 80008e0:	0280      	lsls	r0, r0, #10
 80008e2:	f7ff ff27 	bl	8000734 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80008e6:	2080      	movs	r0, #128	; 0x80
 80008e8:	2100      	movs	r1, #0
 80008ea:	0280      	lsls	r0, r0, #10
 80008ec:	f7ff ff22 	bl	8000734 <RCC_APB2PeriphResetCmd>
 80008f0:	e7ac      	b.n	800084c <TIM_DeInit+0x34>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40000400 	.word	0x40000400
 80008fc:	40001000 	.word	0x40001000
 8000900:	40002000 	.word	0x40002000
 8000904:	40014000 	.word	0x40014000
 8000908:	40014400 	.word	0x40014400
 800090c:	40014800 	.word	0x40014800

08000910 <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000910:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <TIM_TimeBaseInit+0x80>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000914:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8000916:	4290      	cmp	r0, r2
 8000918:	d01e      	beq.n	8000958 <TIM_TimeBaseInit+0x48>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	05d2      	lsls	r2, r2, #23
 800091e:	4290      	cmp	r0, r2
 8000920:	d02a      	beq.n	8000978 <TIM_TimeBaseInit+0x68>
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <TIM_TimeBaseInit+0x84>)
 8000924:	4290      	cmp	r0, r2
 8000926:	d027      	beq.n	8000978 <TIM_TimeBaseInit+0x68>
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  }
 
  if(TIMx != TIM6)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <TIM_TimeBaseInit+0x88>)
 800092a:	4290      	cmp	r0, r2
 800092c:	d029      	beq.n	8000982 <TIM_TimeBaseInit+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <TIM_TimeBaseInit+0x8c>)
 8000930:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000932:	890a      	ldrh	r2, [r1, #8]
 8000934:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000936:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000938:	684b      	ldr	r3, [r1, #4]
 800093a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800093c:	880b      	ldrh	r3, [r1, #0]
 800093e:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <TIM_TimeBaseInit+0x90>)
 8000942:	4298      	cmp	r0, r3
 8000944:	d015      	beq.n	8000972 <TIM_TimeBaseInit+0x62>
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <TIM_TimeBaseInit+0x94>)
 8000948:	4298      	cmp	r0, r3
 800094a:	d012      	beq.n	8000972 <TIM_TimeBaseInit+0x62>
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <TIM_TimeBaseInit+0x98>)
 800094e:	4298      	cmp	r0, r3
 8000950:	d00f      	beq.n	8000972 <TIM_TimeBaseInit+0x62>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000952:	2301      	movs	r3, #1
 8000954:	8283      	strh	r3, [r0, #20]
}
 8000956:	4770      	bx	lr
  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000958:	2270      	movs	r2, #112	; 0x70
 800095a:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800095c:	884a      	ldrh	r2, [r1, #2]
 800095e:	4313      	orrs	r3, r2
  }
 
  if(TIMx != TIM6)
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <TIM_TimeBaseInit+0x8c>)
 8000962:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000964:	890a      	ldrh	r2, [r1, #8]
 8000966:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000968:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800096a:	684b      	ldr	r3, [r1, #4]
 800096c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800096e:	880b      	ldrh	r3, [r1, #0]
 8000970:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000972:	7a8b      	ldrb	r3, [r1, #10]
 8000974:	8603      	strh	r3, [r0, #48]	; 0x30
 8000976:	e7ec      	b.n	8000952 <TIM_TimeBaseInit+0x42>
  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000978:	2270      	movs	r2, #112	; 0x70
 800097a:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800097c:	884a      	ldrh	r2, [r1, #2]
 800097e:	4313      	orrs	r3, r2
 8000980:	e7d5      	b.n	800092e <TIM_TimeBaseInit+0x1e>
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8000982:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000984:	684b      	ldr	r3, [r1, #4]
 8000986:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000988:	880b      	ldrh	r3, [r1, #0]
 800098a:	8503      	strh	r3, [r0, #40]	; 0x28
 800098c:	e7e1      	b.n	8000952 <TIM_TimeBaseInit+0x42>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40012c00 	.word	0x40012c00
 8000994:	40000400 	.word	0x40000400
 8000998:	40001000 	.word	0x40001000
 800099c:	fffffcff 	.word	0xfffffcff
 80009a0:	40014000 	.word	0x40014000
 80009a4:	40014400 	.word	0x40014400
 80009a8:	40014800 	.word	0x40014800

080009ac <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80009b2:	2300      	movs	r3, #0
 80009b4:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80009b6:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80009b8:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80009ba:	7283      	strb	r3, [r0, #10]
}
 80009bc:	4770      	bx	lr
 80009be:	46c0      	nop			; (mov r8, r8)

080009c0 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80009c0:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80009c2:	8282      	strh	r2, [r0, #20]
}
 80009c4:	4770      	bx	lr
 80009c6:	46c0      	nop			; (mov r8, r8)

080009c8 <TIM_CounterModeConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  
  tmpcr1 = TIMx->CR1;
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80009c8:	2270      	movs	r2, #112	; 0x70
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  
  tmpcr1 = TIMx->CR1;
 80009ca:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80009cc:	4393      	bics	r3, r2
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80009ce:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80009d0:	8001      	strh	r1, [r0, #0]
}
 80009d2:	4770      	bx	lr

080009d4 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80009d4:	6241      	str	r1, [r0, #36]	; 0x24
}
 80009d6:	4770      	bx	lr

080009d8 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80009d8:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 80009da:	4770      	bx	lr

080009dc <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 80009dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80009de:	4770      	bx	lr

080009e0 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80009e0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80009e2:	b280      	uxth	r0, r0
}
 80009e4:	4770      	bx	lr
 80009e6:	46c0      	nop			; (mov r8, r8)

080009e8 <TIM_UpdateDisableConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d104      	bne.n	80009f6 <TIM_UpdateDisableConfig+0xe>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 80009ec:	2202      	movs	r2, #2
 80009ee:	8803      	ldrh	r3, [r0, #0]
 80009f0:	4393      	bics	r3, r2
 80009f2:	8003      	strh	r3, [r0, #0]
  }
}
 80009f4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80009f6:	2302      	movs	r3, #2
 80009f8:	8802      	ldrh	r2, [r0, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	8003      	strh	r3, [r0, #0]
 80009fe:	e7f9      	b.n	80009f4 <TIM_UpdateDisableConfig+0xc>

08000a00 <TIM_UpdateRequestConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d104      	bne.n	8000a0e <TIM_UpdateRequestConfig+0xe>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8000a04:	2204      	movs	r2, #4
 8000a06:	8803      	ldrh	r3, [r0, #0]
 8000a08:	4393      	bics	r3, r2
 8000a0a:	8003      	strh	r3, [r0, #0]
  }
}
 8000a0c:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	8802      	ldrh	r2, [r0, #0]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	8003      	strh	r3, [r0, #0]
 8000a16:	e7f9      	b.n	8000a0c <TIM_UpdateRequestConfig+0xc>

08000a18 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	d104      	bne.n	8000a26 <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	8803      	ldrh	r3, [r0, #0]
 8000a20:	4393      	bics	r3, r2
 8000a22:	8003      	strh	r3, [r0, #0]
  }
}
 8000a24:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	8802      	ldrh	r2, [r0, #0]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	8003      	strh	r3, [r0, #0]
 8000a2e:	e7f9      	b.n	8000a24 <TIM_ARRPreloadConfig+0xc>

08000a30 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8000a30:	2208      	movs	r2, #8
 8000a32:	8803      	ldrh	r3, [r0, #0]
 8000a34:	4393      	bics	r3, r2
 8000a36:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8000a38:	8803      	ldrh	r3, [r0, #0]
 8000a3a:	4319      	orrs	r1, r3
 8000a3c:	8001      	strh	r1, [r0, #0]
}
 8000a3e:	4770      	bx	lr

08000a40 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8000a40:	8802      	ldrh	r2, [r0, #0]
 8000a42:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <TIM_SetClockDivision+0x10>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8000a48:	8803      	ldrh	r3, [r0, #0]
 8000a4a:	4319      	orrs	r1, r3
 8000a4c:	8001      	strh	r1, [r0, #0]
}
 8000a4e:	4770      	bx	lr
 8000a50:	fffffcff 	.word	0xfffffcff

08000a54 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a54:	2900      	cmp	r1, #0
 8000a56:	d104      	bne.n	8000a62 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000a58:	2201      	movs	r2, #1
 8000a5a:	8803      	ldrh	r3, [r0, #0]
 8000a5c:	4393      	bics	r3, r2
 8000a5e:	8003      	strh	r3, [r0, #0]
  }
}
 8000a60:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a62:	2301      	movs	r3, #1
 8000a64:	8802      	ldrh	r2, [r0, #0]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	8003      	strh	r3, [r0, #0]
 8000a6a:	e7f9      	b.n	8000a60 <TIM_Cmd+0xc>

08000a6c <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8000a6c:	884a      	ldrh	r2, [r1, #2]
 8000a6e:	880b      	ldrh	r3, [r1, #0]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	888a      	ldrh	r2, [r1, #4]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	88ca      	ldrh	r2, [r1, #6]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	890a      	ldrh	r2, [r1, #8]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	894a      	ldrh	r2, [r1, #10]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	898a      	ldrh	r2, [r1, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	2244      	movs	r2, #68	; 0x44
 8000a88:	5283      	strh	r3, [r0, r2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8000a8a:	4770      	bx	lr

08000a8c <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8000a90:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8000a92:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8000a94:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8000a96:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8000a98:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8000a9a:	8183      	strh	r3, [r0, #12]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000aa0:	2244      	movs	r2, #68	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d104      	bne.n	8000ab0 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8000aa6:	5a83      	ldrh	r3, [r0, r2]
 8000aa8:	045b      	lsls	r3, r3, #17
 8000aaa:	0c5b      	lsrs	r3, r3, #17
 8000aac:	5283      	strh	r3, [r0, r2]
  }  
}
 8000aae:	4770      	bx	lr
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	5a81      	ldrh	r1, [r0, r2]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	430b      	orrs	r3, r1
 8000ab8:	5283      	strh	r3, [r0, r2]
 8000aba:	e7f8      	b.n	8000aae <TIM_CtrlPWMOutputs+0xe>

08000abc <TIM_OC1Init>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000abc:	2201      	movs	r2, #1
 8000abe:	8c03      	ldrh	r3, [r0, #32]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000ac2:	4393      	bics	r3, r2
 8000ac4:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ac6:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ac8:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000aca:	8b05      	ldrh	r5, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000acc:	3272      	adds	r2, #114	; 0x72
 8000ace:	4395      	bics	r5, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000ad0:	880a      	ldrh	r2, [r1, #0]
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ad2:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000ad4:	4315      	orrs	r5, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	4393      	bics	r3, r2
 8000ada:	1c1e      	adds	r6, r3, #0
 8000adc:	898a      	ldrh	r2, [r1, #12]
 8000ade:	884b      	ldrh	r3, [r1, #2]
 8000ae0:	4313      	orrs	r3, r2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <TIM_OC1Init+0x6c>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000ae4:	4333      	orrs	r3, r6
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8000ae6:	4290      	cmp	r0, r2
 8000ae8:	d00e      	beq.n	8000b08 <TIM_OC1Init+0x4c>
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <TIM_OC1Init+0x70>)
 8000aec:	4290      	cmp	r0, r2
 8000aee:	d00b      	beq.n	8000b08 <TIM_OC1Init+0x4c>
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <TIM_OC1Init+0x74>)
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d008      	beq.n	8000b08 <TIM_OC1Init+0x4c>
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <TIM_OC1Init+0x78>)
 8000af8:	4290      	cmp	r0, r2
 8000afa:	d005      	beq.n	8000b08 <TIM_OC1Init+0x4c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000afc:	688a      	ldr	r2, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000afe:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b00:	8305      	strh	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000b02:	6342      	str	r2, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b04:	8403      	strh	r3, [r0, #32]
}
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8000b08:	2208      	movs	r2, #8
 8000b0a:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000b0c:	89ca      	ldrh	r2, [r1, #14]
 8000b0e:	8a4e      	ldrh	r6, [r1, #18]
 8000b10:	4313      	orrs	r3, r2
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000b12:	2204      	movs	r2, #4
 8000b14:	4393      	bics	r3, r2
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000b16:	888a      	ldrh	r2, [r1, #4]
 8000b18:	4313      	orrs	r3, r2
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <TIM_OC1Init+0x7c>)
 8000b1c:	4014      	ands	r4, r2
 8000b1e:	8a0a      	ldrh	r2, [r1, #16]
 8000b20:	4332      	orrs	r2, r6
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000b22:	4314      	orrs	r4, r2
 8000b24:	e7ea      	b.n	8000afc <TIM_OC1Init+0x40>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40014000 	.word	0x40014000
 8000b30:	40014400 	.word	0x40014400
 8000b34:	40014800 	.word	0x40014800
 8000b38:	fffffcff 	.word	0xfffffcff

08000b3c <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	8c03      	ldrh	r3, [r0, #32]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b40:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000b42:	4393      	bics	r3, r2
 8000b44:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000b46:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <TIM_OC2Init+0x70>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b4a:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b4c:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b4e:	880e      	ldrh	r6, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8000b50:	401c      	ands	r4, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8000b52:	2320      	movs	r3, #32
 8000b54:	439a      	bics	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000b56:	898b      	ldrh	r3, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b58:	0236      	lsls	r6, r6, #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	431a      	orrs	r2, r3
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000b5e:	884b      	ldrh	r3, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000b60:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	431a      	orrs	r2, r3
 8000b66:	b293      	uxth	r3, r2
    
  if(TIMx == TIM1)
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <TIM_OC2Init+0x74>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b6a:	4334      	orrs	r4, r6
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b6c:	b2ad      	uxth	r5, r5
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b6e:	b2a4      	uxth	r4, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if(TIMx == TIM1)
 8000b70:	4290      	cmp	r0, r2
 8000b72:	d005      	beq.n	8000b80 <TIM_OC2Init+0x44>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000b74:	688a      	ldr	r2, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b76:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b78:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000b7a:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b7c:	8403      	strh	r3, [r0, #32]
}
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000b84:	89ca      	ldrh	r2, [r1, #14]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	4313      	orrs	r3, r2
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <TIM_OC2Init+0x78>)
 8000b8c:	4013      	ands	r3, r2
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000b8e:	888a      	ldrh	r2, [r1, #4]
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	4313      	orrs	r3, r2
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <TIM_OC2Init+0x7c>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000b96:	b29b      	uxth	r3, r3
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8000b98:	4015      	ands	r5, r2
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000b9a:	8a0a      	ldrh	r2, [r1, #16]
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	4315      	orrs	r5, r2
 8000ba0:	b2aa      	uxth	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000ba2:	8a4d      	ldrh	r5, [r1, #18]
 8000ba4:	00ad      	lsls	r5, r5, #2
 8000ba6:	432a      	orrs	r2, r5
 8000ba8:	b295      	uxth	r5, r2
 8000baa:	e7e3      	b.n	8000b74 <TIM_OC2Init+0x38>
 8000bac:	ffff8cff 	.word	0xffff8cff
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	0000ffbf 	.word	0x0000ffbf
 8000bb8:	fffff3ff 	.word	0xfffff3ff

08000bbc <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000bbc:	8c02      	ldrh	r2, [r0, #32]
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <TIM_OC3Init+0x6c>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000bc0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000bc6:	2373      	movs	r3, #115	; 0x73
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bc8:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bca:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000bcc:	8b86      	ldrh	r6, [r0, #28]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000bce:	898c      	ldrh	r4, [r1, #12]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000bd0:	439e      	bics	r6, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000bd2:	880b      	ldrh	r3, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000bd4:	0224      	lsls	r4, r4, #8
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000bd6:	431e      	orrs	r6, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <TIM_OC3Init+0x70>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bda:	b2ad      	uxth	r5, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000bdc:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000bde:	884b      	ldrh	r3, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000be0:	4322      	orrs	r2, r4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000be2:	021b      	lsls	r3, r3, #8
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000be4:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000be6:	431a      	orrs	r2, r3
 8000be8:	b293      	uxth	r3, r2
    
  if(TIMx == TIM1)
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <TIM_OC3Init+0x74>)
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d005      	beq.n	8000bfc <TIM_OC3Init+0x40>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000bf0:	688a      	ldr	r2, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bf2:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000bf4:	8386      	strh	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000bf6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bf8:	8403      	strh	r3, [r0, #32]
}
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <TIM_OC3Init+0x78>)
 8000bfe:	4013      	ands	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000c00:	89ca      	ldrh	r2, [r1, #14]
 8000c02:	0212      	lsls	r2, r2, #8
 8000c04:	4313      	orrs	r3, r2
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <TIM_OC3Init+0x7c>)
 8000c08:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000c0a:	888a      	ldrh	r2, [r1, #4]
 8000c0c:	0212      	lsls	r2, r2, #8
 8000c0e:	4313      	orrs	r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <TIM_OC3Init+0x80>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000c12:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000c14:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000c16:	8a0a      	ldrh	r2, [r1, #16]
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	4315      	orrs	r5, r2
 8000c1c:	b2aa      	uxth	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000c1e:	8a4d      	ldrh	r5, [r1, #18]
 8000c20:	012d      	lsls	r5, r5, #4
 8000c22:	432a      	orrs	r2, r5
 8000c24:	b295      	uxth	r5, r2
 8000c26:	e7e3      	b.n	8000bf0 <TIM_OC3Init+0x34>
 8000c28:	fffffeff 	.word	0xfffffeff
 8000c2c:	fffffdff 	.word	0xfffffdff
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	fffff7ff 	.word	0xfffff7ff
 8000c38:	0000fbff 	.word	0x0000fbff
 8000c3c:	ffffcfff 	.word	0xffffcfff

08000c40 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000c40:	8c02      	ldrh	r2, [r0, #32]
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <TIM_OC4Init+0x54>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000c44:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000c46:	4013      	ands	r3, r2
 8000c48:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c4a:	8c04      	ldrh	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <TIM_OC4Init+0x58>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c4e:	8886      	ldrh	r6, [r0, #4]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c50:	880d      	ldrh	r5, [r1, #0]
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c52:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c54:	022d      	lsls	r5, r5, #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000c56:	401a      	ands	r2, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c58:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <TIM_OC4Init+0x5c>)
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000c5c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000c5e:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000c60:	032d      	lsls	r5, r5, #12
 8000c62:	432b      	orrs	r3, r5
 8000c64:	b29c      	uxth	r4, r3
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000c66:	884b      	ldrh	r3, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c68:	b2b6      	uxth	r6, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000c6a:	031b      	lsls	r3, r3, #12
 8000c6c:	4323      	orrs	r3, r4
    
  if(TIMx == TIM1)
 8000c6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ca0 <TIM_OC4Init+0x60>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c70:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000c72:	b29b      	uxth	r3, r3
    
  if(TIMx == TIM1)
 8000c74:	42a0      	cmp	r0, r4
 8000c76:	d005      	beq.n	8000c84 <TIM_OC4Init+0x44>
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c78:	8086      	strh	r6, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000c7a:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000c7c:	688a      	ldr	r2, [r1, #8]
 8000c7e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c80:	8403      	strh	r3, [r0, #32]
}
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
    
  if(TIMx == TIM1)
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8000c84:	4c07      	ldr	r4, [pc, #28]	; (8000ca4 <TIM_OC4Init+0x64>)
 8000c86:	4026      	ands	r6, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000c88:	8a0c      	ldrh	r4, [r1, #16]
 8000c8a:	01a4      	lsls	r4, r4, #6
 8000c8c:	4326      	orrs	r6, r4
 8000c8e:	b2b6      	uxth	r6, r6
 8000c90:	e7f2      	b.n	8000c78 <TIM_OC4Init+0x38>
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	ffffefff 	.word	0xffffefff
 8000c98:	ffff8cff 	.word	0xffff8cff
 8000c9c:	ffffdfff 	.word	0xffffdfff
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	ffffbfff 	.word	0xffffbfff

08000ca8 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8000cac:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8000cae:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 8000cb0:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8000cb2:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8000cb4:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8000cb6:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8000cb8:	8243      	strh	r3, [r0, #18]
}
 8000cba:	4770      	bx	lr

08000cbc <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8000cbc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8000cbe:	2501      	movs	r5, #1
 8000cc0:	408d      	lsls	r5, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000cc2:	8c03      	ldrh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8000cc4:	1c04      	adds	r4, r0, #0

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000cc6:	43ab      	bics	r3, r5
 8000cc8:	8403      	strh	r3, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8000cca:	2308      	movs	r3, #8
 8000ccc:	1c08      	adds	r0, r1, #0
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8000cce:	3418      	adds	r4, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8000cd0:	4398      	bics	r0, r3
 8000cd2:	d00d      	beq.n	8000cf0 <TIM_SelectOCxM+0x34>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8000cd4:	1f0b      	subs	r3, r1, #4
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	191b      	adds	r3, r3, r4

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	4909      	ldr	r1, [pc, #36]	; (8000d04 <TIM_SelectOCxM+0x48>)
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8000ce0:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8000ce2:	4001      	ands	r1, r0
 8000ce4:	6019      	str	r1, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	b292      	uxth	r2, r2
 8000cea:	430a      	orrs	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]
  }
}
 8000cee:	bd30      	pop	{r4, r5, pc}
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8000cf0:	2070      	movs	r0, #112	; 0x70
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8000cf2:	0849      	lsrs	r1, r1, #1
 8000cf4:	1861      	adds	r1, r4, r1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8000cf6:	680b      	ldr	r3, [r1, #0]
 8000cf8:	4383      	bics	r3, r0
 8000cfa:	600b      	str	r3, [r1, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8000cfc:	680b      	ldr	r3, [r1, #0]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	600a      	str	r2, [r1, #0]
 8000d02:	e7f4      	b.n	8000cee <TIM_SelectOCxM+0x32>
 8000d04:	ffff8fff 	.word	0xffff8fff

08000d08 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000d08:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000d0a:	4770      	bx	lr

08000d0c <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8000d0c:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000d0e:	4770      	bx	lr

08000d10 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8000d10:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8000d12:	4770      	bx	lr

08000d14 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8000d14:	6401      	str	r1, [r0, #64]	; 0x40
}
 8000d16:	4770      	bx	lr

08000d18 <TIM_ForcedOC1Config>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8000d18:	2270      	movs	r2, #112	; 0x70
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8000d1a:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8000d1c:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8000d1e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d20:	8301      	strh	r1, [r0, #24]
}
 8000d22:	4770      	bx	lr

08000d24 <TIM_ForcedOC2Config>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr1 = TIMx->CCMR1;
 8000d24:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <TIM_ForcedOC2Config+0x10>)
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d28:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8000d2a:	4013      	ands	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d2c:	4319      	orrs	r1, r3
 8000d2e:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d30:	8301      	strh	r1, [r0, #24]
}
 8000d32:	4770      	bx	lr
 8000d34:	ffff8fff 	.word	0xffff8fff

08000d38 <TIM_ForcedOC3Config>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8000d38:	2270      	movs	r2, #112	; 0x70
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d3a:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8000d3c:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8000d3e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000d40:	8381      	strh	r1, [r0, #28]
}
 8000d42:	4770      	bx	lr

08000d44 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d44:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8000d46:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <TIM_ForcedOC4Config+0x10>)
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d48:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8000d4a:	4013      	ands	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000d50:	8381      	strh	r1, [r0, #28]
}
 8000d52:	4770      	bx	lr
 8000d54:	ffff8fff 	.word	0xffff8fff

08000d58 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d104      	bne.n	8000d66 <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	8883      	ldrh	r3, [r0, #4]
 8000d60:	4393      	bics	r3, r2
 8000d62:	8083      	strh	r3, [r0, #4]
  }
}
 8000d64:	4770      	bx	lr
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8000d66:	2301      	movs	r3, #1
 8000d68:	8882      	ldrh	r2, [r0, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	8083      	strh	r3, [r0, #4]
 8000d6e:	e7f9      	b.n	8000d64 <TIM_CCPreloadControl+0xc>

08000d70 <TIM_OC1PreloadConfig>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000d70:	2208      	movs	r2, #8
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000d72:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000d74:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000d76:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d78:	8301      	strh	r1, [r0, #24]
}
 8000d7a:	4770      	bx	lr

08000d7c <TIM_OC2PreloadConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000d7c:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000d7e:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <TIM_OC2PreloadConfig+0x10>)
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000d80:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000d82:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000d84:	4319      	orrs	r1, r3
 8000d86:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d88:	8301      	strh	r1, [r0, #24]
}
 8000d8a:	4770      	bx	lr
 8000d8c:	fffff7ff 	.word	0xfffff7ff

08000d90 <TIM_OC3PreloadConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000d90:	2208      	movs	r2, #8
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d92:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000d94:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000d96:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000d98:	8381      	strh	r1, [r0, #28]
}
 8000d9a:	4770      	bx	lr

08000d9c <TIM_OC4PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d9c:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8000d9e:	4b03      	ldr	r3, [pc, #12]	; (8000dac <TIM_OC4PreloadConfig+0x10>)
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000da0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8000da2:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000da4:	4319      	orrs	r1, r3
 8000da6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000da8:	8381      	strh	r1, [r0, #28]
}
 8000daa:	4770      	bx	lr
 8000dac:	fffff7ff 	.word	0xfffff7ff

08000db0 <TIM_OC1FastConfig>:
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8000db0:	2204      	movs	r2, #4
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000db2:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8000db4:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8000db6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000db8:	8301      	strh	r1, [r0, #24]
}
 8000dba:	4770      	bx	lr

08000dbc <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000dbc:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <TIM_OC2FastConfig+0x10>)
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8000dc0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8000dc2:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000dc8:	8301      	strh	r1, [r0, #24]
}
 8000dca:	4770      	bx	lr
 8000dcc:	fffffbff 	.word	0xfffffbff

08000dd0 <TIM_OC3FastConfig>:
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8000dd0:	2204      	movs	r2, #4
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8000dd2:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8000dd4:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8000dd6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8000dd8:	8381      	strh	r1, [r0, #28]
}
 8000dda:	4770      	bx	lr

08000ddc <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8000ddc:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8000dde:	4b03      	ldr	r3, [pc, #12]	; (8000dec <TIM_OC4FastConfig+0x10>)
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8000de0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8000de2:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8000de4:	4319      	orrs	r1, r3
 8000de6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8000de8:	8381      	strh	r1, [r0, #28]
}
 8000dea:	4770      	bx	lr
 8000dec:	fffffbff 	.word	0xfffffbff

08000df0 <TIM_ClearOC1Ref>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8000df0:	2280      	movs	r2, #128	; 0x80
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8000df2:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8000df4:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8000df6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000df8:	8301      	strh	r1, [r0, #24]
}
 8000dfa:	4770      	bx	lr

08000dfc <TIM_ClearOC2Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8000dfc:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8000dfe:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8000e00:	045b      	lsls	r3, r3, #17
 8000e02:	0c5b      	lsrs	r3, r3, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8000e04:	4319      	orrs	r1, r3
 8000e06:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000e08:	8301      	strh	r1, [r0, #24]
}
 8000e0a:	4770      	bx	lr

08000e0c <TIM_ClearOC3Ref>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8000e0c:	2280      	movs	r2, #128	; 0x80
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8000e0e:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8000e10:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8000e12:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000e14:	8381      	strh	r1, [r0, #28]
}
 8000e16:	4770      	bx	lr

08000e18 <TIM_ClearOC4Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8000e18:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8000e1a:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8000e1c:	045b      	lsls	r3, r3, #17
 8000e1e:	0c5b      	lsrs	r3, r3, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8000e20:	4319      	orrs	r1, r3
 8000e22:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000e24:	8381      	strh	r1, [r0, #28]
}
 8000e26:	4770      	bx	lr

08000e28 <TIM_OC1PolarityConfig>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8000e28:	2202      	movs	r2, #2
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e2a:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8000e2c:	4393      	bics	r3, r2
  tmpccer |= TIM_OCPolarity;
 8000e2e:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e30:	8401      	strh	r1, [r0, #32]
}
 8000e32:	4770      	bx	lr

08000e34 <TIM_OC1NPolarityConfig>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8000e34:	2208      	movs	r2, #8
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8000e36:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8000e38:	4393      	bics	r3, r2
  tmpccer |= TIM_OCNPolarity;
 8000e3a:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e3c:	8401      	strh	r1, [r0, #32]
}
 8000e3e:	4770      	bx	lr

08000e40 <TIM_OC2PolarityConfig>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8000e40:	2220      	movs	r2, #32
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e42:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8000e44:	0109      	lsls	r1, r1, #4
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8000e46:	4393      	bics	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e4c:	8401      	strh	r1, [r0, #32]
}
 8000e4e:	4770      	bx	lr

08000e50 <TIM_OC2NPolarityConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8000e50:	2280      	movs	r2, #128	; 0x80
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8000e52:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8000e54:	0109      	lsls	r1, r1, #4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8000e56:	4393      	bics	r3, r2
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8000e58:	4319      	orrs	r1, r3
 8000e5a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e5c:	8401      	strh	r1, [r0, #32]
}
 8000e5e:	4770      	bx	lr

08000e60 <TIM_OC3PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e60:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <TIM_OC3PolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8000e64:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8000e66:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e6c:	8401      	strh	r1, [r0, #32]
}
 8000e6e:	4770      	bx	lr
 8000e70:	fffffdff 	.word	0xfffffdff

08000e74 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8000e74:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <TIM_OC3NPolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8000e78:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8000e7a:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8000e7c:	4319      	orrs	r1, r3
 8000e7e:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e80:	8401      	strh	r1, [r0, #32]
}
 8000e82:	4770      	bx	lr
 8000e84:	fffff7ff 	.word	0xfffff7ff

08000e88 <TIM_OC4PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e88:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <TIM_OC4PolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8000e8c:	0309      	lsls	r1, r1, #12
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8000e8e:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8000e90:	4319      	orrs	r1, r3
 8000e92:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e94:	8401      	strh	r1, [r0, #32]
}
 8000e96:	4770      	bx	lr
 8000e98:	ffffdfff 	.word	0xffffdfff

08000e9c <TIM_SelectOCREFClear>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	8903      	ldrh	r3, [r0, #8]
 8000ea0:	4393      	bics	r3, r2
 8000ea2:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8000ea4:	8903      	ldrh	r3, [r0, #8]
 8000ea6:	4319      	orrs	r1, r3
 8000ea8:	8101      	strh	r1, [r0, #8]
}
 8000eaa:	4770      	bx	lr

08000eac <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8000eac:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8000eae:	2401      	movs	r4, #1
 8000eb0:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000eb2:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8000eb4:	8c03      	ldrh	r3, [r0, #32]
 8000eb6:	43a3      	bics	r3, r4
 8000eb8:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000eba:	8c03      	ldrh	r3, [r0, #32]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	8402      	strh	r2, [r0, #32]
}
 8000ec2:	bd10      	pop	{r4, pc}

08000ec4 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8000ec4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8000ec6:	2404      	movs	r4, #4
 8000ec8:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8000eca:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8000ecc:	8c03      	ldrh	r3, [r0, #32]
 8000ece:	43a3      	bics	r3, r4
 8000ed0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8000ed2:	8c03      	ldrh	r3, [r0, #32]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	8402      	strh	r2, [r0, #32]
}
 8000eda:	bd10      	pop	{r4, pc}

08000edc <TIM_SelectCOM>:
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000edc:	2900      	cmp	r1, #0
 8000ede:	d104      	bne.n	8000eea <TIM_SelectCOM+0xe>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	8883      	ldrh	r3, [r0, #4]
 8000ee4:	4393      	bics	r3, r2
 8000ee6:	8083      	strh	r3, [r0, #4]
  }
}
 8000ee8:	4770      	bx	lr
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8000eea:	2304      	movs	r3, #4
 8000eec:	8882      	ldrh	r2, [r0, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	8083      	strh	r3, [r0, #4]
 8000ef2:	e7f9      	b.n	8000ee8 <TIM_SelectCOM+0xc>

08000ef4 <TIM_ICInit>:
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000ef4:	880b      	ldrh	r3, [r1, #0]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d02a      	beq.n	8000f52 <TIM_ICInit+0x5e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d04a      	beq.n	8000f96 <TIM_ICInit+0xa2>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d100      	bne.n	8000f06 <TIM_ICInit+0x12>
 8000f04:	e06d      	b.n	8000fe2 <TIM_ICInit+0xee>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000f06:	8c04      	ldrh	r4, [r0, #32]
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <TIM_ICInit+0x134>)
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f0a:	890a      	ldrh	r2, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000f0c:	4023      	ands	r3, r4
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f0e:	884f      	ldrh	r7, [r1, #2]
 8000f10:	888e      	ldrh	r6, [r1, #4]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000f12:	8403      	strh	r3, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000f14:	8b85      	ldrh	r5, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000f16:	4c45      	ldr	r4, [pc, #276]	; (800102c <TIM_ICInit+0x138>)
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000f18:	0236      	lsls	r6, r6, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000f1a:	402c      	ands	r4, r5
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000f1c:	4334      	orrs	r4, r6
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8000f1e:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000f20:	b2a5      	uxth	r5, r4
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000f22:	0314      	lsls	r4, r2, #12
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000f24:	4a42      	ldr	r2, [pc, #264]	; (8001030 <TIM_ICInit+0x13c>)
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000f26:	432c      	orrs	r4, r5
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000f28:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000f2a:	2280      	movs	r2, #128	; 0x80

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000f2c:	033d      	lsls	r5, r7, #12
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000f2e:	432b      	orrs	r3, r5
 8000f30:	0152      	lsls	r2, r2, #5
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000f36:	b2a4      	uxth	r4, r4
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000f38:	8384      	strh	r4, [r0, #28]
  TIMx->CCER = tmpccer;
 8000f3a:	8403      	strh	r3, [r0, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f3c:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000f3e:	4a3d      	ldr	r2, [pc, #244]	; (8001034 <TIM_ICInit+0x140>)
 8000f40:	8b81      	ldrh	r1, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000f42:	021b      	lsls	r3, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000f44:	400a      	ands	r2, r1
 8000f46:	8382      	strh	r2, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000f48:	8b82      	ldrh	r2, [r0, #28]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f52:	2601      	movs	r6, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8000f54:	27f3      	movs	r7, #243	; 0xf3
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f56:	8c02      	ldrh	r2, [r0, #32]

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f58:	888d      	ldrh	r5, [r1, #4]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f5a:	43b2      	bics	r2, r6

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f5c:	884b      	ldrh	r3, [r1, #2]
 8000f5e:	890c      	ldrh	r4, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f60:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f62:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000f64:	0124      	lsls	r4, r4, #4
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8000f66:	43ba      	bics	r2, r7
 8000f68:	4314      	orrs	r4, r2
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8000f6a:	8c06      	ldrh	r6, [r0, #32]
 8000f6c:	b2a2      	uxth	r2, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000f6e:	432a      	orrs	r2, r5
 8000f70:	1c14      	adds	r4, r2, #0
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8000f72:	1c35      	adds	r5, r6, #0
 8000f74:	220a      	movs	r2, #10
 8000f76:	4395      	bics	r5, r2
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4313      	orrs	r3, r2
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000f7c:	432b      	orrs	r3, r5
 8000f7e:	b29b      	uxth	r3, r3
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f80:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f82:	8403      	strh	r3, [r0, #32]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f84:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8000f86:	210c      	movs	r1, #12
 8000f88:	8b02      	ldrh	r2, [r0, #24]
 8000f8a:	438a      	bics	r2, r1
 8000f8c:	8302      	strh	r2, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000f8e:	8b02      	ldrh	r2, [r0, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	8303      	strh	r3, [r0, #24]
 8000f94:	e7dc      	b.n	8000f50 <TIM_ICInit+0x5c>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000f96:	2410      	movs	r4, #16
 8000f98:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f9a:	888a      	ldrh	r2, [r1, #4]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000f9c:	43a3      	bics	r3, r4
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f9e:	884f      	ldrh	r7, [r1, #2]
 8000fa0:	890e      	ldrh	r6, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000fa2:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fa4:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <TIM_ICInit+0x138>)
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000fa8:	0336      	lsls	r6, r6, #12
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8000faa:	402b      	ands	r3, r5
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000fac:	4333      	orrs	r3, r6
 8000fae:	b29d      	uxth	r5, r3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8000fb0:	0213      	lsls	r3, r2, #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000fb2:	22a0      	movs	r2, #160	; 0xa0
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8000fb4:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8000fb6:	432b      	orrs	r3, r5
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000fb8:	4394      	bics	r4, r2
 8000fba:	1c22      	adds	r2, r4, #0
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8000fbc:	2410      	movs	r4, #16
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000fbe:	013d      	lsls	r5, r7, #4
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8000fc0:	432a      	orrs	r2, r5
 8000fc2:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8000fc4:	b29b      	uxth	r3, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8000fc6:	4322      	orrs	r2, r4
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000fc8:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000fca:	8402      	strh	r2, [r0, #32]
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000fcc:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000fce:	4a19      	ldr	r2, [pc, #100]	; (8001034 <TIM_ICInit+0x140>)
 8000fd0:	8b01      	ldrh	r1, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000fd2:	021b      	lsls	r3, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000fd8:	8b02      	ldrh	r2, [r0, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	8303      	strh	r3, [r0, #24]
 8000fe0:	e7b6      	b.n	8000f50 <TIM_ICInit+0x5c>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8000fe2:	27f3      	movs	r7, #243	; 0xf3
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8000fe4:	8c02      	ldrh	r2, [r0, #32]
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <TIM_ICInit+0x144>)
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000fe8:	888d      	ldrh	r5, [r1, #4]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8000fea:	4013      	ands	r3, r2
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000fec:	884e      	ldrh	r6, [r1, #2]
 8000fee:	890c      	ldrh	r4, [r1, #8]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8000ff0:	8403      	strh	r3, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000ff2:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000ff4:	0124      	lsls	r4, r4, #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8000ff6:	43ba      	bics	r2, r7
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	b2a2      	uxth	r2, r4
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000ffc:	432a      	orrs	r2, r5
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8000ffe:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001000:	1c14      	adds	r4, r2, #0
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <TIM_ICInit+0x148>)
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001004:	0235      	lsls	r5, r6, #8
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001006:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	432b      	orrs	r3, r5
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	4313      	orrs	r3, r2
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001012:	8384      	strh	r4, [r0, #28]
  TIMx->CCER = tmpccer;
 8001014:	8403      	strh	r3, [r0, #32]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001016:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001018:	210c      	movs	r1, #12
 800101a:	8b82      	ldrh	r2, [r0, #28]
 800101c:	438a      	bics	r2, r1
 800101e:	8382      	strh	r2, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001020:	8b82      	ldrh	r2, [r0, #28]
 8001022:	4313      	orrs	r3, r2
 8001024:	8383      	strh	r3, [r0, #28]
 8001026:	e793      	b.n	8000f50 <TIM_ICInit+0x5c>
 8001028:	ffffefff 	.word	0xffffefff
 800102c:	00000cff 	.word	0x00000cff
 8001030:	00005fff 	.word	0x00005fff
 8001034:	fffff3ff 	.word	0xfffff3ff
 8001038:	fffffeff 	.word	0xfffffeff
 800103c:	fffff5ff 	.word	0xfffff5ff

08001040 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001040:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001042:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001044:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001046:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001048:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800104a:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800104c:	8103      	strh	r3, [r0, #8]
}
 800104e:	4770      	bx	lr

08001050 <TIM_PWMIConfig>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	4657      	mov	r7, sl
 8001054:	464e      	mov	r6, r9
 8001056:	4645      	mov	r5, r8
 8001058:	b4e0      	push	{r5, r6, r7}
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800105a:	884d      	ldrh	r5, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800105c:	888a      	ldrh	r2, [r1, #4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800105e:	426e      	negs	r6, r5
 8001060:	416e      	adcs	r6, r5
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001062:	1e53      	subs	r3, r2, #1
 8001064:	425f      	negs	r7, r3
 8001066:	417b      	adcs	r3, r7
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001068:	880f      	ldrh	r7, [r1, #0]
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800106a:	3301      	adds	r3, #1
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800106c:	b082      	sub	sp, #8
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800106e:	0074      	lsls	r4, r6, #1
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001070:	4699      	mov	r9, r3
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001072:	2f00      	cmp	r7, #0
 8001074:	d050      	beq.n	8001118 <TIM_PWMIConfig+0xc8>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001076:	2310      	movs	r3, #16
 8001078:	8c07      	ldrh	r7, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800107a:	890e      	ldrh	r6, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800107c:	439f      	bics	r7, r3
 800107e:	8407      	strh	r7, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001080:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001082:	0212      	lsls	r2, r2, #8
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
 8001084:	4698      	mov	r8, r3
  tmpccer = TIMx->CCER;
 8001086:	8c03      	ldrh	r3, [r0, #32]
 8001088:	469a      	mov	sl, r3
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <TIM_PWMIConfig+0x150>)
 800108c:	469c      	mov	ip, r3
 800108e:	4643      	mov	r3, r8
 8001090:	4667      	mov	r7, ip
 8001092:	403b      	ands	r3, r7
 8001094:	469c      	mov	ip, r3
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001096:	0333      	lsls	r3, r6, #12
 8001098:	4698      	mov	r8, r3
 800109a:	4663      	mov	r3, ip
 800109c:	4647      	mov	r7, r8
 800109e:	433b      	orrs	r3, r7
 80010a0:	466f      	mov	r7, sp
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	88fb      	ldrh	r3, [r7, #6]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80010a6:	4657      	mov	r7, sl
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 80010a8:	431a      	orrs	r2, r3
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80010aa:	012b      	lsls	r3, r5, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80010ac:	25a0      	movs	r5, #160	; 0xa0
 80010ae:	43af      	bics	r7, r5
 80010b0:	1c3d      	adds	r5, r7, #0
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 80010b2:	2710      	movs	r7, #16
 80010b4:	431d      	orrs	r5, r3
 80010b6:	b2ad      	uxth	r5, r5
 80010b8:	433d      	orrs	r5, r7
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 80010ba:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80010bc:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80010be:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80010c0:	8b05      	ldrh	r5, [r0, #24]
 80010c2:	4a38      	ldr	r2, [pc, #224]	; (80011a4 <TIM_PWMIConfig+0x154>)
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80010c4:	88c9      	ldrh	r1, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80010c6:	402a      	ands	r2, r5
 80010c8:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80010ca:	8b05      	ldrh	r5, [r0, #24]
 80010cc:	020a      	lsls	r2, r1, #8
 80010ce:	432a      	orrs	r2, r5
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80010d0:	2501      	movs	r5, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010d2:	464b      	mov	r3, r9
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80010d4:	b292      	uxth	r2, r2
 80010d6:	8302      	strh	r2, [r0, #24]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80010d8:	8c02      	ldrh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80010da:	37e3      	adds	r7, #227	; 0xe3
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80010dc:	43aa      	bics	r2, r5
 80010de:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010e0:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010e2:	0136      	lsls	r6, r6, #4
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80010e4:	43ba      	bics	r2, r7
 80010e6:	4332      	orrs	r2, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010e8:	4313      	orrs	r3, r2
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80010ea:	220a      	movs	r2, #10
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80010ec:	8c05      	ldrh	r5, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010ee:	b29b      	uxth	r3, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80010f0:	4395      	bics	r5, r2
 80010f2:	1c2a      	adds	r2, r5, #0
 80010f4:	2501      	movs	r5, #1
 80010f6:	432a      	orrs	r2, r5
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80010f8:	4314      	orrs	r4, r2
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80010fa:	220c      	movs	r2, #12
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80010fc:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010fe:	8404      	strh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001100:	8b03      	ldrh	r3, [r0, #24]
 8001102:	4393      	bics	r3, r2
 8001104:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001106:	8b03      	ldrh	r3, [r0, #24]
 8001108:	4319      	orrs	r1, r3
 800110a:	8301      	strh	r1, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800110c:	b002      	add	sp, #8
 800110e:	bc1c      	pop	{r2, r3, r4}
 8001110:	4690      	mov	r8, r2
 8001112:	4699      	mov	r9, r3
 8001114:	46a2      	mov	sl, r4
 8001116:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001118:	2301      	movs	r3, #1
 800111a:	8c07      	ldrh	r7, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800111c:	890c      	ldrh	r4, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800111e:	439f      	bics	r7, r3
 8001120:	8407      	strh	r7, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001122:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 8001124:	8c03      	ldrh	r3, [r0, #32]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001126:	0176      	lsls	r6, r6, #5
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001128:	469c      	mov	ip, r3
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800112a:	23f3      	movs	r3, #243	; 0xf3
 800112c:	439f      	bics	r7, r3
 800112e:	46b8      	mov	r8, r7
 8001130:	4643      	mov	r3, r8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001132:	0127      	lsls	r7, r4, #4
 8001134:	431f      	orrs	r7, r3
 8001136:	b2bf      	uxth	r7, r7
 8001138:	433a      	orrs	r2, r7
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800113a:	4663      	mov	r3, ip
 800113c:	270a      	movs	r7, #10
 800113e:	43bb      	bics	r3, r7
 8001140:	2701      	movs	r7, #1
 8001142:	433d      	orrs	r5, r7
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001144:	431d      	orrs	r5, r3
 8001146:	b2ad      	uxth	r5, r5
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001148:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800114a:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800114c:	250c      	movs	r5, #12
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 800114e:	464b      	mov	r3, r9
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001150:	88ca      	ldrh	r2, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001152:	8b01      	ldrh	r1, [r0, #24]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001154:	0324      	lsls	r4, r4, #12
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001156:	43a9      	bics	r1, r5
 8001158:	8301      	strh	r1, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800115a:	8b01      	ldrh	r1, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800115c:	3504      	adds	r5, #4
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800115e:	4311      	orrs	r1, r2
 8001160:	8301      	strh	r1, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001162:	8c01      	ldrh	r1, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001164:	021b      	lsls	r3, r3, #8
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001166:	43a9      	bics	r1, r5
 8001168:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800116a:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800116c:	4d0c      	ldr	r5, [pc, #48]	; (80011a0 <TIM_PWMIConfig+0x150>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800116e:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001170:	403d      	ands	r5, r7
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001172:	432c      	orrs	r4, r5
 8001174:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001176:	431c      	orrs	r4, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	4399      	bics	r1, r3
 800117c:	1c0b      	adds	r3, r1, #0
 800117e:	2110      	movs	r1, #16
 8001180:	430b      	orrs	r3, r1
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001182:	431e      	orrs	r6, r3
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001184:	b2a4      	uxth	r4, r4
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001186:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001188:	8406      	strh	r6, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800118a:	8b01      	ldrh	r1, [r0, #24]
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <TIM_PWMIConfig+0x154>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800118e:	0212      	lsls	r2, r2, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001190:	400b      	ands	r3, r1
 8001192:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001194:	8b03      	ldrh	r3, [r0, #24]
 8001196:	431a      	orrs	r2, r3
 8001198:	b292      	uxth	r2, r2
 800119a:	8302      	strh	r2, [r0, #24]
 800119c:	e7b6      	b.n	800110c <TIM_PWMIConfig+0xbc>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	00000cff 	.word	0x00000cff
 80011a4:	fffff3ff 	.word	0xfffff3ff

080011a8 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80011a8:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 80011aa:	4770      	bx	lr

080011ac <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80011ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80011ae:	4770      	bx	lr

080011b0 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80011b0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80011b2:	4770      	bx	lr

080011b4 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80011b4:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80011b6:	4770      	bx	lr

080011b8 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80011b8:	220c      	movs	r2, #12
 80011ba:	8b03      	ldrh	r3, [r0, #24]
 80011bc:	4393      	bics	r3, r2
 80011be:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80011c0:	8b03      	ldrh	r3, [r0, #24]
 80011c2:	4319      	orrs	r1, r3
 80011c4:	8301      	strh	r1, [r0, #24]
}
 80011c6:	4770      	bx	lr

080011c8 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80011c8:	8b02      	ldrh	r2, [r0, #24]
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <TIM_SetIC2Prescaler+0x14>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80011cc:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80011ce:	4013      	ands	r3, r2
 80011d0:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80011d2:	8b03      	ldrh	r3, [r0, #24]
 80011d4:	4319      	orrs	r1, r3
 80011d6:	b289      	uxth	r1, r1
 80011d8:	8301      	strh	r1, [r0, #24]
}
 80011da:	4770      	bx	lr
 80011dc:	fffff3ff 	.word	0xfffff3ff

080011e0 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80011e0:	220c      	movs	r2, #12
 80011e2:	8b83      	ldrh	r3, [r0, #28]
 80011e4:	4393      	bics	r3, r2
 80011e6:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80011e8:	8b83      	ldrh	r3, [r0, #28]
 80011ea:	4319      	orrs	r1, r3
 80011ec:	8381      	strh	r1, [r0, #28]
}
 80011ee:	4770      	bx	lr

080011f0 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80011f0:	8b82      	ldrh	r2, [r0, #28]
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <TIM_SetIC4Prescaler+0x14>)
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80011f4:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80011f6:	4013      	ands	r3, r2
 80011f8:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80011fa:	8b83      	ldrh	r3, [r0, #28]
 80011fc:	4319      	orrs	r1, r3
 80011fe:	b289      	uxth	r1, r1
 8001200:	8381      	strh	r1, [r0, #28]
}
 8001202:	4770      	bx	lr
 8001204:	fffff3ff 	.word	0xfffff3ff

08001208 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001208:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800120a:	2a00      	cmp	r2, #0
 800120c:	d102      	bne.n	8001214 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800120e:	438b      	bics	r3, r1
 8001210:	8183      	strh	r3, [r0, #12]
  }
}
 8001212:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001214:	4319      	orrs	r1, r3
 8001216:	8181      	strh	r1, [r0, #12]
 8001218:	e7fb      	b.n	8001212 <TIM_ITConfig+0xa>
 800121a:	46c0      	nop			; (mov r8, r8)

0800121c <TIM_GenerateEvent>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800121c:	8281      	strh	r1, [r0, #20]
}
 800121e:	4770      	bx	lr

08001220 <TIM_GetFlagStatus>:
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001220:	8a00      	ldrh	r0, [r0, #16]
 8001222:	4008      	ands	r0, r1
 8001224:	1e41      	subs	r1, r0, #1
 8001226:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001228:	b2c0      	uxtb	r0, r0
}
 800122a:	4770      	bx	lr

0800122c <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800122c:	43c9      	mvns	r1, r1
 800122e:	b289      	uxth	r1, r1
 8001230:	8201      	strh	r1, [r0, #16]
}
 8001232:	4770      	bx	lr

08001234 <TIM_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001234:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8001236:	8980      	ldrh	r0, [r0, #12]
 8001238:	b283      	uxth	r3, r0
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800123a:	2000      	movs	r0, #0
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800123c:	420a      	tst	r2, r1
 800123e:	d003      	beq.n	8001248 <TIM_GetITStatus+0x14>
 8001240:	4019      	ands	r1, r3
 8001242:	1e48      	subs	r0, r1, #1
 8001244:	4181      	sbcs	r1, r0
  {
    bitstatus = SET;
 8001246:	b2c8      	uxtb	r0, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001248:	4770      	bx	lr
 800124a:	46c0      	nop			; (mov r8, r8)

0800124c <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800124c:	43c9      	mvns	r1, r1
 800124e:	b289      	uxth	r1, r1
 8001250:	8201      	strh	r1, [r0, #16]
}
 8001252:	4770      	bx	lr

08001254 <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001254:	2348      	movs	r3, #72	; 0x48
 8001256:	430a      	orrs	r2, r1
 8001258:	52c2      	strh	r2, [r0, r3]
}
 800125a:	4770      	bx	lr

0800125c <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800125c:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST10_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800125e:	2a00      	cmp	r2, #0
 8001260:	d102      	bne.n	8001268 <TIM_DMACmd+0xc>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001262:	438b      	bics	r3, r1
 8001264:	8183      	strh	r3, [r0, #12]
  }
}
 8001266:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001268:	4319      	orrs	r1, r3
 800126a:	8181      	strh	r1, [r0, #12]
 800126c:	e7fb      	b.n	8001266 <TIM_DMACmd+0xa>
 800126e:	46c0      	nop			; (mov r8, r8)

08001270 <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001270:	2900      	cmp	r1, #0
 8001272:	d104      	bne.n	800127e <TIM_SelectCCDMA+0xe>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8001274:	2208      	movs	r2, #8
 8001276:	8883      	ldrh	r3, [r0, #4]
 8001278:	4393      	bics	r3, r2
 800127a:	8083      	strh	r3, [r0, #4]
  }
}
 800127c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800127e:	2308      	movs	r3, #8
 8001280:	8882      	ldrh	r2, [r0, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	8083      	strh	r3, [r0, #4]
 8001286:	e7f9      	b.n	800127c <TIM_SelectCCDMA+0xc>

08001288 <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001288:	2207      	movs	r2, #7
 800128a:	8903      	ldrh	r3, [r0, #8]
 800128c:	4393      	bics	r3, r2
 800128e:	8103      	strh	r3, [r0, #8]
}
 8001290:	4770      	bx	lr
 8001292:	46c0      	nop			; (mov r8, r8)

08001294 <TIM_ITRxExternalClockConfig>:
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001294:	2270      	movs	r2, #112	; 0x70
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001296:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001298:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800129a:	4319      	orrs	r1, r3
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800129c:	2307      	movs	r3, #7
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800129e:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80012a0:	8902      	ldrh	r2, [r0, #8]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	8103      	strh	r3, [r0, #8]
}
 80012a6:	4770      	bx	lr

080012a8 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80012aa:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80012ac:	2960      	cmp	r1, #96	; 0x60
 80012ae:	d01d      	beq.n	80012ec <TIM_TIxExternalClockConfig+0x44>
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80012b0:	2501      	movs	r5, #1
 80012b2:	43ac      	bics	r4, r5
 80012b4:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012b6:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80012b8:	35f2      	adds	r5, #242	; 0xf2
 80012ba:	43ac      	bics	r4, r5
 80012bc:	2501      	movs	r5, #1
 80012be:	432c      	orrs	r4, r5
 80012c0:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4323      	orrs	r3, r4
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80012c6:	240a      	movs	r4, #10
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80012c8:	8c06      	ldrh	r6, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80012ca:	b29b      	uxth	r3, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80012cc:	43a6      	bics	r6, r4
 80012ce:	4335      	orrs	r5, r6
 80012d0:	b2ad      	uxth	r5, r5
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80012d2:	432a      	orrs	r2, r5
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80012d4:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012d6:	8402      	strh	r2, [r0, #32]
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80012d8:	2270      	movs	r2, #112	; 0x70
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80012da:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80012dc:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80012de:	4319      	orrs	r1, r3
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80012e0:	2307      	movs	r3, #7
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012e2:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80012e4:	8902      	ldrh	r2, [r0, #8]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	8103      	strh	r3, [r0, #8]
}
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80012ec:	2510      	movs	r5, #16
 80012ee:	43ac      	bics	r4, r5
 80012f0:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012f2:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80012f4:	4c09      	ldr	r4, [pc, #36]	; (800131c <TIM_TIxExternalClockConfig+0x74>)
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80012f6:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80012f8:	4034      	ands	r4, r6
 80012fa:	2680      	movs	r6, #128	; 0x80
 80012fc:	0076      	lsls	r6, r6, #1
 80012fe:	4334      	orrs	r4, r6
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001300:	4323      	orrs	r3, r4
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001302:	24a0      	movs	r4, #160	; 0xa0
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001304:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001306:	0112      	lsls	r2, r2, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001308:	43a5      	bics	r5, r4
 800130a:	1c2c      	adds	r4, r5, #0
 800130c:	2510      	movs	r5, #16
 800130e:	432c      	orrs	r4, r5
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001310:	4322      	orrs	r2, r4
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001312:	b29b      	uxth	r3, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001314:	b292      	uxth	r2, r2
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001316:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001318:	8402      	strh	r2, [r0, #32]
 800131a:	e7dd      	b.n	80012d8 <TIM_TIxExternalClockConfig+0x30>
 800131c:	00000cff 	.word	0x00000cff

08001320 <TIM_ETRClockMode1Config>:
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	431a      	orrs	r2, r3
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001324:	23ff      	movs	r3, #255	; 0xff
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8001326:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 8001328:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800132a:	401c      	ands	r4, r3
 800132c:	4322      	orrs	r2, r4
 800132e:	b292      	uxth	r2, r2
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001330:	4311      	orrs	r1, r2
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001332:	2277      	movs	r2, #119	; 0x77
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001334:	8101      	strh	r1, [r0, #8]
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001336:	8903      	ldrh	r3, [r0, #8]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001338:	4393      	bics	r3, r2
  tmpsmcr |= TIM_TS_ETRF;
 800133a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800133c:	8103      	strh	r3, [r0, #8]
}
 800133e:	bd10      	pop	{r4, pc}

08001340 <TIM_ETRClockMode2Config>:
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	431a      	orrs	r2, r3
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001344:	23ff      	movs	r3, #255	; 0xff
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001346:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 8001348:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800134a:	401c      	ands	r4, r3
 800134c:	4322      	orrs	r2, r4
 800134e:	b292      	uxth	r2, r2
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001350:	4311      	orrs	r1, r2
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001352:	2280      	movs	r2, #128	; 0x80
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001354:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001356:	8903      	ldrh	r3, [r0, #8]
 8001358:	01d2      	lsls	r2, r2, #7
 800135a:	4313      	orrs	r3, r2
 800135c:	8103      	strh	r3, [r0, #8]
}
 800135e:	bd10      	pop	{r4, pc}

08001360 <TIM_SelectInputTrigger>:
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001360:	2270      	movs	r2, #112	; 0x70
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001362:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001364:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8001366:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001368:	8101      	strh	r1, [r0, #8]
}
 800136a:	4770      	bx	lr

0800136c <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 800136c:	2270      	movs	r2, #112	; 0x70
 800136e:	8883      	ldrh	r3, [r0, #4]
 8001370:	4393      	bics	r3, r2
 8001372:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001374:	8883      	ldrh	r3, [r0, #4]
 8001376:	4319      	orrs	r1, r3
 8001378:	8081      	strh	r1, [r0, #4]
}
 800137a:	4770      	bx	lr

0800137c <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  
  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 800137c:	2207      	movs	r2, #7
 800137e:	8903      	ldrh	r3, [r0, #8]
 8001380:	4393      	bics	r3, r2
 8001382:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8001384:	8903      	ldrh	r3, [r0, #8]
 8001386:	4319      	orrs	r1, r3
 8001388:	8101      	strh	r1, [r0, #8]
}
 800138a:	4770      	bx	lr

0800138c <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	8903      	ldrh	r3, [r0, #8]
 8001390:	4393      	bics	r3, r2
 8001392:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8001394:	8903      	ldrh	r3, [r0, #8]
 8001396:	4319      	orrs	r1, r3
 8001398:	8101      	strh	r1, [r0, #8]
}
 800139a:	4770      	bx	lr

0800139c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 800139c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800139e:	25ff      	movs	r5, #255	; 0xff
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 80013a0:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80013a2:	021b      	lsls	r3, r3, #8
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80013a4:	402c      	ands	r4, r5
 80013a6:	4321      	orrs	r1, r4
 80013a8:	430a      	orrs	r2, r1
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80013aa:	431a      	orrs	r2, r3
 80013ac:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013ae:	8102      	strh	r2, [r0, #8]
}
 80013b0:	bd30      	pop	{r4, r5, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)

080013b4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80013b6:	2407      	movs	r4, #7
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80013b8:	8906      	ldrh	r6, [r0, #8]
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80013ba:	8b07      	ldrh	r7, [r0, #24]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80013bc:	43a6      	bics	r6, r4
  tmpsmcr |= TIM_EncoderMode;
 80013be:	4331      	orrs	r1, r6
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80013c0:	2602      	movs	r6, #2
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 80013c2:	4c07      	ldr	r4, [pc, #28]	; (80013e0 <TIM_EncoderInterfaceConfig+0x2c>)
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013c4:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 80013c6:	403c      	ands	r4, r7
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80013c8:	36ff      	adds	r6, #255	; 0xff
 80013ca:	4334      	orrs	r4, r6
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80013cc:	3e57      	subs	r6, #87	; 0x57
 80013ce:	43b5      	bics	r5, r6
 80013d0:	432a      	orrs	r2, r5
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	431a      	orrs	r2, r3
 80013d6:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013d8:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80013da:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013dc:	8402      	strh	r2, [r0, #32]
}
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e0:	fffffcfc 	.word	0xfffffcfc

080013e4 <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d104      	bne.n	80013f2 <TIM_SelectHallSensor+0xe>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	8883      	ldrh	r3, [r0, #4]
 80013ec:	4393      	bics	r3, r2
 80013ee:	8083      	strh	r3, [r0, #4]
  }
}
 80013f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	8882      	ldrh	r2, [r0, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	8083      	strh	r3, [r0, #4]
 80013fa:	e7f9      	b.n	80013f0 <TIM_SelectHallSensor+0xc>

080013fc <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST11_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80013fc:	2350      	movs	r3, #80	; 0x50
 80013fe:	52c1      	strh	r1, [r0, r3]
}
 8001400:	4770      	bx	lr
 8001402:	46c0      	nop			; (mov r8, r8)

08001404 <M24SR_PollI2C>:
	* @retval M24SR_ERROR_NACK : the M24SR doesn't acknowledge
	* @retval M24SR_ERROR_NBATEMPT  
  */
//static int8_t M24SR_PollI2C ( void )
int8_t M24SR_PollI2C ( void )
{
 8001404:	b510      	push	{r4, lr}
  /*---------------------------- Transmission Phase ---------------------------*/
	 do{	  
		 
		/* In the loop avoid to send START just after STOP */
		/* At 400kHz see issue where start condition was sent but not the 7bits addr... */ 
		delay_us (1); 
 8001406:	2001      	movs	r0, #1
 8001408:	f004 f99e 	bl	8005748 <delay_us>
		
        //Wait until I2C isn't busy
        while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_BUSY) == SET);
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	4821      	ldr	r0, [pc, #132]	; (8001494 <M24SR_PollI2C+0x90>)
 8001410:	0209      	lsls	r1, r1, #8
 8001412:	f003 fbd9 	bl	8004bc8 <I2C_GetFlagStatus>
 8001416:	2801      	cmp	r0, #1
 8001418:	d0f8      	beq.n	800140c <M24SR_PollI2C+0x8>
 
		M24SR_Timeout = 0x40;  
		 /*!< Clear the M24SR_I2C NACK flag */
		I2C_ClearFlag(M24SR_I2C, I2C_FLAG_NACKF);
 800141a:	481e      	ldr	r0, [pc, #120]	; (8001494 <M24SR_PollI2C+0x90>)
 800141c:	2110      	movs	r1, #16
 800141e:	f003 fbd9 	bl	8004bd4 <I2C_ClearFlag>

		/*!< Enable M24SR_I2C acknowledgement if it is already disabled by other function */
		I2C_AcknowledgeConfig(M24SR_I2C, DISABLE);
 8001422:	481c      	ldr	r0, [pc, #112]	; (8001494 <M24SR_PollI2C+0x90>)
 8001424:	2100      	movs	r1, #0
 8001426:	f003 fb11 	bl	8004a4c <I2C_AcknowledgeConfig>
		
		/*!< Send M24SR_I2C START condition */
		I2C_GenerateSTART(M24SR_I2C, ENABLE);
 800142a:	481a      	ldr	r0, [pc, #104]	; (8001494 <M24SR_PollI2C+0x90>)
 800142c:	2101      	movs	r1, #1
 800142e:	f003 fadd 	bl	80049ec <I2C_GenerateSTART>
		//while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_SB)) && --M24SR_Timeout)  /*!< EV5 */
		//{
		//}
				
	    /*!< Send M24SR64-Y slave address for write */
        I2C_SendData(M24SR_I2C, (M24SR_ADDR << 1) | 0);
 8001432:	4818      	ldr	r0, [pc, #96]	; (8001494 <M24SR_PollI2C+0x90>)
 8001434:	2158      	movs	r1, #88	; 0x58
 8001436:	f003 fbb7 	bl	8004ba8 <I2C_SendData>
		//I2C_Send7bitAddress(M24SR_I2C, M24SR_ADDR, I2C_Direction_Transmitter);
		M24SR_Timeout = 0x40; 
		
		uISRregister = I2C_ReadRegister(M24SR_I2C, I2C_Register_ISR);
 800143a:	4816      	ldr	r0, [pc, #88]	; (8001494 <M24SR_PollI2C+0x90>)
 800143c:	2118      	movs	r1, #24
 800143e:	f003 fba7 	bl	8004b90 <I2C_ReadRegister>
	
        	
        /* Note: ADDR is not set after a NACK reception */
		while ( ((uISRregister != I2C_FLAG_NACKF) && ((uISRregister & I2C_FLAG_BUSY) != I2C_FLAG_BUSY))&& --M24SR_Timeout)/*BUSY & MSL & ADDR */
 8001442:	b283      	uxth	r3, r0
 8001444:	2b10      	cmp	r3, #16
 8001446:	d010      	beq.n	800146a <M24SR_PollI2C+0x66>
 8001448:	0403      	lsls	r3, r0, #16
 800144a:	d40e      	bmi.n	800146a <M24SR_PollI2C+0x66>
 800144c:	243f      	movs	r4, #63	; 0x3f
		{
			/*reads the I2C ISR register */ 
			uISRregister = I2C_ReadRegister(M24SR_I2C, I2C_Register_ISR);
 800144e:	4811      	ldr	r0, [pc, #68]	; (8001494 <M24SR_PollI2C+0x90>)
 8001450:	2118      	movs	r1, #24
		
		uISRregister = I2C_ReadRegister(M24SR_I2C, I2C_Register_ISR);
	
        	
        /* Note: ADDR is not set after a NACK reception */
		while ( ((uISRregister != I2C_FLAG_NACKF) && ((uISRregister & I2C_FLAG_BUSY) != I2C_FLAG_BUSY))&& --M24SR_Timeout)/*BUSY & MSL & ADDR */
 8001452:	3c01      	subs	r4, #1
		{
			/*reads the I2C ISR register */ 
			uISRregister = I2C_ReadRegister(M24SR_I2C, I2C_Register_ISR);
 8001454:	f003 fb9c 	bl	8004b90 <I2C_ReadRegister>
		
		uISRregister = I2C_ReadRegister(M24SR_I2C, I2C_Register_ISR);
	
        	
        /* Note: ADDR is not set after a NACK reception */
		while ( ((uISRregister != I2C_FLAG_NACKF) && ((uISRregister & I2C_FLAG_BUSY) != I2C_FLAG_BUSY))&& --M24SR_Timeout)/*BUSY & MSL & ADDR */
 8001458:	2c00      	cmp	r4, #0
 800145a:	d1f8      	bne.n	800144e <M24SR_PollI2C+0x4a>
			//uISRregister &= 0x0482;
			uISRregister &= I2C_FLAG_TXE | I2C_FLAG_ADDR;
		}	
		
		/* Send STOP Condition */
		I2C_GenerateSTOP(M24SR_I2C, ENABLE);
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <M24SR_PollI2C+0x90>)
 800145e:	2101      	movs	r1, #1
 8001460:	f003 fad4 	bl	8004a0c <I2C_GenerateSTOP>
				
		if (M24SR_Timeout == 0)
		{
			return M24SR_ERROR_NBATEMPT;
 8001464:	2015      	movs	r0, #21
 8001466:	b240      	sxtb	r0, r0
	if (NbAtempt == 0)
	{
			return M24SR_ERROR_NBATEMPT;
	}
	return M24SR_ERROR_NACK;
}
 8001468:	bd10      	pop	{r4, pc}
			//uISRregister &= 0x0482;
			uISRregister &= I2C_FLAG_TXE | I2C_FLAG_ADDR;
		}	
		
		/* Send STOP Condition */
		I2C_GenerateSTOP(M24SR_I2C, ENABLE);
 800146a:	480a      	ldr	r0, [pc, #40]	; (8001494 <M24SR_PollI2C+0x90>)
 800146c:	2101      	movs	r1, #1
 800146e:	f003 facd 	bl	8004a0c <I2C_GenerateSTOP>
		if (M24SR_Timeout == 0)
		{
			return M24SR_ERROR_NBATEMPT;
		}
	    else {
            I2C_Cmd(M24SR_I2C, DISABLE); //wait till we receive a successful address?
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <M24SR_PollI2C+0x90>)
 8001474:	2100      	movs	r1, #0
 8001476:	f003 f9df 	bl	8004838 <I2C_Cmd>
			do
			{
				uISRregister = I2C_ReadRegister(M24SR_I2C, I2C_Register_ISR);
			}
			while( (uISRregister & I2C_FLAG_ADDR) == I2C_FLAG_ADDR);
 800147a:	2408      	movs	r4, #8
		}
	    else {
            I2C_Cmd(M24SR_I2C, DISABLE); //wait till we receive a successful address?
			do
			{
				uISRregister = I2C_ReadRegister(M24SR_I2C, I2C_Register_ISR);
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <M24SR_PollI2C+0x90>)
 800147e:	2118      	movs	r1, #24
 8001480:	f003 fb86 	bl	8004b90 <I2C_ReadRegister>
			}
			while( (uISRregister & I2C_FLAG_ADDR) == I2C_FLAG_ADDR);
 8001484:	4204      	tst	r4, r0
 8001486:	d1f9      	bne.n	800147c <M24SR_PollI2C+0x78>
			I2C_Cmd(M24SR_I2C, ENABLE);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <M24SR_PollI2C+0x90>)
 800148a:	2101      	movs	r1, #1
 800148c:	f003 f9d4 	bl	8004838 <I2C_Cmd>
			return M24SR_STATUS_SUCCESS;		
 8001490:	2000      	movs	r0, #0
 8001492:	e7e8      	b.n	8001466 <M24SR_PollI2C+0x62>
 8001494:	40005400 	.word	0x40005400

08001498 <M24SR_I2CInit>:
/**
  * @brief  This function initializes the M24SR_I2C interface
	* @retval None  
  */
void M24SR_I2CInit ( void )
{
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	4647      	mov	r7, r8
	GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef   I2C_InitStructure;

  /* GPIO Periph clock enable */
    RCC_AHBPeriphClockCmd(M24SR_GPIO_BLOCK_CLK, ENABLE);
 800149c:	2088      	movs	r0, #136	; 0x88
/**
  * @brief  This function initializes the M24SR_I2C interface
	* @retval None  
  */
void M24SR_I2CInit ( void )
{
 800149e:	b480      	push	{r7}
	GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef   I2C_InitStructure;

  /* GPIO Periph clock enable */
    RCC_AHBPeriphClockCmd(M24SR_GPIO_BLOCK_CLK, ENABLE);
 80014a0:	03c0      	lsls	r0, r0, #15
/**
  * @brief  This function initializes the M24SR_I2C interface
	* @retval None  
  */
void M24SR_I2CInit ( void )
{
 80014a2:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef   I2C_InitStructure;

  /* GPIO Periph clock enable */
    RCC_AHBPeriphClockCmd(M24SR_GPIO_BLOCK_CLK, ENABLE);
 80014a4:	2101      	movs	r1, #1
 80014a6:	f7ff f915 	bl	80006d4 <RCC_AHBPeriphClockCmd>
	
  /* I2C Periph clock enable */
    RCC_APB1PeriphClockCmd(M24SR_I2C_BLOCK_CLK, ENABLE);
 80014aa:	2080      	movs	r0, #128	; 0x80
 80014ac:	2101      	movs	r1, #1
 80014ae:	0380      	lsls	r0, r0, #14
 80014b0:	f7ff f928 	bl	8000704 <RCC_APB1PeriphClockCmd>
	
  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  M24SR_SCL_PIN | M24SR_SDA_PIN;
 80014b4:	2303      	movs	r3, #3
 80014b6:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(M24SR_SDA_PIN_PORT, &GPIO_InitStructure);
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <M24SR_I2CInit+0x98>)
  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  M24SR_SCL_PIN | M24SR_SDA_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80014ba:	2500      	movs	r5, #0
  GPIO_Init(M24SR_SDA_PIN_PORT, &GPIO_InitStructure);
 80014bc:	4698      	mov	r8, r3
  /* I2C Periph clock enable */
    RCC_APB1PeriphClockCmd(M24SR_I2C_BLOCK_CLK, ENABLE);
	
  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  M24SR_SCL_PIN | M24SR_SDA_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80014be:	2702      	movs	r7, #2
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80014c0:	2601      	movs	r6, #1
	
  /* I2C Periph clock enable */
    RCC_APB1PeriphClockCmd(M24SR_I2C_BLOCK_CLK, ENABLE);
	
  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  M24SR_SCL_PIN | M24SR_SDA_PIN;
 80014c2:	ac01      	add	r4, sp, #4
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(M24SR_SDA_PIN_PORT, &GPIO_InitStructure);
 80014c4:	1c18      	adds	r0, r3, #0
 80014c6:	1c21      	adds	r1, r4, #0
  /* I2C Periph clock enable */
    RCC_APB1PeriphClockCmd(M24SR_I2C_BLOCK_CLK, ENABLE);
	
  /* Configure I2C pins: SCL and SDA */
  GPIO_InitStructure.GPIO_Pin =  M24SR_SCL_PIN | M24SR_SDA_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80014c8:	7167      	strb	r7, [r4, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80014ca:	7127      	strb	r7, [r4, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80014cc:	71a6      	strb	r6, [r4, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80014ce:	71e5      	strb	r5, [r4, #7]
  GPIO_Init(M24SR_SDA_PIN_PORT, &GPIO_InitStructure);
 80014d0:	f7fe fe4a 	bl	8000168 <GPIO_Init>

	/* Connect I2C pins to AF */
  GPIO_PinAFConfig(M24SR_SCL_PIN_PORT, M24SR_SCL_PIN_SOURCE, GPIO_AF_1);
 80014d4:	4640      	mov	r0, r8
 80014d6:	2101      	movs	r1, #1
 80014d8:	2201      	movs	r2, #1
 80014da:	f7fe fee7 	bl	80002ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(M24SR_SDA_PIN_PORT, M24SR_SDA_PIN_SOURCE, GPIO_AF_1);
 80014de:	2201      	movs	r2, #1
 80014e0:	4640      	mov	r0, r8
 80014e2:	2100      	movs	r1, #0
 80014e4:	f7fe fee2 	bl	80002ac <GPIO_PinAFConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	
	/* Configure GPIO for M24SR RF Disable signal */
  GPIO_InitStructure.GPIO_Pin = M24SR_RFDIS_PIN;
 80014e8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_Init(M24SR_RFDIS_PIN_PORT, &GPIO_InitStructure);
 80014ea:	1c21      	adds	r1, r4, #0
  GPIO_PinAFConfig(M24SR_SCL_PIN_PORT, M24SR_SCL_PIN_SOURCE, GPIO_AF_1);
  GPIO_PinAFConfig(M24SR_SDA_PIN_PORT, M24SR_SDA_PIN_SOURCE, GPIO_AF_1);

  /* Configure GPIO for M24SR GPO as Input pull-up, used as Interuption comming from the M24SR  */
  GPIO_InitStructure.GPIO_Pin = M24SR_GPO_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80014ec:	7167      	strb	r7, [r4, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80014ee:	71e6      	strb	r6, [r4, #7]
	
	/* Configure GPIO for M24SR RF Disable signal */
  GPIO_InitStructure.GPIO_Pin = M24SR_RFDIS_PIN;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80014f0:	7126      	strb	r6, [r4, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80014f2:	71a5      	strb	r5, [r4, #6]
  GPIO_Init(M24SR_RFDIS_PIN_PORT, &GPIO_InitStructure);

  I2C_DeInit(M24SR_I2C);
 80014f4:	4c0f      	ldr	r4, [pc, #60]	; (8001534 <M24SR_I2CInit+0x9c>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	
	/* Configure GPIO for M24SR RF Disable signal */
  GPIO_InitStructure.GPIO_Pin = M24SR_RFDIS_PIN;
 80014f6:	009b      	lsls	r3, r3, #2
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_Init(M24SR_RFDIS_PIN_PORT, &GPIO_InitStructure);
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <M24SR_I2CInit+0xa0>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	
	/* Configure GPIO for M24SR RF Disable signal */
  GPIO_InitStructure.GPIO_Pin = M24SR_RFDIS_PIN;
 80014fa:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_Init(M24SR_RFDIS_PIN_PORT, &GPIO_InitStructure);
 80014fc:	f7fe fe34 	bl	8000168 <GPIO_Init>

  I2C_DeInit(M24SR_I2C);
 8001500:	1c20      	adds	r0, r4, #0
 8001502:	f003 f93f 	bl	8004784 <I2C_DeInit>
  I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
  I2C_InitStructure.I2C_DigitalFilter = 0x00;
  //i2c 400kHz, 8MHz
  //I2C_InitStructure.I2C_Timing = 0x0010020A;
  //i2c 400kHz, 48MHz
  I2C_InitStructure.I2C_Timing = 0x00901850;
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <M24SR_I2CInit+0xa4>)
  //i2c 100kHz 8MHz 
  //I2C_InitStructure.I2C_Timing = 0x00201D2B;
  //i2c 100kHz 48MHz 
  //I2C_InitStructure.I2C_Timing = 0x10805e89;

  I2C_Init(M24SR_I2C, &I2C_InitStructure);
 8001508:	1c20      	adds	r0, r4, #0
 800150a:	a903      	add	r1, sp, #12
  I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
  I2C_InitStructure.I2C_DigitalFilter = 0x00;
  //i2c 400kHz, 8MHz
  //I2C_InitStructure.I2C_Timing = 0x0010020A;
  //i2c 400kHz, 48MHz
  I2C_InitStructure.I2C_Timing = 0x00901850;
 800150c:	9303      	str	r3, [sp, #12]
  GPIO_Init(M24SR_RFDIS_PIN_PORT, &GPIO_InitStructure);

  I2C_DeInit(M24SR_I2C);

  /* I2C Init */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C; 
 800150e:	9506      	str	r5, [sp, #24]
  //I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8001510:	9507      	str	r5, [sp, #28]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8001512:	9508      	str	r5, [sp, #32]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001514:	9509      	str	r5, [sp, #36]	; 0x24
  //I2C_InitStructure.I2C_ClockSpeed = M24SR_I2C_CLOCKSPEED;
  I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8001516:	9504      	str	r5, [sp, #16]
  I2C_InitStructure.I2C_DigitalFilter = 0x00;
 8001518:	9505      	str	r5, [sp, #20]
  //i2c 100kHz 8MHz 
  //I2C_InitStructure.I2C_Timing = 0x00201D2B;
  //i2c 100kHz 48MHz 
  //I2C_InitStructure.I2C_Timing = 0x10805e89;

  I2C_Init(M24SR_I2C, &I2C_InitStructure);
 800151a:	f003 f94f 	bl	80047bc <I2C_Init>

  /* I2C Init */
  I2C_Cmd(M24SR_I2C, ENABLE);
 800151e:	1c20      	adds	r0, r4, #0
 8001520:	2101      	movs	r1, #1
 8001522:	f003 f989 	bl	8004838 <I2C_Cmd>
	
}
 8001526:	b00a      	add	sp, #40	; 0x28
 8001528:	bc04      	pop	{r2}
 800152a:	4690      	mov	r8, r2
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	48001400 	.word	0x48001400
 8001534:	40005400 	.word	0x40005400
 8001538:	48000400 	.word	0x48000400
 800153c:	00901850 	.word	0x00901850

08001540 <M24SR_SetI2CSynchroMode>:
  * @retval None
  */
void M24SR_SetI2CSynchroMode( uc8 mode )
{
#ifdef I2C_GPO_SYNCHRO_ALLOWED
	uSynchroMode = mode;
 8001540:	4b01      	ldr	r3, [pc, #4]	; (8001548 <M24SR_SetI2CSynchroMode+0x8>)
 8001542:	7018      	strb	r0, [r3, #0]
	if( mode == M24SR_WAITINGTIME_GPO)
		uSynchroMode = M24SR_WAITINGTIME_POLLING;
	else
		uSynchroMode = mode;
#endif /*  I2C_GPO_SYNCHRO_ALLOWED */
}
 8001544:	4770      	bx	lr
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	20000010 	.word	0x20000010

0800154c <M24SR_I2CTokenRelease>:
  * @brief  This function generates an I2C Token release
  * @retval M24SR_STATUS_SUCCESS : the function is succesful
	* @retval M24SR_ERROR_I2CTIMEOUT : The I2C timeout occured. 
  */
int8_t M24SR_I2CTokenRelease ( void )
{
 800154c:	b508      	push	{r3, lr}
  uint32_t M24SR_Timeout = M24SR_I2C_TIMEOUT;
	uint8_t	NthByte= 0;

    //Wait until I2C isn't busy
    while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_BUSY) == SET);
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <M24SR_I2CTokenRelease+0x3c>)
 8001552:	0209      	lsls	r1, r1, #8
 8001554:	f003 fb38 	bl	8004bc8 <I2C_GetFlagStatus>
 8001558:	2801      	cmp	r0, #1
 800155a:	d0f8      	beq.n	800154e <M24SR_I2CTokenRelease+0x2>
  	
  /*!< Clear the M24SR_I2C AF flag */
  //I2C_ClearFlag(M24SR_I2C, I2C_FLAG_AF);

  /*!< Enable M24SR_I2C acknowledgement if it is already disabled by other function */
  I2C_AcknowledgeConfig(M24SR_I2C, ENABLE);
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <M24SR_I2CTokenRelease+0x3c>)
 800155e:	2101      	movs	r1, #1
 8001560:	f003 fa74 	bl	8004a4c <I2C_AcknowledgeConfig>

  /*---------------------------- Transmission Phase ---------------------------*/

  /*!< Send M24SR_I2C START condition */
  I2C_GenerateSTART(M24SR_I2C, ENABLE);
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <M24SR_I2CTokenRelease+0x3c>)
 8001566:	2101      	movs	r1, #1
 8001568:	f003 fa40 	bl	80049ec <I2C_GenerateSTART>

  //send device select
  /*!< Send M24SR** slave address  */
  //I2C_Send7bitAddress(M24SR_I2C, M24SR_ADDR, I2C_Direction_Transmitter);
  //if(direction == I2C_Direction_Transmitter) 
  I2C_SendData(M24SR_I2C, (M24SR_ADDR << 1) | 0);
 800156c:	2158      	movs	r1, #88	; 0x58
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <M24SR_I2CTokenRelease+0x3c>)
 8001570:	f003 fb1a 	bl	8004ba8 <I2C_SendData>
  //{
  // if (--M24SR_Timeout == 0) goto Error;
  //}
	/* check the AF a flag*/
  
  delay_ms(40);
 8001574:	2028      	movs	r0, #40	; 0x28
 8001576:	f004 f8ab 	bl	80056d0 <delay_ms>
  
  I2C_GenerateSTOP(M24SR_I2C, ENABLE);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <M24SR_I2CTokenRelease+0x3c>)
 800157c:	2101      	movs	r1, #1
 800157e:	f003 fa45 	bl	8004a0c <I2C_GenerateSTOP>
Error :
	/* Send STOP Condition */
  I2C_GenerateSTOP(M24SR_I2C, ENABLE);
  
	return M24SR_ERROR_I2CTIMEOUT;
}
 8001582:	2000      	movs	r0, #0
 8001584:	bd08      	pop	{r3, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40005400 	.word	0x40005400

0800158c <M24SR_SendI2Ccommand>:
  * @param  pBuffer : pointer to the buffer to send to the M24SR
  * @retval M24SR_STATUS_SUCCESS : the function is succesful
	* @retval M24SR_ERROR_I2CTIMEOUT : The I2C timeout occured. 
  */
int8_t M24SR_SendI2Ccommand ( uc8 NbByte , uc8 *pBuffer )
{
 800158c:	b570      	push	{r4, r5, r6, lr}
 800158e:	1c04      	adds	r4, r0, #0
 8001590:	1c0d      	adds	r5, r1, #0
 8001592:	b082      	sub	sp, #8
	uint32_t M24SR_Timeout = M24SR_I2C_TIMEOUT;
	uint8_t	NthByte= 0;

  //Wait until I2C isn't busy
  while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_BUSY) == SET);
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	4821      	ldr	r0, [pc, #132]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 8001598:	0209      	lsls	r1, r1, #8
 800159a:	f003 fb15 	bl	8004bc8 <I2C_GetFlagStatus>
 800159e:	2801      	cmp	r0, #1
 80015a0:	d0f8      	beq.n	8001594 <M24SR_SendI2Ccommand+0x8>
  /*!< Send M24SR** slave address  */
  //I2C_Send7bitAddress(M24SR_I2C, M24SR_ADDR, I2C_Direction_Transmitter);
  //I2C_SendData(M24SR_I2C, (M24SR_ADDR << 1) | 0);

  //I2C_TransferHandling(M24SR_I2C, M24SR_ADDR, 1, I2C_AutoEnd_Mode, I2C_Generate_Start_Write);
  I2C_TransferHandling(M24SR_I2C, M24SR_ADDR, NbByte, I2C_AutoEnd_Mode, I2C_Generate_Start_Write);
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	019b      	lsls	r3, r3, #6
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	481c      	ldr	r0, [pc, #112]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 80015ac:	21ac      	movs	r1, #172	; 0xac
 80015ae:	1c22      	adds	r2, r4, #0
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	f003 fa67 	bl	8004a84 <I2C_TransferHandling>

  //Ensure the transmit interrupted flag is set
  while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_TXIS) == RESET);
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 80015b8:	2102      	movs	r1, #2
 80015ba:	f003 fb05 	bl	8004bc8 <I2C_GetFlagStatus>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d0f9      	beq.n	80015b6 <M24SR_SendI2Ccommand+0x2a>
  //{
  // if (--M24SR_Timeout == 0) goto Error;
  //}
	/* check the AF a flag*/
	
	for (NthByte = 0; NthByte < NbByte ; NthByte ++)
 80015c2:	2c00      	cmp	r4, #0
 80015c4:	d015      	beq.n	80015f2 <M24SR_SendI2Ccommand+0x66>
 80015c6:	1e66      	subs	r6, r4, #1
 80015c8:	b2f6      	uxtb	r6, r6
 80015ca:	3601      	adds	r6, #1
 80015cc:	19ae      	adds	r6, r5, r6
  * @param  pBuffer : pointer to the buffer to send to the M24SR
  * @retval M24SR_STATUS_SUCCESS : the function is succesful
	* @retval M24SR_ERROR_I2CTIMEOUT : The I2C timeout occured. 
  */
int8_t M24SR_SendI2Ccommand ( uc8 NbByte , uc8 *pBuffer )
{
 80015ce:	4c14      	ldr	r4, [pc, #80]	; (8001620 <M24SR_SendI2Ccommand+0x94>)
 80015d0:	e002      	b.n	80015d8 <M24SR_SendI2Ccommand+0x4c>
 80015d2:	3c01      	subs	r4, #1
	{
		M24SR_Timeout = M24SR_FLAG_TIMEOUT;
		/* Send the device's internal address to write to */
		while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_TXE))) //&& (!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_BTF)))  
		{
		 if (M24SR_Timeout-- == 0) goto Error;
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d018      	beq.n	800160a <M24SR_SendI2Ccommand+0x7e>
	
	for (NthByte = 0; NthByte < NbByte ; NthByte ++)
	{
		M24SR_Timeout = M24SR_FLAG_TIMEOUT;
		/* Send the device's internal address to write to */
		while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_TXE))) //&& (!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_BTF)))  
 80015d8:	4810      	ldr	r0, [pc, #64]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 80015da:	2101      	movs	r1, #1
 80015dc:	f003 faf4 	bl	8004bc8 <I2C_GetFlagStatus>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d0f6      	beq.n	80015d2 <M24SR_SendI2Ccommand+0x46>
		{
		 if (M24SR_Timeout-- == 0) goto Error;
		}
        I2C_SendData(M24SR_I2C, pBuffer[NthByte]);  
 80015e4:	7829      	ldrb	r1, [r5, #0]
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 80015e8:	3501      	adds	r5, #1
 80015ea:	f003 fadd 	bl	8004ba8 <I2C_SendData>
  //{
  // if (--M24SR_Timeout == 0) goto Error;
  //}
	/* check the AF a flag*/
	
	for (NthByte = 0; NthByte < NbByte ; NthByte ++)
 80015ee:	42b5      	cmp	r5, r6
 80015f0:	d1ed      	bne.n	80015ce <M24SR_SendI2Ccommand+0x42>
		 if (M24SR_Timeout-- == 0) goto Error;
		}
        I2C_SendData(M24SR_I2C, pBuffer[NthByte]);  
	}
    
    while (I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_STOPF) == RESET);
 80015f2:	480a      	ldr	r0, [pc, #40]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 80015f4:	2120      	movs	r1, #32
 80015f6:	f003 fae7 	bl	8004bc8 <I2C_GetFlagStatus>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d0f9      	beq.n	80015f2 <M24SR_SendI2Ccommand+0x66>
    I2C_ClearFlag(M24SR_I2C, I2C_FLAG_STOPF); 
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 8001600:	2120      	movs	r1, #32
 8001602:	f003 fae7 	bl	8004bd4 <I2C_ClearFlag>
	//{
	//	/* No acknowledgement from M24SR */
	//	return  M24SR_ERROR_NOACKNOWLEDGE;
	//}
	
	return M24SR_STATUS_SUCCESS;
 8001606:	2000      	movs	r0, #0
 8001608:	e004      	b.n	8001614 <M24SR_SendI2Ccommand+0x88>
	
Error :
	/* Send STOP Condition */
  I2C_GenerateSTOP(M24SR_I2C, ENABLE);
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <M24SR_SendI2Ccommand+0x90>)
 800160c:	2101      	movs	r1, #1
 800160e:	f003 f9fd 	bl	8004a0c <I2C_GenerateSTOP>
	return M24SR_ERROR_I2CTIMEOUT;
 8001612:	2011      	movs	r0, #17
 8001614:	b240      	sxtb	r0, r0
}
 8001616:	b002      	add	sp, #8
 8001618:	bd70      	pop	{r4, r5, r6, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40005400 	.word	0x40005400
 8001620:	0000f001 	.word	0x0000f001

08001624 <M24SR_ReceiveI2Cresponse>:
  * @param  pBuffer : Pointer to the buffer to send to the M24SR
  * @retval M24SR_STATUS_SUCCESS : The function is succesful
	* @retval M24SR_ERROR_I2CTIMEOUT : The I2C timeout occured. 
  */
int8_t M24SR_ReceiveI2Cresponse ( uint8_t NbByte , uint8_t *pBuffer )
{
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	1c04      	adds	r4, r0, #0
 8001628:	1c0d      	adds	r5, r1, #0
 800162a:	b082      	sub	sp, #8
    uint32_t M24SR_Timeout = M24SR_I2C_TIMEOUT/2;
    uint8_t i=0,
    				NthByte;

  //wait till i2c not busy
  while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_BUSY) == SET);
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	4828      	ldr	r0, [pc, #160]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 8001630:	0209      	lsls	r1, r1, #8
 8001632:	f003 fac9 	bl	8004bc8 <I2C_GetFlagStatus>
 8001636:	2801      	cmp	r0, #1
 8001638:	d0f8      	beq.n	800162c <M24SR_ReceiveI2Cresponse+0x8>
 
  I2C_TransferHandling(M24SR_I2C, M24SR_ADDR, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); 
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4823      	ldr	r0, [pc, #140]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 8001642:	21ac      	movs	r1, #172	; 0xac
 8001644:	2201      	movs	r2, #1
 8001646:	2300      	movs	r3, #0
 8001648:	f003 fa1c 	bl	8004a84 <I2C_TransferHandling>
 
  while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_TXIS) == RESET);
 800164c:	4820      	ldr	r0, [pc, #128]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 800164e:	2102      	movs	r1, #2
 8001650:	f003 faba 	bl	8004bc8 <I2C_GetFlagStatus>
 8001654:	2800      	cmp	r0, #0
 8001656:	d0f9      	beq.n	800164c <M24SR_ReceiveI2Cresponse+0x28>

  I2C_TransferHandling(M24SR_I2C, M24SR_ADDR, NbByte, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); 
 8001658:	2390      	movs	r3, #144	; 0x90
 800165a:	019b      	lsls	r3, r3, #6
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	481b      	ldr	r0, [pc, #108]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 8001662:	21ac      	movs	r1, #172	; 0xac
 8001664:	1c22      	adds	r2, r4, #0
 8001666:	049b      	lsls	r3, r3, #18
 8001668:	f003 fa0c 	bl	8004a84 <I2C_TransferHandling>
	// if (M24SR_Timeout-- == 0)
	//	 goto Error;
	//}

	/* read the NthByte bytes*/
	for (NthByte = NbByte; NthByte >1 ; NthByte --)
 800166c:	2c01      	cmp	r4, #1
 800166e:	d91b      	bls.n	80016a8 <M24SR_ReceiveI2Cresponse+0x84>
 8001670:	1ea6      	subs	r6, r4, #2
 8001672:	b2f6      	uxtb	r6, r6
 8001674:	3601      	adds	r6, #1
 8001676:	19ae      	adds	r6, r5, r6
	{	
        while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_RXNE) == RESET);				
 8001678:	4815      	ldr	r0, [pc, #84]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 800167a:	2104      	movs	r1, #4
 800167c:	f003 faa4 	bl	8004bc8 <I2C_GetFlagStatus>
 8001680:	2800      	cmp	r0, #0
 8001682:	d0f9      	beq.n	8001678 <M24SR_ReceiveI2Cresponse+0x54>
		//	//M24SR_I2C->CR1 &= ~(0x0400); //flip the ACK 
		//	I2C_GenerateSTOP(M24SR_I2C, ENABLE);	
		//}
				
		/* Send the device's internal address to write to */
		pBuffer[i++] = I2C_ReceiveData(M24SR_I2C);  
 8001684:	4812      	ldr	r0, [pc, #72]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 8001686:	f003 fa91 	bl	8004bac <I2C_ReceiveData>

		/* Test on RXE FLag (data sent) */
		M24SR_Timeout = M24SR_FLAG_TIMEOUT;
		while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_RXNE)) )  
 800168a:	4c12      	ldr	r4, [pc, #72]	; (80016d4 <M24SR_ReceiveI2Cresponse+0xb0>)
		//	//M24SR_I2C->CR1 &= ~(0x0400); //flip the ACK 
		//	I2C_GenerateSTOP(M24SR_I2C, ENABLE);	
		//}
				
		/* Send the device's internal address to write to */
		pBuffer[i++] = I2C_ReceiveData(M24SR_I2C);  
 800168c:	7028      	strb	r0, [r5, #0]

		/* Test on RXE FLag (data sent) */
		M24SR_Timeout = M24SR_FLAG_TIMEOUT;
		while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_RXNE)) )  
 800168e:	e002      	b.n	8001696 <M24SR_ReceiveI2Cresponse+0x72>
 8001690:	3c01      	subs	r4, #1
		{
			if (M24SR_Timeout-- == 0) goto Error;
 8001692:	2c00      	cmp	r4, #0
 8001694:	d014      	beq.n	80016c0 <M24SR_ReceiveI2Cresponse+0x9c>
		/* Send the device's internal address to write to */
		pBuffer[i++] = I2C_ReceiveData(M24SR_I2C);  

		/* Test on RXE FLag (data sent) */
		M24SR_Timeout = M24SR_FLAG_TIMEOUT;
		while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_RXNE)) )  
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 8001698:	2104      	movs	r1, #4
 800169a:	f003 fa95 	bl	8004bc8 <I2C_GetFlagStatus>
 800169e:	2800      	cmp	r0, #0
 80016a0:	d0f6      	beq.n	8001690 <M24SR_ReceiveI2Cresponse+0x6c>
 80016a2:	3501      	adds	r5, #1
	// if (M24SR_Timeout-- == 0)
	//	 goto Error;
	//}

	/* read the NthByte bytes*/
	for (NthByte = NbByte; NthByte >1 ; NthByte --)
 80016a4:	42b5      	cmp	r5, r6
 80016a6:	d1e7      	bne.n	8001678 <M24SR_ReceiveI2Cresponse+0x54>
			
	}
	//pBuffer[i++] = I2C_ReceiveData(M24SR_I2C);

    //Wait for the stop condition to be sent
    while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_STOPF) == RESET);
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 80016aa:	2120      	movs	r1, #32
 80016ac:	f003 fa8c 	bl	8004bc8 <I2C_GetFlagStatus>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d0f9      	beq.n	80016a8 <M24SR_ReceiveI2Cresponse+0x84>

    //Clear the stop flag for next transfers
    I2C_ClearFlag(M24SR_I2C, I2C_FLAG_STOPF);
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 80016b6:	2120      	movs	r1, #32
 80016b8:	f003 fa8c 	bl	8004bd4 <I2C_ClearFlag>
  /*!< Test on M24SR_I2C EV7 and clear it */
//  while (( (M24SR_I2C->CR1 & 0x0200) != 0x0000)  && M24SR_Timeout--)  /*!< EV7 */
//  {
//  }

	return M24SR_STATUS_SUCCESS;
 80016bc:	2000      	movs	r0, #0
 80016be:	e004      	b.n	80016ca <M24SR_ReceiveI2Cresponse+0xa6>
	
Error :
	/* Send STOP Condition */
  I2C_GenerateSTOP(M24SR_I2C, ENABLE);
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <M24SR_ReceiveI2Cresponse+0xac>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	f003 f9a2 	bl	8004a0c <I2C_GenerateSTOP>
	return M24SR_ERROR_I2CTIMEOUT;
 80016c8:	2011      	movs	r0, #17
 80016ca:	b240      	sxtb	r0, r0
}
 80016cc:	b002      	add	sp, #8
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	40005400 	.word	0x40005400
 80016d4:	0000f001 	.word	0x0000f001

080016d8 <M24SR_ReceiveI2Cbuffer>:
  * @param  pBuffer : pointer to the buffer to send to the M24SR
  * @retval M24SR_STATUS_SUCCESS : the function is succesful
	* @retval M24SR_ERROR_I2CTIMEOUT : The I2C timeout occured. 
  */
int8_t M24SR_ReceiveI2Cbuffer ( uint8_t NbByte , uint8_t *pBuffer )
{
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	1c06      	adds	r6, r0, #0
 80016dc:	1c0d      	adds	r5, r1, #0
 80016de:	b082      	sub	sp, #8
    uint32_t M24SR_Timeout = M24SR_I2C_TIMEOUT/2;
    uint8_t i=0,
				NthByte;

  //wait till i2c not busy
  while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_BUSY) == SET);
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	4827      	ldr	r0, [pc, #156]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 80016e4:	0209      	lsls	r1, r1, #8
 80016e6:	f003 fa6f 	bl	8004bc8 <I2C_GetFlagStatus>
 80016ea:	2801      	cmp	r0, #1
 80016ec:	d0f8      	beq.n	80016e0 <M24SR_ReceiveI2Cbuffer+0x8>
 
  I2C_TransferHandling(M24SR_I2C, M24SR_ADDR, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write); 
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	4822      	ldr	r0, [pc, #136]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 80016f6:	21ac      	movs	r1, #172	; 0xac
 80016f8:	2201      	movs	r2, #1
 80016fa:	2300      	movs	r3, #0
 80016fc:	f003 f9c2 	bl	8004a84 <I2C_TransferHandling>
 
  while(I2C_GetFlagStatus(M24SR_I2C, I2C_FLAG_TXIS) == RESET);
 8001700:	481f      	ldr	r0, [pc, #124]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 8001702:	2102      	movs	r1, #2
 8001704:	f003 fa60 	bl	8004bc8 <I2C_GetFlagStatus>
 8001708:	2800      	cmp	r0, #0
 800170a:	d0f9      	beq.n	8001700 <M24SR_ReceiveI2Cbuffer+0x28>

  I2C_TransferHandling(M24SR_I2C, M24SR_ADDR, NbByte, I2C_AutoEnd_Mode, I2C_Generate_Start_Read); 
 800170c:	2390      	movs	r3, #144	; 0x90
 800170e:	019b      	lsls	r3, r3, #6
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	481a      	ldr	r0, [pc, #104]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 8001716:	21ac      	movs	r1, #172	; 0xac
 8001718:	1c32      	adds	r2, r6, #0
 800171a:	049b      	lsls	r3, r3, #18
 800171c:	f003 f9b2 	bl	8004a84 <I2C_TransferHandling>
  //{
  //  if((M24SR_Timeout--) == 0) goto Error;
  //}
	
	/* recover the device select byte */
	I2C_ReceiveData(M24SR_I2C);  
 8001720:	4817      	ldr	r0, [pc, #92]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 8001722:	f003 fa43 	bl	8004bac <I2C_ReceiveData>
	/* Test on RXE FLag (data sent) */
	M24SR_Timeout = M24SR_FLAG_TIMEOUT;
	while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_RXNE)) )  
 8001726:	4c17      	ldr	r4, [pc, #92]	; (8001784 <M24SR_ReceiveI2Cbuffer+0xac>)
 8001728:	e002      	b.n	8001730 <M24SR_ReceiveI2Cbuffer+0x58>
 800172a:	3c01      	subs	r4, #1
	{
	 if (M24SR_Timeout-- == 0) goto Error;
 800172c:	2c00      	cmp	r4, #0
 800172e:	d01f      	beq.n	8001770 <M24SR_ReceiveI2Cbuffer+0x98>
	
	/* recover the device select byte */
	I2C_ReceiveData(M24SR_I2C);  
	/* Test on RXE FLag (data sent) */
	M24SR_Timeout = M24SR_FLAG_TIMEOUT;
	while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_RXNE)) )  
 8001730:	4813      	ldr	r0, [pc, #76]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 8001732:	2104      	movs	r1, #4
 8001734:	f003 fa48 	bl	8004bc8 <I2C_GetFlagStatus>
 8001738:	2800      	cmp	r0, #0
 800173a:	d0f6      	beq.n	800172a <M24SR_ReceiveI2Cbuffer+0x52>
	{
	 if (M24SR_Timeout-- == 0) goto Error;
	}
	
	/* Read the buffer  */ 
	for (NthByte = NbByte ; NthByte >1 ; NthByte --)
 800173c:	2e01      	cmp	r6, #1
 800173e:	d915      	bls.n	800176c <M24SR_ReceiveI2Cbuffer+0x94>
 8001740:	3e02      	subs	r6, #2
 8001742:	b2f6      	uxtb	r6, r6
 8001744:	3601      	adds	r6, #1
 8001746:	19ae      	adds	r6, r5, r6
		//	/* deactive the ACKbit*/
		//	M24SR_I2C->CR1 &= ~(0x0400);
		//}
		
		/* Send the device's internal address to write to */
		pBuffer[i++] = I2C_ReceiveData(M24SR_I2C);  
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 800174a:	f003 fa2f 	bl	8004bac <I2C_ReceiveData>
 800174e:	4c0d      	ldr	r4, [pc, #52]	; (8001784 <M24SR_ReceiveI2Cbuffer+0xac>)
 8001750:	7028      	strb	r0, [r5, #0]
 8001752:	e002      	b.n	800175a <M24SR_ReceiveI2Cbuffer+0x82>
 8001754:	3c01      	subs	r4, #1
		if (NthByte > 1)
		{
			M24SR_Timeout = M24SR_FLAG_TIMEOUT;
			while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_RXNE))  )  
			{
			 if (M24SR_Timeout-- == 0) goto Error;
 8001756:	2c00      	cmp	r4, #0
 8001758:	d00a      	beq.n	8001770 <M24SR_ReceiveI2Cbuffer+0x98>

		/* Test on RXE FLag (data sent) */
		if (NthByte > 1)
		{
			M24SR_Timeout = M24SR_FLAG_TIMEOUT;
			while ((!I2C_GetFlagStatus(M24SR_I2C,I2C_FLAG_RXNE))  )  
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 800175c:	2104      	movs	r1, #4
 800175e:	f003 fa33 	bl	8004bc8 <I2C_GetFlagStatus>
 8001762:	2800      	cmp	r0, #0
 8001764:	d0f6      	beq.n	8001754 <M24SR_ReceiveI2Cbuffer+0x7c>
 8001766:	3501      	adds	r5, #1
	{
	 if (M24SR_Timeout-- == 0) goto Error;
	}
	
	/* Read the buffer  */ 
	for (NthByte = NbByte ; NthByte >1 ; NthByte --)
 8001768:	42b5      	cmp	r5, r6
 800176a:	d1ed      	bne.n	8001748 <M24SR_ReceiveI2Cbuffer+0x70>
  /*!< Test on M24SR_I2C EV7 and clear it */
  //while (( (M24SR_I2C->CR1 & 0x0200) != 0x0000)  && M24SR_Timeout--)  /*!< EV7 */
  //{
  //}
	
	return M24SR_STATUS_SUCCESS;
 800176c:	2000      	movs	r0, #0
 800176e:	e004      	b.n	800177a <M24SR_ReceiveI2Cbuffer+0xa2>
	
Error :
	/* Send STOP Condition */
  I2C_GenerateSTOP(M24SR_I2C, ENABLE);
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <M24SR_ReceiveI2Cbuffer+0xa8>)
 8001772:	2101      	movs	r1, #1
 8001774:	f003 f94a 	bl	8004a0c <I2C_GenerateSTOP>
	return M24SR_ERROR_I2CTIMEOUT;
 8001778:	2011      	movs	r0, #17
 800177a:	b240      	sxtb	r0, r0
}
 800177c:	b002      	add	sp, #8
 800177e:	bd70      	pop	{r4, r5, r6, pc}
 8001780:	40005400 	.word	0x40005400
 8001784:	0000f001 	.word	0x0000f001

08001788 <M24SR_IsAnswerReady>:
  * @brief  This functions returns M24SR_STATUS_SUCCESS when a response is ready
  * @retval M24SR_STATUS_SUCCESS : a response of the M24LR is ready
	* @retval M24SR_ERROR_DEFAULT : the response of the M24LR is not ready
  */
int8_t M24SR_IsAnswerReady ( void )
{
 8001788:	b538      	push	{r3, r4, r5, lr}
	int8_t status;
  uint32_t retry = 0x3FFFF;
	uint8_t stable = 0;
	
		switch (uSynchroMode)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <M24SR_IsAnswerReady+0x58>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d021      	beq.n	80017d6 <M24SR_IsAnswerReady+0x4e>
 8001792:	2b03      	cmp	r3, #3
 8001794:	d00a      	beq.n	80017ac <M24SR_IsAnswerReady+0x24>
 8001796:	2b01      	cmp	r3, #1
 8001798:	d002      	beq.n	80017a0 <M24SR_IsAnswerReady+0x18>
					goto Error;
				
				return M24SR_STATUS_SUCCESS;
			
			default : 
				return M24SR_ERROR_DEFAULT;
 800179a:	2010      	movs	r0, #16
 800179c:	b240      	sxtb	r0, r0
		}

Error :
		return M24SR_ERROR_DEFAULT;
}
 800179e:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t stable = 0;
	
		switch (uSynchroMode)
		{
			case M24SR_WAITINGTIME_POLLING :
				errchk(M24SR_PollI2C ( ));
 80017a0:	f7ff fe30 	bl	8001404 <M24SR_PollI2C>
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d1f8      	bne.n	800179a <M24SR_IsAnswerReady+0x12>
				return M24SR_STATUS_SUCCESS;
			
			case M24SR_WAITINGTIME_TIMEOUT :
				// M24SR FWI=5 => (256*16/fc)*2^5=9.6ms but M24SR ask for extended time to program up to 246Bytes.
				delay_ms (80);	
				return M24SR_STATUS_SUCCESS;
 80017a8:	2000      	movs	r0, #0
 80017aa:	e7f7      	b.n	800179c <M24SR_IsAnswerReady+0x14>
{
	int8_t status;
  uint32_t retry = 0x3FFFF;
	uint8_t stable = 0;
	
		switch (uSynchroMode)
 80017ac:	2500      	movs	r5, #0
 80017ae:	4c0d      	ldr	r4, [pc, #52]	; (80017e4 <M24SR_IsAnswerReady+0x5c>)
 80017b0:	e001      	b.n	80017b6 <M24SR_IsAnswerReady+0x2e>
					{
						stable ++;						
					}
					retry --;						
				}
				while(stable <5 && retry>0);
 80017b2:	2c00      	cmp	r4, #0
 80017b4:	d0f1      	beq.n	800179a <M24SR_IsAnswerReady+0x12>
			  /* Mapping an interrupt was impossible because EXTI_line 6 was already taken by Joystick SEL */
			  /* HW: GPO --> PA6 and Joystick SEL --> PB6 */
				/* Idealy use an interrupt here */
				do
				{
					if( GPIO_ReadInputDataBit(M24SR_GPO_PIN_PORT,M24SR_GPO_PIN) == Bit_RESET)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <M24SR_IsAnswerReady+0x60>)
 80017ba:	0049      	lsls	r1, r1, #1
 80017bc:	f7fe fd56 	bl	800026c <GPIO_ReadInputDataBit>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d101      	bne.n	80017c8 <M24SR_IsAnswerReady+0x40>
					{
						stable ++;						
 80017c4:	3501      	adds	r5, #1
 80017c6:	b2ed      	uxtb	r5, r5
					}
					retry --;						
 80017c8:	3c01      	subs	r4, #1
				}
				while(stable <5 && retry>0);
 80017ca:	2d04      	cmp	r5, #4
 80017cc:	d9f1      	bls.n	80017b2 <M24SR_IsAnswerReady+0x2a>
				if(!retry)
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d0e3      	beq.n	800179a <M24SR_IsAnswerReady+0x12>
				return M24SR_STATUS_SUCCESS;
			
			case M24SR_WAITINGTIME_TIMEOUT :
				// M24SR FWI=5 => (256*16/fc)*2^5=9.6ms but M24SR ask for extended time to program up to 246Bytes.
				delay_ms (80);	
				return M24SR_STATUS_SUCCESS;
 80017d2:	2000      	movs	r0, #0
 80017d4:	e7e2      	b.n	800179c <M24SR_IsAnswerReady+0x14>
				errchk(M24SR_PollI2C ( ));
				return M24SR_STATUS_SUCCESS;
			
			case M24SR_WAITINGTIME_TIMEOUT :
				// M24SR FWI=5 => (256*16/fc)*2^5=9.6ms but M24SR ask for extended time to program up to 246Bytes.
				delay_ms (80);	
 80017d6:	2050      	movs	r0, #80	; 0x50
 80017d8:	f003 ff7a 	bl	80056d0 <delay_ms>
				return M24SR_STATUS_SUCCESS;
 80017dc:	2000      	movs	r0, #0
 80017de:	e7dd      	b.n	800179c <M24SR_IsAnswerReady+0x14>
 80017e0:	20000010 	.word	0x20000010
 80017e4:	0003ffff 	.word	0x0003ffff
 80017e8:	48000400 	.word	0x48000400

080017ec <M24SR_RFConfig_Hard>:
void M24SR_RFConfig_Hard( uc8 OnOffChoice)
{
	/* Disable RF */
	if ( OnOffChoice != 0 )
	{	
		M24SR_RFDIS_PIN_PORT->BRR = M24SR_RFDIS_PIN; 
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <M24SR_RFConfig_Hard+0x14>)
 80017f0:	0092      	lsls	r2, r2, #2
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  */
void M24SR_RFConfig_Hard( uc8 OnOffChoice)
{
	/* Disable RF */
	if ( OnOffChoice != 0 )
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d101      	bne.n	80017fa <M24SR_RFConfig_Hard+0xe>
	{	
		M24SR_RFDIS_PIN_PORT->BRR = M24SR_RFDIS_PIN; 
	}
	else
	{	
		M24SR_RFDIS_PIN_PORT->BSRR = M24SR_RFDIS_PIN;		
 80017f6:	619a      	str	r2, [r3, #24]
	}
}
 80017f8:	4770      	bx	lr
void M24SR_RFConfig_Hard( uc8 OnOffChoice)
{
	/* Disable RF */
	if ( OnOffChoice != 0 )
	{	
		M24SR_RFDIS_PIN_PORT->BRR = M24SR_RFDIS_PIN; 
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80017fc:	e7fc      	b.n	80017f8 <M24SR_RFConfig_Hard+0xc>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	48000400 	.word	0x48000400

08001804 <gfxInit>:
	extern void _gtransInit(void);
	extern void _gtransDeinit(void);
#endif

void gfxInit(void)
{
 8001804:	b508      	push	{r3, lr}
	/* Ensure we only initialise once */
	if (gfxInitDone)
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <gfxInit+0x24>)
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	2a00      	cmp	r2, #0
 800180c:	d10b      	bne.n	8001826 <gfxInit+0x22>
		return;
	gfxInitDone = TRUE;
 800180e:	32ff      	adds	r2, #255	; 0xff
 8001810:	701a      	strb	r2, [r3, #0]
	// These must be initialised in the order of their dependancies

	#ifdef GFX_OS_PRE_INIT_FUNCTION
		GFX_OS_PRE_INIT_FUNCTION();
	#endif
	_gosInit();
 8001812:	f002 fbf5 	bl	8004000 <_gosInit>
	#endif
	#if GFX_USE_GTIMER
		_gtimerInit();
	#endif
	#if GFX_USE_GDRIVER
		_gdriverInit();
 8001816:	f000 f81b 	bl	8001850 <_gdriverInit>
	#endif
	#if GFX_USE_GFILE
		_gfileInit();
 800181a:	f002 fe65 	bl	80044e8 <_gfileInit>
	#endif
	#if GFX_USE_GDISP
		_gdispInit();
 800181e:	f000 fa89 	bl	8001d34 <_gdispInit>
		_gaudioInit();
	#endif
	#if GFX_USE_GWIN
		_gwinInit();
	#endif
	_gosPostInit();
 8001822:	f002 fbf3 	bl	800400c <_gosPostInit>
	#if GFX_OS_CALL_UGFXMAIN
		uGFXMain(0);
	#endif
}
 8001826:	bd08      	pop	{r3, pc}
 8001828:	20000874 	.word	0x20000874

0800182c <gfxDeinit>:

void gfxDeinit(void)
{
 800182c:	b508      	push	{r3, lr}
	if (!gfxInitDone)
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <gfxDeinit+0x20>)
 8001830:	781a      	ldrb	r2, [r3, #0]
 8001832:	2a00      	cmp	r2, #0
 8001834:	d009      	beq.n	800184a <gfxDeinit+0x1e>
		return;
	gfxInitDone = FALSE;
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	#endif
	#if GFX_USE_GINPUT
		_ginputDeinit();
	#endif
	#if GFX_USE_GDISP
		_gdispDeinit();
 800183a:	f000 f97f 	bl	8001b3c <_gdispDeinit>
	#endif
	#if GFX_USE_GFILE
		_gfileDeinit();
 800183e:	f002 fedf 	bl	8004600 <_gfileDeinit>
	#endif
	#if GFX_USE_GDRIVER
		_gdriverDeinit();
 8001842:	f000 f87f 	bl	8001944 <_gdriverDeinit>
		_gqueueDeinit();
	#endif
	#ifdef GFX_OS_EXTRA_DEINIT_FUNCTION
		GFX_OS_EXTRA_DEINIT_FUNCTION();
	#endif
	_gosDeinit();
 8001846:	f002 fbe3 	bl	8004010 <_gosDeinit>
}
 800184a:	bd08      	pop	{r3, pc}
 800184c:	20000874 	.word	0x20000874

08001850 <_gdriverInit>:
static GDriver *dhead;
static GDriver *dtail;

// The system initialization.
void _gdriverInit(void) {
}
 8001850:	4770      	bx	lr
 8001852:	46c0      	nop			; (mov r8, r8)

08001854 <gdriverRegister>:
	while(dhead)
		gdriverUnRegister(dhead);
}


GDriver *gdriverRegister(const GDriverVMT *vmt, void *param) {
 8001854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001856:	4646      	mov	r6, r8
 8001858:	464f      	mov	r7, r9
 800185a:	b4c0      	push	{r6, r7}
	GDriver *	pd;
	unsigned	dinstance, sinstance;

	// Loop to find the driver instance and the system instance numbers
	dinstance = sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 800185c:	4e26      	ldr	r6, [pc, #152]	; (80018f8 <gdriverRegister+0xa4>)
	while(dhead)
		gdriverUnRegister(dhead);
}


GDriver *gdriverRegister(const GDriverVMT *vmt, void *param) {
 800185e:	1c04      	adds	r4, r0, #0
	GDriver *	pd;
	unsigned	dinstance, sinstance;

	// Loop to find the driver instance and the system instance numbers
	dinstance = sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001860:	6833      	ldr	r3, [r6, #0]
	while(dhead)
		gdriverUnRegister(dhead);
}


GDriver *gdriverRegister(const GDriverVMT *vmt, void *param) {
 8001862:	4688      	mov	r8, r1
	GDriver *	pd;
	unsigned	dinstance, sinstance;

	// Loop to find the driver instance and the system instance numbers
	dinstance = sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001864:	2b00      	cmp	r3, #0
 8001866:	d03d      	beq.n	80018e4 <gdriverRegister+0x90>
 8001868:	8801      	ldrh	r1, [r0, #0]
 800186a:	2500      	movs	r5, #0
 800186c:	2700      	movs	r7, #0
 800186e:	e005      	b.n	800187c <gdriverRegister+0x28>
		if (pd->vmt == vmt)
			dinstance++;
		if (pd->vmt->type == vmt->type)
 8001870:	8812      	ldrh	r2, [r2, #0]
 8001872:	428a      	cmp	r2, r1
 8001874:	d006      	beq.n	8001884 <gdriverRegister+0x30>
	GDriver *	pd;
	unsigned	dinstance, sinstance;

	// Loop to find the driver instance and the system instance numbers
	dinstance = sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <gdriverRegister+0x38>
		if (pd->vmt == vmt)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	42a2      	cmp	r2, r4
 8001880:	d1f6      	bne.n	8001870 <gdriverRegister+0x1c>
			dinstance++;
 8001882:	3701      	adds	r7, #1
	GDriver *	pd;
	unsigned	dinstance, sinstance;

	// Loop to find the driver instance and the system instance numbers
	dinstance = sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001884:	681b      	ldr	r3, [r3, #0]
		if (pd->vmt == vmt)
			dinstance++;
		if (pd->vmt->type == vmt->type)
			sinstance++;
 8001886:	3501      	adds	r5, #1
	GDriver *	pd;
	unsigned	dinstance, sinstance;

	// Loop to find the driver instance and the system instance numbers
	dinstance = sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f7      	bne.n	800187c <gdriverRegister+0x28>
		if (pd->vmt->type == vmt->type)
			sinstance++;
	}

	// Get a new driver instance of the correct size and initialize it
	pd = gfxAlloc(vmt->objsize);
 800188c:	6860      	ldr	r0, [r4, #4]
 800188e:	f002 fe1d 	bl	80044cc <gfxAlloc>
 8001892:	4681      	mov	r9, r0
	if (!pd)
 8001894:	2800      	cmp	r0, #0
 8001896:	d028      	beq.n	80018ea <gdriverRegister+0x96>
		return 0;
    memset(pd, 0, vmt->objsize);
 8001898:	2100      	movs	r1, #0
 800189a:	6862      	ldr	r2, [r4, #4]
 800189c:	f004 fc00 	bl	80060a0 <memset>
	pd->vmt = vmt;
 80018a0:	464b      	mov	r3, r9
 80018a2:	605c      	str	r4, [r3, #4]
	if (vmt->init && !vmt->init(pd, param, dinstance, sinstance)) {
 80018a4:	68a3      	ldr	r3, [r4, #8]
 80018a6:	469c      	mov	ip, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <gdriverRegister+0x66>
 80018ac:	4648      	mov	r0, r9
 80018ae:	4641      	mov	r1, r8
 80018b0:	1c3a      	adds	r2, r7, #0
 80018b2:	1c2b      	adds	r3, r5, #0
 80018b4:	47e0      	blx	ip
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d019      	beq.n	80018ee <gdriverRegister+0x9a>
		gfxFree(pd);
		return 0;
	}

	// Add it to the driver chain (at the end)
	if (dhead)
 80018ba:	6833      	ldr	r3, [r6, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00e      	beq.n	80018de <gdriverRegister+0x8a>
		dtail->driverchain = pd;
 80018c0:	464a      	mov	r2, r9
 80018c2:	6873      	ldr	r3, [r6, #4]
 80018c4:	601a      	str	r2, [r3, #0]
	else
		dhead = pd;
	dtail = pd;
 80018c6:	464b      	mov	r3, r9
 80018c8:	6073      	str	r3, [r6, #4]

	// Do the post init
	if (vmt->postinit)
 80018ca:	68e3      	ldr	r3, [r4, #12]
		vmt->postinit(pd);
 80018cc:	4648      	mov	r0, r9
	else
		dhead = pd;
	dtail = pd;

	// Do the post init
	if (vmt->postinit)
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <gdriverRegister+0x82>
		vmt->postinit(pd);
 80018d2:	4798      	blx	r3
 80018d4:	4648      	mov	r0, r9

	return pd;
}
 80018d6:	bc0c      	pop	{r2, r3}
 80018d8:	4690      	mov	r8, r2
 80018da:	4699      	mov	r9, r3
 80018dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// Add it to the driver chain (at the end)
	if (dhead)
		dtail->driverchain = pd;
	else
		dhead = pd;
 80018de:	464b      	mov	r3, r9
 80018e0:	6033      	str	r3, [r6, #0]
 80018e2:	e7f0      	b.n	80018c6 <gdriverRegister+0x72>
GDriver *gdriverRegister(const GDriverVMT *vmt, void *param) {
	GDriver *	pd;
	unsigned	dinstance, sinstance;

	// Loop to find the driver instance and the system instance numbers
	dinstance = sinstance = 0;
 80018e4:	2500      	movs	r5, #0
 80018e6:	2700      	movs	r7, #0
 80018e8:	e7d0      	b.n	800188c <gdriverRegister+0x38>
	}

	// Get a new driver instance of the correct size and initialize it
	pd = gfxAlloc(vmt->objsize);
	if (!pd)
		return 0;
 80018ea:	2000      	movs	r0, #0
 80018ec:	e7f3      	b.n	80018d6 <gdriverRegister+0x82>
    memset(pd, 0, vmt->objsize);
	pd->vmt = vmt;
	if (vmt->init && !vmt->init(pd, param, dinstance, sinstance)) {
		gfxFree(pd);
 80018ee:	4648      	mov	r0, r9
 80018f0:	f002 fdf6 	bl	80044e0 <gfxFree>
		return 0;
 80018f4:	2000      	movs	r0, #0
 80018f6:	e7ee      	b.n	80018d6 <gdriverRegister+0x82>
 80018f8:	20000878 	.word	0x20000878

080018fc <gdriverUnRegister>:
		vmt->postinit(pd);

	return pd;
}

void gdriverUnRegister(GDriver *driver) {
 80018fc:	b510      	push	{r4, lr}
	GDriver		*pd;

	// Safety
	if (!driver)
 80018fe:	2800      	cmp	r0, #0
 8001900:	d013      	beq.n	800192a <gdriverUnRegister+0x2e>
		return;

	// Remove it from the list of drivers
	if (dhead == driver)
 8001902:	490f      	ldr	r1, [pc, #60]	; (8001940 <gdriverUnRegister+0x44>)
 8001904:	680a      	ldr	r2, [r1, #0]
 8001906:	4282      	cmp	r2, r0
 8001908:	d103      	bne.n	8001912 <gdriverUnRegister+0x16>
 800190a:	e015      	b.n	8001938 <gdriverUnRegister+0x3c>
		dhead = driver->driverchain;
	else {
		for(pd = dhead; pd->driverchain; pd = pd->driverchain) {
			if (pd->driverchain == driver) {
 800190c:	4298      	cmp	r0, r3
 800190e:	d00d      	beq.n	800192c <gdriverUnRegister+0x30>
 8001910:	1c1a      	adds	r2, r3, #0

	// Remove it from the list of drivers
	if (dhead == driver)
		dhead = driver->driverchain;
	else {
		for(pd = dhead; pd->driverchain; pd = pd->driverchain) {
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f9      	bne.n	800190c <gdriverUnRegister+0x10>
			}
		}
	}

	// Call the deinit()
	if (driver->vmt->deinit)
 8001918:	6843      	ldr	r3, [r0, #4]
 800191a:	1c04      	adds	r4, r0, #0
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d000      	beq.n	8001924 <gdriverUnRegister+0x28>
		driver->vmt->deinit(driver);
 8001922:	4798      	blx	r3

	// Cleanup
	gfxFree(driver);
 8001924:	1c20      	adds	r0, r4, #0
 8001926:	f002 fddb 	bl	80044e0 <gfxFree>
}
 800192a:	bd10      	pop	{r4, pc}
	if (dhead == driver)
		dhead = driver->driverchain;
	else {
		for(pd = dhead; pd->driverchain; pd = pd->driverchain) {
			if (pd->driverchain == driver) {
				pd->driverchain = driver->driverchain;
 800192c:	6803      	ldr	r3, [r0, #0]
 800192e:	6013      	str	r3, [r2, #0]
				if (!pd->driverchain)
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f1      	bne.n	8001918 <gdriverUnRegister+0x1c>
					dtail = pd;
 8001934:	604a      	str	r2, [r1, #4]
 8001936:	e7ef      	b.n	8001918 <gdriverUnRegister+0x1c>
	if (!driver)
		return;

	// Remove it from the list of drivers
	if (dhead == driver)
		dhead = driver->driverchain;
 8001938:	6803      	ldr	r3, [r0, #0]
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e7ec      	b.n	8001918 <gdriverUnRegister+0x1c>
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20000878 	.word	0x20000878

08001944 <_gdriverDeinit>:
// The system initialization.
void _gdriverInit(void) {
}

// The system de-initialization.
void _gdriverDeinit(void) {
 8001944:	b510      	push	{r4, lr}
	while(dhead)
 8001946:	4c05      	ldr	r4, [pc, #20]	; (800195c <_gdriverDeinit+0x18>)
 8001948:	6820      	ldr	r0, [r4, #0]
 800194a:	2800      	cmp	r0, #0
 800194c:	d004      	beq.n	8001958 <_gdriverDeinit+0x14>
		gdriverUnRegister(dhead);
 800194e:	f7ff ffd5 	bl	80018fc <gdriverUnRegister>
void _gdriverInit(void) {
}

// The system de-initialization.
void _gdriverDeinit(void) {
	while(dhead)
 8001952:	6820      	ldr	r0, [r4, #0]
 8001954:	2800      	cmp	r0, #0
 8001956:	d1fa      	bne.n	800194e <_gdriverDeinit+0xa>
		gdriverUnRegister(dhead);
}
 8001958:	bd10      	pop	{r4, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	20000878 	.word	0x20000878

08001960 <gdriverGetInstance>:
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to find the system instance
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <gdriverGetInstance+0x30>)

	// Cleanup
	gfxFree(driver);
}

GDriver *gdriverGetInstance(uint16_t type, unsigned instance) {
 8001962:	b510      	push	{r4, lr}
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to find the system instance
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00e      	beq.n	8001988 <gdriverGetInstance+0x28>
 800196a:	2400      	movs	r4, #0
 800196c:	e002      	b.n	8001974 <gdriverGetInstance+0x14>
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d009      	beq.n	8001988 <gdriverGetInstance+0x28>
		if (pd->vmt->type == type) {
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	4282      	cmp	r2, r0
 800197a:	d1f8      	bne.n	800196e <gdriverGetInstance+0xe>
			if (sinstance == instance)
 800197c:	428c      	cmp	r4, r1
 800197e:	d005      	beq.n	800198c <gdriverGetInstance+0x2c>
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to find the system instance
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001980:	681b      	ldr	r3, [r3, #0]
		if (pd->vmt->type == type) {
			if (sinstance == instance)
				return pd;
			sinstance++;
 8001982:	3401      	adds	r4, #1
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to find the system instance
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f5      	bne.n	8001974 <gdriverGetInstance+0x14>
			if (sinstance == instance)
				return pd;
			sinstance++;
		}
	}
	return 0;
 8001988:	2000      	movs	r0, #0
}
 800198a:	bd10      	pop	{r4, pc}
 800198c:	1c18      	adds	r0, r3, #0
 800198e:	e7fc      	b.n	800198a <gdriverGetInstance+0x2a>
 8001990:	20000878 	.word	0x20000878

08001994 <gdriverInstanceCount>:
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to count the system instances
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <gdriverInstanceCount+0x24>)
		}
	}
	return 0;
}

unsigned gdriverInstanceCount(uint16_t type) {
 8001996:	b530      	push	{r4, r5, lr}
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to count the system instances
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	2100      	movs	r1, #0
 800199c:	2a00      	cmp	r2, #0
 800199e:	d009      	beq.n	80019b4 <gdriverInstanceCount+0x20>
		if (pd->vmt->type == type)
 80019a0:	6853      	ldr	r3, [r2, #4]
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to count the system instances
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 80019a2:	6812      	ldr	r2, [r2, #0]
		if (pd->vmt->type == type)
 80019a4:	881b      	ldrh	r3, [r3, #0]
			sinstance++;
 80019a6:	1a1b      	subs	r3, r3, r0
 80019a8:	425d      	negs	r5, r3
 80019aa:	415d      	adcs	r5, r3
 80019ac:	46ac      	mov	ip, r5
 80019ae:	4461      	add	r1, ip
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to count the system instances
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d1f5      	bne.n	80019a0 <gdriverInstanceCount+0xc>
		if (pd->vmt->type == type)
			sinstance++;
	}
	return sinstance;
}
 80019b4:	1c08      	adds	r0, r1, #0
 80019b6:	bd30      	pop	{r4, r5, pc}
 80019b8:	20000878 	.word	0x20000878

080019bc <gdriverGetNext>:

GDriver *gdriverGetNext(uint16_t type, GDriver *driver) {
	driver = driver ? driver->driverchain : dhead;
 80019bc:	2900      	cmp	r1, #0
 80019be:	d00a      	beq.n	80019d6 <gdriverGetNext+0x1a>
 80019c0:	680b      	ldr	r3, [r1, #0]
 80019c2:	e004      	b.n	80019ce <gdriverGetNext+0x12>

	while(driver && driver->vmt->type != type)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	8812      	ldrh	r2, [r2, #0]
 80019c8:	4282      	cmp	r2, r0
 80019ca:	d002      	beq.n	80019d2 <gdriverGetNext+0x16>
		driver = driver->driverchain;
 80019cc:	681b      	ldr	r3, [r3, #0]
}

GDriver *gdriverGetNext(uint16_t type, GDriver *driver) {
	driver = driver ? driver->driverchain : dhead;

	while(driver && driver->vmt->type != type)
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f8      	bne.n	80019c4 <gdriverGetNext+0x8>
		driver = driver->driverchain;

	return driver;
}
 80019d2:	1c18      	adds	r0, r3, #0
 80019d4:	4770      	bx	lr
	}
	return sinstance;
}

GDriver *gdriverGetNext(uint16_t type, GDriver *driver) {
	driver = driver ? driver->driverchain : dhead;
 80019d6:	4b01      	ldr	r3, [pc, #4]	; (80019dc <gdriverGetNext+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	e7f8      	b.n	80019ce <gdriverGetNext+0x12>
 80019dc:	20000878 	.word	0x20000878

080019e0 <gdriverGetDriverInstanceNumber>:
	GDriver		*pd;
	unsigned	instance;

	// Loop to find the system instance
	instance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <gdriverGetDriverInstanceNumber+0x3c>)
		driver = driver->driverchain;

	return driver;
}

unsigned gdriverGetDriverInstanceNumber(GDriver *driver) {
 80019e2:	b570      	push	{r4, r5, r6, lr}
	GDriver		*pd;
	unsigned	instance;

	// Loop to find the system instance
	instance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d011      	beq.n	8001a0e <gdriverGetDriverInstanceNumber+0x2e>
		if (pd == driver)
 80019ea:	4282      	cmp	r2, r0
 80019ec:	d012      	beq.n	8001a14 <gdriverGetDriverInstanceNumber+0x34>
 80019ee:	6843      	ldr	r3, [r0, #4]
 80019f0:	2100      	movs	r1, #0
 80019f2:	881c      	ldrh	r4, [r3, #0]
 80019f4:	e001      	b.n	80019fa <gdriverGetDriverInstanceNumber+0x1a>
 80019f6:	4290      	cmp	r0, r2
 80019f8:	d00d      	beq.n	8001a16 <gdriverGetDriverInstanceNumber+0x36>
			return instance;
		if (pd->vmt->type == driver->vmt->type)
 80019fa:	6853      	ldr	r3, [r2, #4]
	GDriver		*pd;
	unsigned	instance;

	// Loop to find the system instance
	instance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 80019fc:	6812      	ldr	r2, [r2, #0]
		if (pd == driver)
			return instance;
		if (pd->vmt->type == driver->vmt->type)
 80019fe:	881b      	ldrh	r3, [r3, #0]
			instance++;
 8001a00:	1b1b      	subs	r3, r3, r4
 8001a02:	425e      	negs	r6, r3
 8001a04:	415e      	adcs	r6, r3
 8001a06:	46b4      	mov	ip, r6
 8001a08:	4461      	add	r1, ip
	GDriver		*pd;
	unsigned	instance;

	// Loop to find the system instance
	instance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d1f3      	bne.n	80019f6 <gdriverGetDriverInstanceNumber+0x16>
		if (pd == driver)
			return instance;
		if (pd->vmt->type == driver->vmt->type)
			instance++;
	}
	return (unsigned)-1;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	4240      	negs	r0, r0
}
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
unsigned gdriverGetDriverInstanceNumber(GDriver *driver) {
	GDriver		*pd;
	unsigned	instance;

	// Loop to find the system instance
	instance = 0;
 8001a14:	2100      	movs	r1, #0
	for(pd = dhead; pd; pd = pd->driverchain) {
		if (pd == driver)
			return instance;
 8001a16:	1c08      	adds	r0, r1, #0
 8001a18:	e7fb      	b.n	8001a12 <gdriverGetDriverInstanceNumber+0x32>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	20000878 	.word	0x20000878

08001a20 <hline_clip>:
// Alters:		x,y x1,y1 cx,cy
// Assumes the window covers the screen and a write_stop() will occur later
//	if GDISP_HARDWARE_STREAM_WRITE and GDISP_HARDWARE_STREAM_POS is set.
static void hline_clip(GDisplay *g) {
	// Swap the points if necessary so it always goes from x to x1
	if (g->p.x1 < g->p.x) {
 8001a20:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001a22:	8c02      	ldrh	r2, [r0, #32]

// Parameters:	x,y and x1
// Alters:		x,y x1,y1 cx,cy
// Assumes the window covers the screen and a write_stop() will occur later
//	if GDISP_HARDWARE_STREAM_WRITE and GDISP_HARDWARE_STREAM_POS is set.
static void hline_clip(GDisplay *g) {
 8001a24:	b510      	push	{r4, lr}
	// Swap the points if necessary so it always goes from x to x1
	if (g->p.x1 < g->p.x) {
 8001a26:	b211      	sxth	r1, r2
 8001a28:	b21c      	sxth	r4, r3
 8001a2a:	428c      	cmp	r4, r1
 8001a2c:	da0c      	bge.n	8001a48 <hline_clip+0x28>
		g->p.cx = g->p.x; g->p.x = g->p.x1; g->p.x1 = g->p.cx;
 8001a2e:	1c19      	adds	r1, r3, #0
 8001a30:	8403      	strh	r3, [r0, #32]
 8001a32:	8502      	strh	r2, [r0, #40]	; 0x28
 8001a34:	1c13      	adds	r3, r2, #0
 8001a36:	1c0a      	adds	r2, r1, #0
 8001a38:	3301      	adds	r3, #1
	#if GDISP_HARDWARE_FILLS
		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
			if (gvmt(g)->fill)
		#endif
		{
			g->p.cx = g->p.x1 - g->p.x + 1;
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	8483      	strh	r3, [r0, #36]	; 0x24
			g->p.cy = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	84c3      	strh	r3, [r0, #38]	; 0x26
			gdisp_lld_fill_area(g);
 8001a42:	f001 fde5 	bl	8003610 <gdisp_lld_fill_area>
			for(; g->p.x <= g->p.x1; g->p.x++)
				gdisp_lld_draw_pixel(g);
			return;
		}
	#endif
}
 8001a46:	bd10      	pop	{r4, pc}

	// This is an optimization for the point case. It is only worthwhile however if we
	// have hardware fills or if we support both hardware pixel drawing and hardware streaming
	#if GDISP_HARDWARE_FILLS || (GDISP_HARDWARE_DRAWPIXEL && GDISP_HARDWARE_STREAM_WRITE)
		// Is this a point
		if (g->p.x == g->p.x1) {
 8001a48:	428c      	cmp	r4, r1
 8001a4a:	d1f5      	bne.n	8001a38 <hline_clip+0x18>
	#if GDISP_HARDWARE_DRAWPIXEL
		#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
			if (gvmt(g)->pixel)
		#endif
		{
			gdisp_lld_draw_pixel(g);
 8001a4c:	f001 fed2 	bl	80037f4 <gdisp_lld_draw_pixel>
 8001a50:	e7f9      	b.n	8001a46 <hline_clip+0x26>
 8001a52:	46c0      	nop			; (mov r8, r8)

08001a54 <vline_clip>:

// Parameters:	x,y and y1
// Alters:		x,y x1,y1 cx,cy
static void vline_clip(GDisplay *g) {
	// Swap the points if necessary so it always goes from y to y1
	if (g->p.y1 < g->p.y) {
 8001a54:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a56:	8c42      	ldrh	r2, [r0, #34]	; 0x22
	#endif
}

// Parameters:	x,y and y1
// Alters:		x,y x1,y1 cx,cy
static void vline_clip(GDisplay *g) {
 8001a58:	b510      	push	{r4, lr}
	// Swap the points if necessary so it always goes from y to y1
	if (g->p.y1 < g->p.y) {
 8001a5a:	b211      	sxth	r1, r2
 8001a5c:	b21c      	sxth	r4, r3
 8001a5e:	428c      	cmp	r4, r1
 8001a60:	da0c      	bge.n	8001a7c <vline_clip+0x28>
		g->p.cy = g->p.y; g->p.y = g->p.y1; g->p.y1 = g->p.cy;
 8001a62:	1c19      	adds	r1, r3, #0
 8001a64:	8443      	strh	r3, [r0, #34]	; 0x22
 8001a66:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001a68:	1c13      	adds	r3, r2, #0
 8001a6a:	1c0a      	adds	r2, r1, #0
 8001a6c:	3301      	adds	r3, #1
				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
					gdisp_lld_write_stop(g);
					g->flags &= ~GDISP_FLG_SCRSTREAM;
				}
			#endif
			g->p.cy = g->p.y1 - g->p.y + 1;
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	84c3      	strh	r3, [r0, #38]	; 0x26
			g->p.cx = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	8483      	strh	r3, [r0, #36]	; 0x24
			gdisp_lld_fill_area(g);
 8001a76:	f001 fdcb 	bl	8003610 <gdisp_lld_fill_area>
			for(; g->p.y <= g->p.y1; g->p.y++)
				gdisp_lld_draw_pixel(g);
			return;
		}
	#endif
}
 8001a7a:	bd10      	pop	{r4, pc}

	// This is an optimization for the point case. It is only worthwhile however if we
	// have hardware fills or if we support both hardware pixel drawing and hardware streaming
	#if GDISP_HARDWARE_FILLS || (GDISP_HARDWARE_DRAWPIXEL && GDISP_HARDWARE_STREAM_WRITE) || (GDISP_HARDWARE_STREAM_POS && GDISP_HARDWARE_STREAM_WRITE)
		// Is this a point
		if (g->p.y == g->p.y1) {
 8001a7c:	428c      	cmp	r4, r1
 8001a7e:	d1f5      	bne.n	8001a6c <vline_clip+0x18>
	#if GDISP_HARDWARE_DRAWPIXEL
		#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
			if (gvmt(g)->pixel)
		#endif
		{
			gdisp_lld_draw_pixel(g);
 8001a80:	f001 feb8 	bl	80037f4 <gdisp_lld_draw_pixel>
 8001a84:	e7f9      	b.n	8001a7a <vline_clip+0x26>
 8001a86:	46c0      	nop			; (mov r8, r8)

08001a88 <drawcharglyph>:
	#else
		#define fillcharline	drawcharline
	#endif

	/* Callback to render characters. */
	static uint8_t drawcharglyph(int16_t x, int16_t y, mf_char ch, void *state) {
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	1c06      	adds	r6, r0, #0
 8001a8c:	1c0d      	adds	r5, r1, #0
 8001a8e:	1c14      	adds	r4, r2, #0
		#define GD	((GDisplay *)state)
			return mf_render_character(GD->t.font, x, y, ch, drawcharline, state);
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <drawcharglyph+0x20>)
	#else
		#define fillcharline	drawcharline
	#endif

	/* Callback to render characters. */
	static uint8_t drawcharglyph(int16_t x, int16_t y, mf_char ch, void *state) {
 8001a92:	b082      	sub	sp, #8
		#define GD	((GDisplay *)state)
			return mf_render_character(GD->t.font, x, y, ch, drawcharline, state);
 8001a94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a96:	1c31      	adds	r1, r6, #0
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	1c2a      	adds	r2, r5, #0
 8001a9e:	1c23      	adds	r3, r4, #0
 8001aa0:	f001 faae 	bl	8003000 <mf_render_character>
		#undef GD
	}
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
 8001aa8:	08001ad1 	.word	0x08001ad1

08001aac <fillcharglyph>:

	/* Callback to render characters. */
	static uint8_t fillcharglyph(int16_t x, int16_t y, mf_char ch, void *state) {
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	1c06      	adds	r6, r0, #0
 8001ab0:	1c0d      	adds	r5, r1, #0
 8001ab2:	1c14      	adds	r4, r2, #0
		#define GD	((GDisplay *)state)
			return mf_render_character(GD->t.font, x, y, ch, fillcharline, state);
 8001ab4:	4a05      	ldr	r2, [pc, #20]	; (8001acc <fillcharglyph+0x20>)
			return mf_render_character(GD->t.font, x, y, ch, drawcharline, state);
		#undef GD
	}

	/* Callback to render characters. */
	static uint8_t fillcharglyph(int16_t x, int16_t y, mf_char ch, void *state) {
 8001ab6:	b082      	sub	sp, #8
		#define GD	((GDisplay *)state)
			return mf_render_character(GD->t.font, x, y, ch, fillcharline, state);
 8001ab8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001aba:	1c31      	adds	r1, r6, #0
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	1c2a      	adds	r2, r5, #0
 8001ac2:	1c23      	adds	r3, r4, #0
 8001ac4:	f001 fa9c 	bl	8003000 <mf_render_character>
		#undef GD
	}
 8001ac8:	b002      	add	sp, #8
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
 8001acc:	08001ad1 	.word	0x08001ad1

08001ad0 <drawcharline>:
				}
			}
			#undef GD
		}
	#else
		static void drawcharline(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state) {
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	4647      	mov	r7, r8
			#define GD	((GDisplay *)state)
			if (y < GD->t.clipy0 || y >= GD->t.clipy1 || x+count <= GD->t.clipx0 || x >= GD->t.clipx1)
 8001ad4:	2540      	movs	r5, #64	; 0x40
				}
			}
			#undef GD
		}
	#else
		static void drawcharline(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state) {
 8001ad6:	b480      	push	{r7}
 8001ad8:	9c06      	ldr	r4, [sp, #24]
			#define GD	((GDisplay *)state)
			if (y < GD->t.clipy0 || y >= GD->t.clipy1 || x+count <= GD->t.clipx0 || x >= GD->t.clipx1)
 8001ada:	5f65      	ldrsh	r5, [r4, r5]
 8001adc:	428d      	cmp	r5, r1
 8001ade:	dc29      	bgt.n	8001b34 <drawcharline+0x64>
 8001ae0:	2544      	movs	r5, #68	; 0x44
 8001ae2:	5f65      	ldrsh	r5, [r4, r5]
 8001ae4:	428d      	cmp	r5, r1
 8001ae6:	dd25      	ble.n	8001b34 <drawcharline+0x64>
 8001ae8:	1885      	adds	r5, r0, r2
 8001aea:	46a8      	mov	r8, r5
 8001aec:	263e      	movs	r6, #62	; 0x3e
 8001aee:	5fa5      	ldrsh	r5, [r4, r6]
 8001af0:	45a8      	cmp	r8, r5
 8001af2:	dd1f      	ble.n	8001b34 <drawcharline+0x64>
 8001af4:	2742      	movs	r7, #66	; 0x42
 8001af6:	5be7      	ldrh	r7, [r4, r7]
 8001af8:	b23e      	sxth	r6, r7
 8001afa:	46b4      	mov	ip, r6
 8001afc:	42b0      	cmp	r0, r6
 8001afe:	da19      	bge.n	8001b34 <drawcharline+0x64>
				return;
			if (x < GD->t.clipx0) {
 8001b00:	42a8      	cmp	r0, r5
 8001b02:	da05      	bge.n	8001b10 <drawcharline+0x40>
 8001b04:	1b52      	subs	r2, r2, r5
				count -= GD->t.clipx0 - x;
 8001b06:	1810      	adds	r0, r2, r0
 8001b08:	b2c2      	uxtb	r2, r0
 8001b0a:	18a8      	adds	r0, r5, r2
 8001b0c:	4680      	mov	r8, r0
 8001b0e:	1c28      	adds	r0, r5, #0
				x = GD->t.clipx0;
			}
			if (x+count > GD->t.clipx1)
 8001b10:	45c4      	cmp	ip, r8
 8001b12:	da01      	bge.n	8001b18 <drawcharline+0x48>
				count = GD->t.clipx1 - x;
 8001b14:	1a3a      	subs	r2, r7, r0
 8001b16:	b2d2      	uxtb	r2, r2
			if (alpha > 0x80) {			// A best approximation when using anti-aliased fonts but we can't actually draw them anti-aliased
 8001b18:	2b80      	cmp	r3, #128	; 0x80
 8001b1a:	d90b      	bls.n	8001b34 <drawcharline+0x64>
				GD->p.x = x; GD->p.y = y; GD->p.x1 = x+count-1; GD->p.color = GD->t.color;
 8001b1c:	233c      	movs	r3, #60	; 0x3c
 8001b1e:	8420      	strh	r0, [r4, #32]
 8001b20:	3801      	subs	r0, #1
 8001b22:	1880      	adds	r0, r0, r2
 8001b24:	8520      	strh	r0, [r4, #40]	; 0x28
 8001b26:	8461      	strh	r1, [r4, #34]	; 0x22
 8001b28:	5ce2      	ldrb	r2, [r4, r3]
 8001b2a:	3b0c      	subs	r3, #12
 8001b2c:	54e2      	strb	r2, [r4, r3]
				hline_clip(GD);
 8001b2e:	1c20      	adds	r0, r4, #0
 8001b30:	f7ff ff76 	bl	8001a20 <hline_clip>
			}
			#undef GD
		}
 8001b34:	bc04      	pop	{r2}
 8001b36:	4690      	mov	r8, r2
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)

08001b3c <_gdispDeinit>:
}

void _gdispDeinit(void)
{
	/* ToDo */
}
 8001b3c:	4770      	bx	lr
 8001b3e:	46c0      	nop			; (mov r8, r8)

08001b40 <_gdispInitDriver>:

bool_t _gdispInitDriver(GDriver *g, void *param, unsigned driverinstance, unsigned systeminstance) {
 8001b40:	b508      	push	{r3, lr}
	#define		gd		((GDisplay *)g)
	bool_t		ret;

	// Intialise fields
	gd->systemdisplay = systeminstance;
 8001b42:	7703      	strb	r3, [r0, #28]
	gd->controllerdisplay = driverinstance;
	gd->flags = 0;
 8001b44:	2300      	movs	r3, #0
	#define		gd		((GDisplay *)g)
	bool_t		ret;

	// Intialise fields
	gd->systemdisplay = systeminstance;
	gd->controllerdisplay = driverinstance;
 8001b46:	7742      	strb	r2, [r0, #29]
	gd->flags = 0;
 8001b48:	83c3      	strh	r3, [r0, #30]
	gd->priv = param;
 8001b4a:	6141      	str	r1, [r0, #20]
	MUTEX_INIT(gd);

	// Call the driver init
	MUTEX_ENTER(gd);
	ret = gdisp_lld_init(gd);
 8001b4c:	f001 ff16 	bl	800397c <gdisp_lld_init>
	MUTEX_EXIT(gd);
	return ret;

	#undef gd
}
 8001b50:	bd08      	pop	{r3, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)

08001b54 <_gdispDeInitDriver>:
		GDISP = gd;

	#undef gd
}

void _gdispDeInitDriver(GDriver *g) {
 8001b54:	b510      	push	{r4, lr}
	#define		gd		((GDisplay *)g)

	if (GDISP == gd)
 8001b56:	4c05      	ldr	r4, [pc, #20]	; (8001b6c <_gdispDeInitDriver+0x18>)
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	4283      	cmp	r3, r0
 8001b5c:	d000      	beq.n	8001b60 <_gdispDeInitDriver+0xc>
		}
	#endif
	MUTEX_DEINIT(gd);

	#undef gd
}
 8001b5e:	bd10      	pop	{r4, pc}

void _gdispDeInitDriver(GDriver *g) {
	#define		gd		((GDisplay *)g)

	if (GDISP == gd)
		GDISP = (GDisplay *)gdriverGetInstance(GDRIVER_TYPE_DISPLAY, 0);
 8001b60:	2067      	movs	r0, #103	; 0x67
 8001b62:	2100      	movs	r1, #0
 8001b64:	f7ff fefc 	bl	8001960 <gdriverGetInstance>
 8001b68:	6020      	str	r0, [r4, #0]
 8001b6a:	e7f8      	b.n	8001b5e <_gdispDeInitDriver+0xa>
 8001b6c:	20000994 	.word	0x20000994

08001b70 <gdispGetDisplay>:
	MUTEX_DEINIT(gd);

	#undef gd
}

GDisplay *gdispGetDisplay(unsigned display) {
 8001b70:	b508      	push	{r3, lr}
 8001b72:	1c01      	adds	r1, r0, #0
	return (GDisplay *)gdriverGetInstance(GDRIVER_TYPE_DISPLAY, display);
 8001b74:	2067      	movs	r0, #103	; 0x67
 8001b76:	f7ff fef3 	bl	8001960 <gdriverGetInstance>
}
 8001b7a:	bd08      	pop	{r3, pc}

08001b7c <gdispSetDisplay>:

void gdispSetDisplay(GDisplay *g) {
	if (g) GDISP = g;
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d001      	beq.n	8001b84 <gdispSetDisplay+0x8>
 8001b80:	4b01      	ldr	r3, [pc, #4]	; (8001b88 <gdispSetDisplay+0xc>)
 8001b82:	6018      	str	r0, [r3, #0]
}
 8001b84:	4770      	bx	lr
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	20000994 	.word	0x20000994

08001b8c <gdispGetDisplayCount>:

unsigned gdispGetDisplayCount(void) {
 8001b8c:	b508      	push	{r3, lr}
	return gdriverInstanceCount(GDRIVER_TYPE_DISPLAY);
 8001b8e:	2067      	movs	r0, #103	; 0x67
 8001b90:	f7ff ff00 	bl	8001994 <gdriverInstanceCount>
}
 8001b94:	bd08      	pop	{r3, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)

08001b98 <gdispGGetWidth>:

coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 8001b98:	2308      	movs	r3, #8
 8001b9a:	5ec0      	ldrsh	r0, [r0, r3]
 8001b9c:	4770      	bx	lr
 8001b9e:	46c0      	nop			; (mov r8, r8)

08001ba0 <gdispGGetHeight>:
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	5ec0      	ldrsh	r0, [r0, r3]
 8001ba4:	4770      	bx	lr
 8001ba6:	46c0      	nop			; (mov r8, r8)

08001ba8 <gdispGGetPowerMode>:
powermode_t gdispGGetPowerMode(GDisplay *g)		{ return g->g.Powermode; }
 8001ba8:	7b80      	ldrb	r0, [r0, #14]
 8001baa:	4770      	bx	lr

08001bac <gdispGGetOrientation>:
orientation_t gdispGGetOrientation(GDisplay *g)	{ return g->g.Orientation; }
 8001bac:	8980      	ldrh	r0, [r0, #12]
 8001bae:	4770      	bx	lr

08001bb0 <gdispGGetBacklight>:
uint8_t gdispGGetBacklight(GDisplay *g)			{ return g->g.Backlight; }
 8001bb0:	7bc0      	ldrb	r0, [r0, #15]
 8001bb2:	4770      	bx	lr

08001bb4 <gdispGGetContrast>:
uint8_t gdispGGetContrast(GDisplay *g)			{ return g->g.Contrast; }
 8001bb4:	7c00      	ldrb	r0, [r0, #16]
 8001bb6:	4770      	bx	lr

08001bb8 <gdispGFlush>:

void gdispGFlush(GDisplay *g) {
 8001bb8:	b508      	push	{r3, lr}
		#if GDISP_HARDWARE_FLUSH == HARDWARE_AUTODETECT
			if (gvmt(g)->flush)
		#endif
		{
			MUTEX_ENTER(g);
			gdisp_lld_flush(g);
 8001bba:	f001 fe95 	bl	80038e8 <gdisp_lld_flush>
			MUTEX_EXIT(g);
		}
	#else
		(void) g;
	#endif
}
 8001bbe:	bd08      	pop	{r3, pc}

08001bc0 <gdispGDrawPixel>:
			}
		#endif
	}
#endif

void gdispGDrawPixel(GDisplay *g, coord_t x, coord_t y, color_t color) {
 8001bc0:	b510      	push	{r4, lr}
	MUTEX_ENTER(g);
	g->p.x		= x;
	g->p.y		= y;
 8001bc2:	8442      	strh	r2, [r0, #34]	; 0x22
	g->p.color	= color;
 8001bc4:	2230      	movs	r2, #48	; 0x30
			}
		#endif
	}
#endif

void gdispGDrawPixel(GDisplay *g, coord_t x, coord_t y, color_t color) {
 8001bc6:	1c04      	adds	r4, r0, #0
	MUTEX_ENTER(g);
	g->p.x		= x;
 8001bc8:	8401      	strh	r1, [r0, #32]
	g->p.y		= y;
	g->p.color	= color;
 8001bca:	5483      	strb	r3, [r0, r2]
	#if GDISP_HARDWARE_DRAWPIXEL
		#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
			if (gvmt(g)->pixel)
		#endif
		{
			gdisp_lld_draw_pixel(g);
 8001bcc:	f001 fe12 	bl	80037f4 <gdisp_lld_draw_pixel>
	MUTEX_ENTER(g);
	g->p.x		= x;
	g->p.y		= y;
	g->p.color	= color;
	drawpixel_clip(g);
	autoflush(g);
 8001bd0:	1c20      	adds	r0, r4, #0
 8001bd2:	f001 fe89 	bl	80038e8 <gdisp_lld_flush>
	MUTEX_EXIT(g);
}
 8001bd6:	bd10      	pop	{r4, pc}

08001bd8 <gdispGDrawLine>:

void gdispGDrawLine(GDisplay *g, coord_t x0, coord_t y0, coord_t x1, coord_t y1, color_t color) {
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	464d      	mov	r5, r9
 8001bdc:	4656      	mov	r6, sl
 8001bde:	4644      	mov	r4, r8
 8001be0:	465f      	mov	r7, fp
 8001be2:	b4f0      	push	{r4, r5, r6, r7}
 8001be4:	1c04      	adds	r4, r0, #0
 8001be6:	a80a      	add	r0, sp, #40	; 0x28
 8001be8:	2500      	movs	r5, #0
 8001bea:	5f40      	ldrsh	r0, [r0, r5]
 8001bec:	ad0b      	add	r5, sp, #44	; 0x2c
 8001bee:	782e      	ldrb	r6, [r5, #0]
	MUTEX_ENTER(g);
	g->p.x = x0;
	g->p.y = y0;
	g->p.x1 = x1;
	g->p.y1 = y1;
	g->p.color = color;
 8001bf0:	2530      	movs	r5, #48	; 0x30
	MUTEX_EXIT(g);
}

void gdispGDrawLine(GDisplay *g, coord_t x0, coord_t y0, coord_t x1, coord_t y1, color_t color) {
	MUTEX_ENTER(g);
	g->p.x = x0;
 8001bf2:	8421      	strh	r1, [r4, #32]
	g->p.y = y0;
 8001bf4:	8462      	strh	r2, [r4, #34]	; 0x22
	g->p.x1 = x1;
 8001bf6:	8523      	strh	r3, [r4, #40]	; 0x28
	g->p.y1 = y1;
 8001bf8:	8560      	strh	r0, [r4, #42]	; 0x2a
	g->p.color = color;
 8001bfa:	5566      	strb	r6, [r4, r5]
	int16_t dy, dx;
	int16_t addx, addy;
	int16_t P, diff, i;

	// Is this a horizontal line (or a point)
	if (g->p.y == g->p.y1) {
 8001bfc:	4282      	cmp	r2, r0
 8001bfe:	d100      	bne.n	8001c02 <gdispGDrawLine+0x2a>
 8001c00:	e07c      	b.n	8001cfc <gdispGDrawLine+0x124>
		hline_clip(g);
		return;
	}

	// Is this a vertical line (or a point)
	if (g->p.x == g->p.x1) {
 8001c02:	4299      	cmp	r1, r3
 8001c04:	d100      	bne.n	8001c08 <gdispGDrawLine+0x30>
 8001c06:	e07d      	b.n	8001d04 <gdispGDrawLine+0x12c>
	//	This should be replaced with fixed point slope based line drawing
	//	which is more efficient on modern processors as it branches less.
	//	When clipping is needed, all the clipping could also be done up front
	//	instead of on each pixel.

	if (g->p.x1 >= g->p.x) {
 8001c08:	dd42      	ble.n	8001c90 <gdispGDrawLine+0xb8>
		dx = g->p.x1 - g->p.x;
		addx = 1;
	} else {
		dx = g->p.x - g->p.x1;
 8001c0a:	1ac9      	subs	r1, r1, r3
		addx = -1;
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <gdispGDrawLine+0x134>)

	if (g->p.x1 >= g->p.x) {
		dx = g->p.x1 - g->p.x;
		addx = 1;
	} else {
		dx = g->p.x - g->p.x1;
 8001c0e:	b289      	uxth	r1, r1
		addx = -1;
 8001c10:	4698      	mov	r8, r3
	}
	if (g->p.y1 >= g->p.y) {
 8001c12:	4282      	cmp	r2, r0
 8001c14:	dc42      	bgt.n	8001c9c <gdispGDrawLine+0xc4>
		dy = g->p.y1 - g->p.y;
		addy = 1;
 8001c16:	2301      	movs	r3, #1
	} else {
		dx = g->p.x - g->p.x1;
		addx = -1;
	}
	if (g->p.y1 >= g->p.y) {
		dy = g->p.y1 - g->p.y;
 8001c18:	1a82      	subs	r2, r0, r2
 8001c1a:	b292      	uxth	r2, r2
		addy = 1;
 8001c1c:	4699      	mov	r9, r3
	} else {
		dy = g->p.y - g->p.y1;
		addy = -1;
	}

	if (dx >= dy) {
 8001c1e:	b20f      	sxth	r7, r1
 8001c20:	b213      	sxth	r3, r2
 8001c22:	469a      	mov	sl, r3
 8001c24:	429f      	cmp	r7, r3
 8001c26:	db42      	blt.n	8001cae <gdispGDrawLine+0xd6>
		dy <<= 1;
 8001c28:	005b      	lsls	r3, r3, #1
		P = dy - dx;
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	b289      	uxth	r1, r1
 8001c2e:	469a      	mov	sl, r3
 8001c30:	1a5b      	subs	r3, r3, r1
 8001c32:	b29b      	uxth	r3, r3
		diff = P - dx;
 8001c34:	1a59      	subs	r1, r3, r1
		addy = -1;
	}

	if (dx >= dy) {
		dy <<= 1;
		P = dy - dx;
 8001c36:	b29e      	uxth	r6, r3
		diff = P - dx;
 8001c38:	b28b      	uxth	r3, r1
 8001c3a:	469b      	mov	fp, r3

		for(i=0; i<=dx; ++i) {
 8001c3c:	2500      	movs	r5, #0
 8001c3e:	2f00      	cmp	r7, #0
 8001c40:	da0d      	bge.n	8001c5e <gdispGDrawLine+0x86>
 8001c42:	e01c      	b.n	8001c7e <gdispGDrawLine+0xa6>
			if (P < 0) {
				P  += dy;
				g->p.x += addx;
			} else {
				P  += diff;
				g->p.x += addx;
 8001c44:	8c23      	ldrh	r3, [r4, #32]
 8001c46:	3501      	adds	r5, #1
 8001c48:	4443      	add	r3, r8
 8001c4a:	8423      	strh	r3, [r4, #32]
				g->p.y += addy;
 8001c4c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8001c4e:	b2ad      	uxth	r5, r5
 8001c50:	444b      	add	r3, r9
			drawpixel_clip(g);
			if (P < 0) {
				P  += dy;
				g->p.x += addx;
			} else {
				P  += diff;
 8001c52:	445e      	add	r6, fp
				g->p.x += addx;
				g->p.y += addy;
 8001c54:	8463      	strh	r3, [r4, #34]	; 0x22
	if (dx >= dy) {
		dy <<= 1;
		P = dy - dx;
		diff = P - dx;

		for(i=0; i<=dx; ++i) {
 8001c56:	b22b      	sxth	r3, r5
			drawpixel_clip(g);
			if (P < 0) {
				P  += dy;
				g->p.x += addx;
			} else {
				P  += diff;
 8001c58:	b2b6      	uxth	r6, r6
	if (dx >= dy) {
		dy <<= 1;
		P = dy - dx;
		diff = P - dx;

		for(i=0; i<=dx; ++i) {
 8001c5a:	42bb      	cmp	r3, r7
 8001c5c:	dc0f      	bgt.n	8001c7e <gdispGDrawLine+0xa6>
	#if GDISP_HARDWARE_DRAWPIXEL
		#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
			if (gvmt(g)->pixel)
		#endif
		{
			gdisp_lld_draw_pixel(g);
 8001c5e:	1c20      	adds	r0, r4, #0
 8001c60:	f001 fdc8 	bl	80037f4 <gdisp_lld_draw_pixel>
		P = dy - dx;
		diff = P - dx;

		for(i=0; i<=dx; ++i) {
			drawpixel_clip(g);
			if (P < 0) {
 8001c64:	b233      	sxth	r3, r6
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	daec      	bge.n	8001c44 <gdispGDrawLine+0x6c>
				P  += dy;
				g->p.x += addx;
 8001c6a:	8c23      	ldrh	r3, [r4, #32]
 8001c6c:	3501      	adds	r5, #1
 8001c6e:	4443      	add	r3, r8
 8001c70:	b2ad      	uxth	r5, r5
		diff = P - dx;

		for(i=0; i<=dx; ++i) {
			drawpixel_clip(g);
			if (P < 0) {
				P  += dy;
 8001c72:	4456      	add	r6, sl
				g->p.x += addx;
 8001c74:	8423      	strh	r3, [r4, #32]
	if (dx >= dy) {
		dy <<= 1;
		P = dy - dx;
		diff = P - dx;

		for(i=0; i<=dx; ++i) {
 8001c76:	b22b      	sxth	r3, r5
			drawpixel_clip(g);
			if (P < 0) {
				P  += dy;
 8001c78:	b2b6      	uxth	r6, r6
	if (dx >= dy) {
		dy <<= 1;
		P = dy - dx;
		diff = P - dx;

		for(i=0; i<=dx; ++i) {
 8001c7a:	42bb      	cmp	r3, r7
 8001c7c:	ddef      	ble.n	8001c5e <gdispGDrawLine+0x86>
	g->p.y = y0;
	g->p.x1 = x1;
	g->p.y1 = y1;
	g->p.color = color;
	line_clip(g);
	autoflush(g);
 8001c7e:	1c20      	adds	r0, r4, #0
 8001c80:	f001 fe32 	bl	80038e8 <gdisp_lld_flush>
	MUTEX_EXIT(g);
}
 8001c84:	bc3c      	pop	{r2, r3, r4, r5}
 8001c86:	4690      	mov	r8, r2
 8001c88:	4699      	mov	r9, r3
 8001c8a:	46a2      	mov	sl, r4
 8001c8c:	46ab      	mov	fp, r5
 8001c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	//	which is more efficient on modern processors as it branches less.
	//	When clipping is needed, all the clipping could also be done up front
	//	instead of on each pixel.

	if (g->p.x1 >= g->p.x) {
		dx = g->p.x1 - g->p.x;
 8001c90:	1a59      	subs	r1, r3, r1
		addx = 1;
 8001c92:	2301      	movs	r3, #1
	//	which is more efficient on modern processors as it branches less.
	//	When clipping is needed, all the clipping could also be done up front
	//	instead of on each pixel.

	if (g->p.x1 >= g->p.x) {
		dx = g->p.x1 - g->p.x;
 8001c94:	b289      	uxth	r1, r1
		addx = 1;
 8001c96:	4698      	mov	r8, r3
	} else {
		dx = g->p.x - g->p.x1;
		addx = -1;
	}
	if (g->p.y1 >= g->p.y) {
 8001c98:	4282      	cmp	r2, r0
 8001c9a:	ddbc      	ble.n	8001c16 <gdispGDrawLine+0x3e>
		dy = g->p.y1 - g->p.y;
		addy = 1;
	} else {
		dy = g->p.y - g->p.y1;
		addy = -1;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <gdispGDrawLine+0x134>)
	}
	if (g->p.y1 >= g->p.y) {
		dy = g->p.y1 - g->p.y;
		addy = 1;
	} else {
		dy = g->p.y - g->p.y1;
 8001c9e:	1a12      	subs	r2, r2, r0
 8001ca0:	b292      	uxth	r2, r2
		addy = -1;
 8001ca2:	4699      	mov	r9, r3
	}

	if (dx >= dy) {
 8001ca4:	b20f      	sxth	r7, r1
 8001ca6:	b213      	sxth	r3, r2
 8001ca8:	469a      	mov	sl, r3
 8001caa:	429f      	cmp	r7, r3
 8001cac:	dabc      	bge.n	8001c28 <gdispGDrawLine+0x50>
				g->p.x += addx;
				g->p.y += addy;
			}
		}
	} else {
		dx <<= 1;
 8001cae:	007f      	lsls	r7, r7, #1
		P = dx - dy;
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	b2bf      	uxth	r7, r7
 8001cb4:	1abb      	subs	r3, r7, r2
 8001cb6:	b29b      	uxth	r3, r3
		diff = P - dy;
 8001cb8:	1a9a      	subs	r2, r3, r2
				g->p.y += addy;
			}
		}
	} else {
		dx <<= 1;
		P = dx - dy;
 8001cba:	b29d      	uxth	r5, r3
		diff = P - dy;
 8001cbc:	b293      	uxth	r3, r2
 8001cbe:	469b      	mov	fp, r3

		for(i=0; i<=dy; ++i) {
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	dbdb      	blt.n	8001c7e <gdispGDrawLine+0xa6>
 8001cc6:	2600      	movs	r6, #0
 8001cc8:	e00c      	b.n	8001ce4 <gdispGDrawLine+0x10c>
			if (P < 0) {
				P  += dx;
				g->p.y += addy;
			} else {
				P  += diff;
				g->p.x += addx;
 8001cca:	8c23      	ldrh	r3, [r4, #32]
			drawpixel_clip(g);
			if (P < 0) {
				P  += dx;
				g->p.y += addy;
			} else {
				P  += diff;
 8001ccc:	445d      	add	r5, fp
				g->p.x += addx;
 8001cce:	4443      	add	r3, r8
 8001cd0:	8423      	strh	r3, [r4, #32]
				g->p.y += addy;
 8001cd2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
			drawpixel_clip(g);
			if (P < 0) {
				P  += dx;
				g->p.y += addy;
			} else {
				P  += diff;
 8001cd4:	b2ad      	uxth	r5, r5
				g->p.x += addx;
				g->p.y += addy;
 8001cd6:	444b      	add	r3, r9
 8001cd8:	8463      	strh	r3, [r4, #34]	; 0x22
 8001cda:	3601      	adds	r6, #1
 8001cdc:	b2b6      	uxth	r6, r6
	} else {
		dx <<= 1;
		P = dx - dy;
		diff = P - dy;

		for(i=0; i<=dy; ++i) {
 8001cde:	b233      	sxth	r3, r6
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	dbcc      	blt.n	8001c7e <gdispGDrawLine+0xa6>
	#if GDISP_HARDWARE_DRAWPIXEL
		#if GDISP_HARDWARE_DRAWPIXEL == HARDWARE_AUTODETECT
			if (gvmt(g)->pixel)
		#endif
		{
			gdisp_lld_draw_pixel(g);
 8001ce4:	1c20      	adds	r0, r4, #0
 8001ce6:	f001 fd85 	bl	80037f4 <gdisp_lld_draw_pixel>
		P = dx - dy;
		diff = P - dy;

		for(i=0; i<=dy; ++i) {
			drawpixel_clip(g);
			if (P < 0) {
 8001cea:	b22b      	sxth	r3, r5
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	daec      	bge.n	8001cca <gdispGDrawLine+0xf2>
				P  += dx;
				g->p.y += addy;
 8001cf0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		diff = P - dy;

		for(i=0; i<=dy; ++i) {
			drawpixel_clip(g);
			if (P < 0) {
				P  += dx;
 8001cf2:	197d      	adds	r5, r7, r5
				g->p.y += addy;
 8001cf4:	444b      	add	r3, r9
		diff = P - dy;

		for(i=0; i<=dy; ++i) {
			drawpixel_clip(g);
			if (P < 0) {
				P  += dx;
 8001cf6:	b2ad      	uxth	r5, r5
				g->p.y += addy;
 8001cf8:	8463      	strh	r3, [r4, #34]	; 0x22
 8001cfa:	e7ee      	b.n	8001cda <gdispGDrawLine+0x102>
	int16_t addx, addy;
	int16_t P, diff, i;

	// Is this a horizontal line (or a point)
	if (g->p.y == g->p.y1) {
		hline_clip(g);
 8001cfc:	1c20      	adds	r0, r4, #0
 8001cfe:	f7ff fe8f 	bl	8001a20 <hline_clip>
 8001d02:	e7bc      	b.n	8001c7e <gdispGDrawLine+0xa6>
		return;
	}

	// Is this a vertical line (or a point)
	if (g->p.x == g->p.x1) {
		vline_clip(g);
 8001d04:	1c20      	adds	r0, r4, #0
 8001d06:	f7ff fea5 	bl	8001a54 <vline_clip>
 8001d0a:	e7b8      	b.n	8001c7e <gdispGDrawLine+0xa6>
 8001d0c:	0000ffff 	.word	0x0000ffff

08001d10 <gdispGClear>:
	#if GDISP_HARDWARE_CLEARS != GFXON && GDISP_HARDWARE_FILLS
		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
			if (gvmt(g)->fill)
		#endif
		{
			g->p.x = g->p.y = 0;
 8001d10:	2300      	movs	r3, #0
	line_clip(g);
	autoflush(g);
	MUTEX_EXIT(g);
}

void gdispGClear(GDisplay *g, color_t color) {
 8001d12:	b510      	push	{r4, lr}
	#if GDISP_HARDWARE_CLEARS != GFXON && GDISP_HARDWARE_FILLS
		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
			if (gvmt(g)->fill)
		#endif
		{
			g->p.x = g->p.y = 0;
 8001d14:	8443      	strh	r3, [r0, #34]	; 0x22
 8001d16:	8403      	strh	r3, [r0, #32]
			g->p.cx = g->g.Width;
 8001d18:	8903      	ldrh	r3, [r0, #8]
	line_clip(g);
	autoflush(g);
	MUTEX_EXIT(g);
}

void gdispGClear(GDisplay *g, color_t color) {
 8001d1a:	1c04      	adds	r4, r0, #0
		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
			if (gvmt(g)->fill)
		#endif
		{
			g->p.x = g->p.y = 0;
			g->p.cx = g->g.Width;
 8001d1c:	8483      	strh	r3, [r0, #36]	; 0x24
			g->p.cy = g->g.Height;
 8001d1e:	8943      	ldrh	r3, [r0, #10]
 8001d20:	84c3      	strh	r3, [r0, #38]	; 0x26
			g->p.color = color;
 8001d22:	2330      	movs	r3, #48	; 0x30
 8001d24:	54c1      	strb	r1, [r0, r3]
			gdisp_lld_fill_area(g);
 8001d26:	f001 fc73 	bl	8003610 <gdisp_lld_fill_area>
			autoflush_stopdone(g);
 8001d2a:	1c20      	adds	r0, r4, #0
 8001d2c:	f001 fddc 	bl	80038e8 <gdisp_lld_flush>
			autoflush_stopdone(g);
			MUTEX_EXIT(g);
			return;
		}
	#endif
}
 8001d30:	bd10      	pop	{r4, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)

08001d34 <_gdispInit>:
		}
	#else
		{
			extern const GDISPVMT const		GDISPVMT_OnlyOne[1];

			if (!(GDISPVMT_OnlyOne->d.flags & GDISP_VFLG_DYNAMICONLY))
 8001d34:	4811      	ldr	r0, [pc, #68]	; (8001d7c <_gdispInit+0x48>)
/*===========================================================================*/
/* Driver exported functions.                                                */
/*===========================================================================*/

void _gdispInit(void)
{
 8001d36:	b510      	push	{r4, lr}
		}
	#else
		{
			extern const GDISPVMT const		GDISPVMT_OnlyOne[1];

			if (!(GDISPVMT_OnlyOne->d.flags & GDISP_VFLG_DYNAMICONLY))
 8001d38:	8843      	ldrh	r3, [r0, #2]
 8001d3a:	07db      	lsls	r3, r3, #31
 8001d3c:	d51a      	bpl.n	8001d74 <_gdispInit+0x40>
	// Re-clear the display after the timeout if we added the logo
	#if GDISP_STARTUP_LOGO_TIMEOUT > 0
		{
			GDisplay	*g;

			gfxSleepMilliseconds(GDISP_STARTUP_LOGO_TIMEOUT);
 8001d3e:	20fa      	movs	r0, #250	; 0xfa
 8001d40:	0080      	lsls	r0, r0, #2
 8001d42:	f002 fb35 	bl	80043b0 <gfxSleepMilliseconds>

			for(g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, 0); g; g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, (GDriver *)g)) {
 8001d46:	2067      	movs	r0, #103	; 0x67
 8001d48:	2100      	movs	r1, #0
 8001d4a:	f7ff fe37 	bl	80019bc <gdriverGetNext>
 8001d4e:	1e04      	subs	r4, r0, #0
 8001d50:	d00c      	beq.n	8001d6c <_gdispInit+0x38>
				gdispGClear(g, GDISP_STARTUP_COLOR);
 8001d52:	1c20      	adds	r0, r4, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	f7ff ffdb 	bl	8001d10 <gdispGClear>
		#if GDISP_HARDWARE_FLUSH == HARDWARE_AUTODETECT
			if (gvmt(g)->flush)
		#endif
		{
			MUTEX_ENTER(g);
			gdisp_lld_flush(g);
 8001d5a:	1c20      	adds	r0, r4, #0
 8001d5c:	f001 fdc4 	bl	80038e8 <gdisp_lld_flush>
		{
			GDisplay	*g;

			gfxSleepMilliseconds(GDISP_STARTUP_LOGO_TIMEOUT);

			for(g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, 0); g; g = (GDisplay *)gdriverGetNext(GDRIVER_TYPE_DISPLAY, (GDriver *)g)) {
 8001d60:	1c21      	adds	r1, r4, #0
 8001d62:	2067      	movs	r0, #103	; 0x67
 8001d64:	f7ff fe2a 	bl	80019bc <gdriverGetNext>
 8001d68:	1e04      	subs	r4, r0, #0
 8001d6a:	d1f2      	bne.n	8001d52 <_gdispInit+0x1e>
				#if GDISP_HARDWARE_FLUSH
					gdispGFlush(g);
				#endif
			}

			gdispInitDone = TRUE;
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <_gdispInit+0x4c>)
 8001d70:	701a      	strb	r2, [r3, #0]
	// Start the automatic timer flush (if required)
	#if GDISP_NEED_TIMERFLUSH
		gtimerInit(&FlushTimer);
		gtimerStart(&FlushTimer, FlushTimerFn, 0, TRUE, GDISP_NEED_TIMERFLUSH);
	#endif
}
 8001d72:	bd10      	pop	{r4, pc}
	#else
		{
			extern const GDISPVMT const		GDISPVMT_OnlyOne[1];

			if (!(GDISPVMT_OnlyOne->d.flags & GDISP_VFLG_DYNAMICONLY))
				gdriverRegister(&GDISPVMT_OnlyOne->d, 0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	f7ff fd6d 	bl	8001854 <gdriverRegister>
 8001d7a:	e7e0      	b.n	8001d3e <_gdispInit+0xa>
 8001d7c:	08006fb4 	.word	0x08006fb4
 8001d80:	20000880 	.word	0x20000880

08001d84 <_gdispPostInitDriver>:
	return ret;

	#undef gd
}

void _gdispPostInitDriver(GDriver *g) {
 8001d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d86:	4644      	mov	r4, r8
 8001d88:	465f      	mov	r7, fp
 8001d8a:	4656      	mov	r6, sl
 8001d8c:	464d      	mov	r5, r9
	#if GDISP_NEED_VALIDATION || GDISP_NEED_CLIP
		gdispGSetClip(gd, 0, 0, gd->g.Width, gd->g.Height);
	#endif

	// Clear the Screen
	gdispGClear(gd, GDISP_STARTUP_COLOR);
 8001d8e:	2100      	movs	r1, #0
	return ret;

	#undef gd
}

void _gdispPostInitDriver(GDriver *g) {
 8001d90:	b4f0      	push	{r4, r5, r6, r7}
 8001d92:	1c04      	adds	r4, r0, #0
	#if GDISP_NEED_VALIDATION || GDISP_NEED_CLIP
		gdispGSetClip(gd, 0, 0, gd->g.Width, gd->g.Height);
	#endif

	// Clear the Screen
	gdispGClear(gd, GDISP_STARTUP_COLOR);
 8001d94:	f7ff ffbc 	bl	8001d10 <gdispGClear>

	// Display the startup logo if this is a static initialised display
	#if GDISP_STARTUP_LOGO_TIMEOUT > 0
		if (!gdispInitDone)
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <_gdispPostInitDriver+0xd0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00c      	beq.n	8001dba <_gdispPostInitDriver+0x36>
		#if GDISP_HARDWARE_FLUSH == HARDWARE_AUTODETECT
			if (gvmt(g)->flush)
		#endif
		{
			MUTEX_ENTER(g);
			gdisp_lld_flush(g);
 8001da0:	1c20      	adds	r0, r4, #0
 8001da2:	f001 fda1 	bl	80038e8 <gdisp_lld_flush>
	#if GDISP_HARDWARE_FLUSH
		gdispGFlush(gd);
	#endif

	// If this is the first driver set GDISP
	if (!GDISP)
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <_gdispPostInitDriver+0xd4>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d04a      	beq.n	8001e44 <_gdispPostInitDriver+0xc0>
		GDISP = gd;

	#undef gd
}
 8001dae:	bc3c      	pop	{r2, r3, r4, r5}
 8001db0:	4690      	mov	r8, r2
 8001db2:	4699      	mov	r9, r3
 8001db4:	46a2      	mov	sl, r4
 8001db6:	46ab      	mov	fp, r5
 8001db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				26, 7, 1, 5,
		};

		// Get a starting position and a scale
		// Work on a 8x16 grid for each char, 4 chars (uGFX) in 1 line, using half the screen
		w = g->g.Width/(8*4*2);
 8001dba:	2308      	movs	r3, #8
 8001dbc:	5ee0      	ldrsh	r0, [r4, r3]
 8001dbe:	17c6      	asrs	r6, r0, #31
 8001dc0:	0eb6      	lsrs	r6, r6, #26
 8001dc2:	1836      	adds	r6, r6, r0
 8001dc4:	11b6      	asrs	r6, r6, #6
 8001dc6:	b2b6      	uxth	r6, r6
		if (!w) w = 1;
 8001dc8:	2e00      	cmp	r6, #0
 8001dca:	d03d      	beq.n	8001e48 <_gdispPostInitDriver+0xc4>
 8001dcc:	b233      	sxth	r3, r6
 8001dce:	0159      	lsls	r1, r3, #5
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	424a      	negs	r2, r1
 8001dd4:	425b      	negs	r3, r3
 8001dd6:	b2b6      	uxth	r6, r6
		x = (g->g.Width - (8*4)*w)/2;
 8001dd8:	1882      	adds	r2, r0, r2
 8001dda:	0fd1      	lsrs	r1, r2, #31
 8001ddc:	188a      	adds	r2, r1, r2
 8001dde:	1052      	asrs	r2, r2, #1
 8001de0:	b292      	uxth	r2, r2
 8001de2:	4690      	mov	r8, r2
		y = (g->g.Height - (16*1)*w)/2;
 8001de4:	220a      	movs	r2, #10
 8001de6:	5ea7      	ldrsh	r7, [r4, r2]

		// Simple but crude!
		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
 8001de8:	4d1c      	ldr	r5, [pc, #112]	; (8001e5c <_gdispPostInitDriver+0xd8>)
		// Get a starting position and a scale
		// Work on a 8x16 grid for each char, 4 chars (uGFX) in 1 line, using half the screen
		w = g->g.Width/(8*4*2);
		if (!w) w = 1;
		x = (g->g.Width - (8*4)*w)/2;
		y = (g->g.Height - (16*1)*w)/2;
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	0fdf      	lsrs	r7, r3, #31
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	105b      	asrs	r3, r3, #1
 8001df2:	b29f      	uxth	r7, r3
	MUTEX_ENTER(g);
	g->p.x = x;
	g->p.y = y;
	g->p.cx = cx;
	g->p.cy = cy;
	g->p.color = color;
 8001df4:	2330      	movs	r3, #48	; 0x30
 8001df6:	469b      	mov	fp, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	469a      	mov	sl, r3
		if (!w) w = 1;
		x = (g->g.Width - (8*4)*w)/2;
		y = (g->g.Height - (16*1)*w)/2;

		// Simple but crude!
		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	4699      	mov	r9, r3
 8001e00:	44a9      	add	r9, r5
			gdispGFillArea(g, x+p[0]*w, y+p[1]*w, p[2]*w, p[3]*w, GDISP_STARTUP_LOGO_COLOR);
 8001e02:	886b      	ldrh	r3, [r5, #2]
 8001e04:	882a      	ldrh	r2, [r5, #0]
 8001e06:	4373      	muls	r3, r6
 8001e08:	4372      	muls	r2, r6
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	4442      	add	r2, r8
 8001e0e:	88a8      	ldrh	r0, [r5, #4]
 8001e10:	88e9      	ldrh	r1, [r5, #6]
	#endif
}

void gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
	MUTEX_ENTER(g);
	g->p.x = x;
 8001e12:	8422      	strh	r2, [r4, #32]
	g->p.y = y;
 8001e14:	8463      	strh	r3, [r4, #34]	; 0x22
	g->p.cx = cx;
	g->p.cy = cy;
	g->p.color = color;
 8001e16:	4652      	mov	r2, sl
 8001e18:	465b      	mov	r3, fp
		x = (g->g.Width - (8*4)*w)/2;
		y = (g->g.Height - (16*1)*w)/2;

		// Simple but crude!
		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
			gdispGFillArea(g, x+p[0]*w, y+p[1]*w, p[2]*w, p[3]*w, GDISP_STARTUP_LOGO_COLOR);
 8001e1a:	4371      	muls	r1, r6
 8001e1c:	4370      	muls	r0, r6
void gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
	MUTEX_ENTER(g);
	g->p.x = x;
	g->p.y = y;
	g->p.cx = cx;
	g->p.cy = cy;
 8001e1e:	84e1      	strh	r1, [r4, #38]	; 0x26

void gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
	MUTEX_ENTER(g);
	g->p.x = x;
	g->p.y = y;
	g->p.cx = cx;
 8001e20:	84a0      	strh	r0, [r4, #36]	; 0x24
	g->p.cy = cy;
	g->p.color = color;
 8001e22:	54e2      	strb	r2, [r4, r3]
				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
					gdisp_lld_write_stop(g);
					g->flags &= ~GDISP_FLG_SCRSTREAM;
				}
			#endif
			gdisp_lld_fill_area(g);
 8001e24:	1c20      	adds	r0, r4, #0
 8001e26:	f001 fbf3 	bl	8003610 <gdisp_lld_fill_area>
		if (!w) w = 1;
		x = (g->g.Width - (8*4)*w)/2;
		y = (g->g.Height - (16*1)*w)/2;

		// Simple but crude!
		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
 8001e2a:	3508      	adds	r5, #8
	g->p.cy = cy;
	g->p.color = color;
	TEST_CLIP_AREA(g) {
		fillarea(g);
	}
	autoflush_stopdone(g);
 8001e2c:	1c20      	adds	r0, r4, #0
 8001e2e:	f001 fd5b 	bl	80038e8 <gdisp_lld_flush>
		if (!w) w = 1;
		x = (g->g.Width - (8*4)*w)/2;
		y = (g->g.Height - (16*1)*w)/2;

		// Simple but crude!
		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
 8001e32:	454d      	cmp	r5, r9
 8001e34:	d3e5      	bcc.n	8001e02 <_gdispPostInitDriver+0x7e>
		#if GDISP_HARDWARE_FLUSH == HARDWARE_AUTODETECT
			if (gvmt(g)->flush)
		#endif
		{
			MUTEX_ENTER(g);
			gdisp_lld_flush(g);
 8001e36:	1c20      	adds	r0, r4, #0
 8001e38:	f001 fd56 	bl	80038e8 <gdisp_lld_flush>
	#if GDISP_HARDWARE_FLUSH
		gdispGFlush(gd);
	#endif

	// If this is the first driver set GDISP
	if (!GDISP)
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <_gdispPostInitDriver+0xd4>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d1b4      	bne.n	8001dae <_gdispPostInitDriver+0x2a>
		GDISP = gd;
 8001e44:	601c      	str	r4, [r3, #0]
 8001e46:	e7b2      	b.n	8001dae <_gdispPostInitDriver+0x2a>
		};

		// Get a starting position and a scale
		// Work on a 8x16 grid for each char, 4 chars (uGFX) in 1 line, using half the screen
		w = g->g.Width/(8*4*2);
		if (!w) w = 1;
 8001e48:	2310      	movs	r3, #16
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	2601      	movs	r6, #1
 8001e4e:	425b      	negs	r3, r3
 8001e50:	4252      	negs	r2, r2
 8001e52:	e7c1      	b.n	8001dd8 <_gdispPostInitDriver+0x54>
 8001e54:	20000880 	.word	0x20000880
 8001e58:	20000994 	.word	0x20000994
 8001e5c:	08006874 	.word	0x08006874

08001e60 <gdispGFillArea>:
			return;
		}
	#endif
}

void gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	1c04      	adds	r4, r0, #0
	MUTEX_ENTER(g);
	g->p.x = x;
	g->p.y = y;
	g->p.cx = cx;
 8001e64:	84a3      	strh	r3, [r4, #36]	; 0x24
	g->p.cy = cy;
	g->p.color = color;
 8001e66:	2330      	movs	r3, #48	; 0x30
			return;
		}
	#endif
}

void gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8001e68:	a804      	add	r0, sp, #16
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	5f45      	ldrsh	r5, [r0, r5]
 8001e6e:	a805      	add	r0, sp, #20
 8001e70:	7800      	ldrb	r0, [r0, #0]
	MUTEX_ENTER(g);
	g->p.x = x;
 8001e72:	8421      	strh	r1, [r4, #32]
	g->p.y = y;
 8001e74:	8462      	strh	r2, [r4, #34]	; 0x22
	g->p.cx = cx;
	g->p.cy = cy;
 8001e76:	84e5      	strh	r5, [r4, #38]	; 0x26
	g->p.color = color;
 8001e78:	54e0      	strb	r0, [r4, r3]
				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
					gdisp_lld_write_stop(g);
					g->flags &= ~GDISP_FLG_SCRSTREAM;
				}
			#endif
			gdisp_lld_fill_area(g);
 8001e7a:	1c20      	adds	r0, r4, #0
 8001e7c:	f001 fbc8 	bl	8003610 <gdisp_lld_fill_area>
	g->p.cy = cy;
	g->p.color = color;
	TEST_CLIP_AREA(g) {
		fillarea(g);
	}
	autoflush_stopdone(g);
 8001e80:	1c20      	adds	r0, r4, #0
 8001e82:	f001 fd31 	bl	80038e8 <gdisp_lld_flush>
	MUTEX_EXIT(g);
}
 8001e86:	bd38      	pop	{r3, r4, r5, pc}

08001e88 <gdispGBlitArea>:

void gdispGBlitArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t srcx, coord_t srcy, coord_t srccx, const pixel_t *buffer) {
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	465f      	mov	r7, fp
 8001e8c:	4656      	mov	r6, sl
 8001e8e:	464d      	mov	r5, r9
 8001e90:	4644      	mov	r4, r8
 8001e92:	4689      	mov	r9, r1
 8001e94:	b4f0      	push	{r4, r5, r6, r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	1c05      	adds	r5, r0, #0
 8001e9a:	1c10      	adds	r0, r2, #0
 8001e9c:	aa0c      	add	r2, sp, #48	; 0x30
 8001e9e:	2400      	movs	r4, #0
 8001ea0:	5f14      	ldrsh	r4, [r2, r4]
 8001ea2:	aa0d      	add	r2, sp, #52	; 0x34
 8001ea4:	2600      	movs	r6, #0
 8001ea6:	5f96      	ldrsh	r6, [r2, r6]
 8001ea8:	aa0e      	add	r2, sp, #56	; 0x38
 8001eaa:	2100      	movs	r1, #0
 8001eac:	5e52      	ldrsh	r2, [r2, r1]
 8001eae:	a90f      	add	r1, sp, #60	; 0x3c
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	5fc9      	ldrsh	r1, [r1, r7]
			if (gvmt(g)->fill)
		#endif
		{
			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
			buffer += srcy*srccx+srcx;
			srcx = x + cx;
 8001eb4:	b29b      	uxth	r3, r3
		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
			if (gvmt(g)->fill)
		#endif
		{
			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
			buffer += srcy*srccx+srcx;
 8001eb6:	434a      	muls	r2, r1
 8001eb8:	1992      	adds	r2, r2, r6
 8001eba:	9e10      	ldr	r6, [sp, #64]	; 0x40
			srcx = x + cx;
			srcy = y + cy;
			srccx -= cx;
 8001ebc:	1ac9      	subs	r1, r1, r3
		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
			if (gvmt(g)->fill)
		#endif
		{
			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
			buffer += srcy*srccx+srcx;
 8001ebe:	46b4      	mov	ip, r6
			srcx = x + cx;
 8001ec0:	464e      	mov	r6, r9
 8001ec2:	199e      	adds	r6, r3, r6
			srcy = y + cy;
			srccx -= cx;
 8001ec4:	b20b      	sxth	r3, r1
 8001ec6:	469b      	mov	fp, r3

			g->p.cy = 1;
 8001ec8:	2301      	movs	r3, #1
		#endif
		{
			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
			buffer += srcy*srccx+srcx;
			srcx = x + cx;
			srcy = y + cy;
 8001eca:	1904      	adds	r4, r0, r4
 8001ecc:	b224      	sxth	r4, r4
		#if GDISP_HARDWARE_FILLS == HARDWARE_AUTODETECT
			if (gvmt(g)->fill)
		#endif
		{
			// Translate buffer to the real image data, use srcx,srcy as the end point, srccx as the buffer line gap
			buffer += srcy*srccx+srcx;
 8001ece:	4462      	add	r2, ip
			srcx = x + cx;
 8001ed0:	b236      	sxth	r6, r6
			srcy = y + cy;
 8001ed2:	46a2      	mov	sl, r4
			srccx -= cx;

			g->p.cy = 1;
 8001ed4:	84eb      	strh	r3, [r5, #38]	; 0x26
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
 8001ed6:	8468      	strh	r0, [r5, #34]	; 0x22
 8001ed8:	42a0      	cmp	r0, r4
 8001eda:	da39      	bge.n	8001f50 <gdispGBlitArea+0xc8>
 8001edc:	464b      	mov	r3, r9
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	9301      	str	r3, [sp, #4]
				for(g->p.x=x; g->p.x < srcx; g->p.x += g->p.cx) {
					g->p.cx=1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4698      	mov	r8, r3
			srcy = y + cy;
			srccx -= cx;

			g->p.cy = 1;
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
				for(g->p.x=x; g->p.x < srcx; g->p.x += g->p.cx) {
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	842b      	strh	r3, [r5, #32]
 8001eea:	45b1      	cmp	r9, r6
 8001eec:	da28      	bge.n	8001f40 <gdispGBlitArea+0xb8>
 8001eee:	9901      	ldr	r1, [sp, #4]
					g->p.cx=1;
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	84ab      	strh	r3, [r5, #36]	; 0x24
					g->p.color = *buffer++;
 8001ef4:	2330      	movs	r3, #48	; 0x30
 8001ef6:	7817      	ldrb	r7, [r2, #0]
 8001ef8:	1c54      	adds	r4, r2, #1
 8001efa:	54ef      	strb	r7, [r5, r3]
					while(g->p.x+g->p.cx < srcx && *buffer == g->p.color) {
 8001efc:	1c4b      	adds	r3, r1, #1
 8001efe:	42b3      	cmp	r3, r6
 8001f00:	da30      	bge.n	8001f64 <gdispGBlitArea+0xdc>
 8001f02:	7853      	ldrb	r3, [r2, #1]
 8001f04:	42bb      	cmp	r3, r7
 8001f06:	d12d      	bne.n	8001f64 <gdispGBlitArea+0xdc>
 8001f08:	2202      	movs	r2, #2
 8001f0a:	e004      	b.n	8001f16 <gdispGBlitArea+0x8e>
 8001f0c:	7820      	ldrb	r0, [r4, #0]
 8001f0e:	3201      	adds	r2, #1
 8001f10:	b292      	uxth	r2, r2
 8001f12:	42b8      	cmp	r0, r7
 8001f14:	d106      	bne.n	8001f24 <gdispGBlitArea+0x9c>
						g->p.cx++;
 8001f16:	b293      	uxth	r3, r2
 8001f18:	84ab      	strh	r3, [r5, #36]	; 0x24
			g->p.cy = 1;
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
				for(g->p.x=x; g->p.x < srcx; g->p.x += g->p.cx) {
					g->p.cx=1;
					g->p.color = *buffer++;
					while(g->p.x+g->p.cx < srcx && *buffer == g->p.color) {
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	1858      	adds	r0, r3, r1
						g->p.cx++;
						buffer++;
 8001f1e:	3401      	adds	r4, #1
			g->p.cy = 1;
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
				for(g->p.x=x; g->p.x < srcx; g->p.x += g->p.cx) {
					g->p.cx=1;
					g->p.color = *buffer++;
					while(g->p.x+g->p.cx < srcx && *buffer == g->p.color) {
 8001f20:	42b0      	cmp	r0, r6
 8001f22:	dbf3      	blt.n	8001f0c <gdispGBlitArea+0x84>
						g->p.cx++;
						buffer++;
					}
					if (g->p.cx == 1) {
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d01d      	beq.n	8001f64 <gdispGBlitArea+0xdc>
						gdisp_lld_draw_pixel(g);
					} else {
						gdisp_lld_fill_area(g);
 8001f28:	1c28      	adds	r0, r5, #0
 8001f2a:	f001 fb71 	bl	8003610 <gdisp_lld_fill_area>
 8001f2e:	1c22      	adds	r2, r4, #0
			srcy = y + cy;
			srccx -= cx;

			g->p.cy = 1;
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
				for(g->p.x=x; g->p.x < srcx; g->p.x += g->p.cx) {
 8001f30:	8c2b      	ldrh	r3, [r5, #32]
 8001f32:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 8001f34:	18c9      	adds	r1, r1, r3
 8001f36:	b289      	uxth	r1, r1
 8001f38:	8429      	strh	r1, [r5, #32]
 8001f3a:	b209      	sxth	r1, r1
 8001f3c:	428e      	cmp	r6, r1
 8001f3e:	dcd7      	bgt.n	8001ef0 <gdispGBlitArea+0x68>
			srcx = x + cx;
			srcy = y + cy;
			srccx -= cx;

			g->p.cy = 1;
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
 8001f40:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8001f42:	445a      	add	r2, fp
 8001f44:	3301      	adds	r3, #1
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	846b      	strh	r3, [r5, #34]	; 0x22
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	459a      	cmp	sl, r3
 8001f4e:	dcca      	bgt.n	8001ee6 <gdispGBlitArea+0x5e>
					} else {
						gdisp_lld_fill_area(g);
					}
				}
			}
			autoflush_stopdone(g);
 8001f50:	1c28      	adds	r0, r5, #0
 8001f52:	f001 fcc9 	bl	80038e8 <gdisp_lld_flush>
			autoflush_stopdone(g);
			MUTEX_EXIT(g);
			return;
		}
	#endif
}
 8001f56:	b003      	add	sp, #12
 8001f58:	bc3c      	pop	{r2, r3, r4, r5}
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	46a2      	mov	sl, r4
 8001f60:	46ab      	mov	fp, r5
 8001f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
					while(g->p.x+g->p.cx < srcx && *buffer == g->p.color) {
						g->p.cx++;
						buffer++;
					}
					if (g->p.cx == 1) {
						gdisp_lld_draw_pixel(g);
 8001f64:	1c28      	adds	r0, r5, #0
 8001f66:	f001 fc45 	bl	80037f4 <gdisp_lld_draw_pixel>
 8001f6a:	1c22      	adds	r2, r4, #0
 8001f6c:	e7e0      	b.n	8001f30 <gdispGBlitArea+0xa8>
 8001f6e:	46c0      	nop			; (mov r8, r8)

08001f70 <gdispGDrawBox>:

/*===========================================================================*/
/* High Level Driver Routines.                                               */
/*===========================================================================*/

void gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	4657      	mov	r7, sl
 8001f74:	464e      	mov	r6, r9
 8001f76:	4645      	mov	r5, r8
 8001f78:	b4e0      	push	{r5, r6, r7}
 8001f7a:	1c16      	adds	r6, r2, #0
 8001f7c:	aa08      	add	r2, sp, #32
 8001f7e:	1c0f      	adds	r7, r1, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	5e52      	ldrsh	r2, [r2, r1]
 8001f84:	a909      	add	r1, sp, #36	; 0x24
 8001f86:	1c04      	adds	r4, r0, #0
 8001f88:	7809      	ldrb	r1, [r1, #0]
	if (cx <= 0 || cy <= 0) return;
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dd3a      	ble.n	8002004 <gdispGDrawBox+0x94>
 8001f8e:	2a00      	cmp	r2, #0
 8001f90:	dd38      	ble.n	8002004 <gdispGDrawBox+0x94>
 8001f92:	1e7d      	subs	r5, r7, #1
	cx = x+cx-1; cy = y+cy-1;			// cx, cy are now the end point.
 8001f94:	18eb      	adds	r3, r5, r3
 8001f96:	b21d      	sxth	r5, r3
 8001f98:	b2b3      	uxth	r3, r6
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	444a      	add	r2, r9
 8001f9e:	b293      	uxth	r3, r2
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	469a      	mov	sl, r3

	MUTEX_ENTER(g);

	g->p.color = color;
 8001fa8:	2330      	movs	r3, #48	; 0x30
 8001faa:	54c1      	strb	r1, [r0, r3]

	if (cx - x >= 2) {
 8001fac:	1beb      	subs	r3, r5, r7
		g->p.x = x; g->p.y = y; g->p.x1 = cx; hline_clip(g);
 8001fae:	8407      	strh	r7, [r0, #32]
 8001fb0:	8446      	strh	r6, [r0, #34]	; 0x22

	MUTEX_ENTER(g);

	g->p.color = color;

	if (cx - x >= 2) {
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	dd2b      	ble.n	800200e <gdispGDrawBox+0x9e>
		g->p.x = x; g->p.y = y; g->p.x1 = cx; hline_clip(g);
 8001fb6:	8505      	strh	r5, [r0, #40]	; 0x28
 8001fb8:	f7ff fd32 	bl	8001a20 <hline_clip>
		if (y != cy) {
 8001fbc:	4556      	cmp	r6, sl
 8001fbe:	d01e      	beq.n	8001ffe <gdispGDrawBox+0x8e>
			g->p.x = x; g->p.y = cy; g->p.x1 = cx; hline_clip(g);
 8001fc0:	4653      	mov	r3, sl
 8001fc2:	8427      	strh	r7, [r4, #32]
 8001fc4:	8463      	strh	r3, [r4, #34]	; 0x22
 8001fc6:	8525      	strh	r5, [r4, #40]	; 0x28
 8001fc8:	1c20      	adds	r0, r4, #0
 8001fca:	f7ff fd29 	bl	8001a20 <hline_clip>
			if (cy - y >= 2) {
 8001fce:	4653      	mov	r3, sl
 8001fd0:	1b9b      	subs	r3, r3, r6
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	dd13      	ble.n	8001ffe <gdispGDrawBox+0x8e>
				y++; cy--;
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	4646      	mov	r6, r8
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4699      	mov	r9, r3
 8001fe0:	3e02      	subs	r6, #2
 8001fe2:	b236      	sxth	r6, r6
				g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8001fe4:	8463      	strh	r3, [r4, #34]	; 0x22
 8001fe6:	1c20      	adds	r0, r4, #0
 8001fe8:	8427      	strh	r7, [r4, #32]
 8001fea:	8566      	strh	r6, [r4, #42]	; 0x2a
 8001fec:	f7ff fd32 	bl	8001a54 <vline_clip>
				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	8425      	strh	r5, [r4, #32]
 8001ff4:	8463      	strh	r3, [r4, #34]	; 0x22
 8001ff6:	8566      	strh	r6, [r4, #42]	; 0x2a
 8001ff8:	1c20      	adds	r0, r4, #0
 8001ffa:	f7ff fd2b 	bl	8001a54 <vline_clip>
		if (x != cx) {
			g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
		}
	}

	autoflush(g);
 8001ffe:	1c20      	adds	r0, r4, #0
 8002000:	f001 fc72 	bl	80038e8 <gdisp_lld_flush>
	MUTEX_EXIT(g);
}
 8002004:	bc1c      	pop	{r2, r3, r4}
 8002006:	4690      	mov	r8, r2
 8002008:	4699      	mov	r9, r3
 800200a:	46a2      	mov	sl, r4
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
			}
		}
	} else {
		g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 800200e:	4653      	mov	r3, sl
 8002010:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002012:	f7ff fd1f 	bl	8001a54 <vline_clip>
		if (x != cx) {
 8002016:	42af      	cmp	r7, r5
 8002018:	d0f1      	beq.n	8001ffe <gdispGDrawBox+0x8e>
			g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 800201a:	4653      	mov	r3, sl
 800201c:	8425      	strh	r5, [r4, #32]
 800201e:	8466      	strh	r6, [r4, #34]	; 0x22
 8002020:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002022:	1c20      	adds	r0, r4, #0
 8002024:	f7ff fd16 	bl	8001a54 <vline_clip>
 8002028:	e7e9      	b.n	8001ffe <gdispGDrawBox+0x8e>
 800202a:	46c0      	nop			; (mov r8, r8)

0800202c <gdispGDrawChar>:
			#undef GD
			return TRUE;
		}
	#endif

	void gdispGDrawChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color) {
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	464f      	mov	r7, r9
 8002030:	4646      	mov	r6, r8
 8002032:	b4c0      	push	{r6, r7}
 8002034:	b083      	sub	sp, #12
 8002036:	1c17      	adds	r7, r2, #0
 8002038:	aa0a      	add	r2, sp, #40	; 0x28
 800203a:	ca20      	ldmia	r2!, {r5}
 800203c:	1c04      	adds	r4, r0, #0
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	4688      	mov	r8, r1
 8002042:	4691      	mov	r9, r2
		if (!font)
 8002044:	2d00      	cmp	r5, #0
 8002046:	d021      	beq.n	800208c <gdispGDrawChar+0x60>
			return;
		MUTEX_ENTER(g);
		g->t.font = font;
		g->t.clipx0 = x;
		g->t.clipy0 = y;
 8002048:	2240      	movs	r2, #64	; 0x40
		g->t.clipx1 = x + mf_character_width(font, c) + font->baseline_x;
 800204a:	b2de      	uxtb	r6, r3

	void gdispGDrawChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color) {
		if (!font)
			return;
		MUTEX_ENTER(g);
		g->t.font = font;
 800204c:	6385      	str	r5, [r0, #56]	; 0x38
		g->t.clipx0 = x;
 800204e:	87e1      	strh	r1, [r4, #62]	; 0x3e
		g->t.clipy0 = y;
 8002050:	5287      	strh	r7, [r0, r2]
		g->t.clipx1 = x + mf_character_width(font, c) + font->baseline_x;
 8002052:	1c31      	adds	r1, r6, #0
 8002054:	1c28      	adds	r0, r5, #0
 8002056:	f000 ffef 	bl	8003038 <mf_character_width>
 800205a:	230c      	movs	r3, #12
 800205c:	56eb      	ldrsb	r3, [r5, r3]
		g->t.clipy1 = y + font->height;
 800205e:	2244      	movs	r2, #68	; 0x44
 8002060:	4443      	add	r3, r8
			return;
		MUTEX_ENTER(g);
		g->t.font = font;
		g->t.clipx0 = x;
		g->t.clipy0 = y;
		g->t.clipx1 = x + mf_character_width(font, c) + font->baseline_x;
 8002062:	1818      	adds	r0, r3, r0
 8002064:	2342      	movs	r3, #66	; 0x42
 8002066:	52e0      	strh	r0, [r4, r3]
		g->t.clipy1 = y + font->height;
 8002068:	7a6b      	ldrb	r3, [r5, #9]
		g->t.color = color;
		mf_render_character(font, x, y, c, drawcharline, g);
 800206a:	1c28      	adds	r0, r5, #0
		MUTEX_ENTER(g);
		g->t.font = font;
		g->t.clipx0 = x;
		g->t.clipy0 = y;
		g->t.clipx1 = x + mf_character_width(font, c) + font->baseline_x;
		g->t.clipy1 = y + font->height;
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	52a3      	strh	r3, [r4, r2]
		g->t.color = color;
 8002070:	233c      	movs	r3, #60	; 0x3c
 8002072:	464a      	mov	r2, r9
 8002074:	54e2      	strb	r2, [r4, r3]
		mf_render_character(font, x, y, c, drawcharline, g);
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <gdispGDrawChar+0x6c>)
 8002078:	9401      	str	r4, [sp, #4]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4641      	mov	r1, r8
 800207e:	1c3a      	adds	r2, r7, #0
 8002080:	1c33      	adds	r3, r6, #0
 8002082:	f000 ffbd 	bl	8003000 <mf_render_character>
		autoflush(g);
 8002086:	1c20      	adds	r0, r4, #0
 8002088:	f001 fc2e 	bl	80038e8 <gdisp_lld_flush>
		MUTEX_EXIT(g);
	}
 800208c:	b003      	add	sp, #12
 800208e:	bc0c      	pop	{r2, r3}
 8002090:	4690      	mov	r8, r2
 8002092:	4699      	mov	r9, r3
 8002094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	08001ad1 	.word	0x08001ad1

0800209c <gdispGFillChar>:

	void gdispGFillChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color, color_t bgcolor) {
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4657      	mov	r7, sl
 80020a0:	4645      	mov	r5, r8
 80020a2:	464e      	mov	r6, r9
 80020a4:	b4e0      	push	{r5, r6, r7}
 80020a6:	b082      	sub	sp, #8
 80020a8:	1c17      	adds	r7, r2, #0
 80020aa:	aa0a      	add	r2, sp, #40	; 0x28
 80020ac:	ca20      	ldmia	r2!, {r5}
 80020ae:	1c04      	adds	r4, r0, #0
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	4688      	mov	r8, r1
 80020b4:	4692      	mov	sl, r2
 80020b6:	aa0c      	add	r2, sp, #48	; 0x30
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	4691      	mov	r9, r2
		if (!font)
 80020bc:	2d00      	cmp	r5, #0
 80020be:	d02f      	beq.n	8002120 <gdispGFillChar+0x84>
			return;
		MUTEX_ENTER(g);
		g->p.cx = mf_character_width(font, c) + font->baseline_x;
 80020c0:	b2de      	uxtb	r6, r3
 80020c2:	1c31      	adds	r1, r6, #0
 80020c4:	1c28      	adds	r0, r5, #0
 80020c6:	f000 ffb7 	bl	8003038 <mf_character_width>
 80020ca:	230c      	movs	r3, #12
		g->p.cy = font->height;
		g->t.font = font;
		g->t.clipx0 = g->p.x = x;
 80020cc:	4642      	mov	r2, r8

	void gdispGFillChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color, color_t bgcolor) {
		if (!font)
			return;
		MUTEX_ENTER(g);
		g->p.cx = mf_character_width(font, c) + font->baseline_x;
 80020ce:	56eb      	ldrsb	r3, [r5, r3]
 80020d0:	1818      	adds	r0, r3, r0
 80020d2:	b280      	uxth	r0, r0
 80020d4:	84a0      	strh	r0, [r4, #36]	; 0x24
		g->p.cy = font->height;
 80020d6:	7a6b      	ldrb	r3, [r5, #9]
		g->t.font = font;
		g->t.clipx0 = g->p.x = x;
 80020d8:	8422      	strh	r2, [r4, #32]
 80020da:	87e2      	strh	r2, [r4, #62]	; 0x3e
		g->t.clipy0 = g->p.y = y;
 80020dc:	2240      	movs	r2, #64	; 0x40
	void gdispGFillChar(GDisplay *g, coord_t x, coord_t y, uint16_t c, font_t font, color_t color, color_t bgcolor) {
		if (!font)
			return;
		MUTEX_ENTER(g);
		g->p.cx = mf_character_width(font, c) + font->baseline_x;
		g->p.cy = font->height;
 80020de:	84e3      	strh	r3, [r4, #38]	; 0x26
		g->t.font = font;
 80020e0:	63a5      	str	r5, [r4, #56]	; 0x38
		g->t.clipx0 = g->p.x = x;
		g->t.clipy0 = g->p.y = y;
 80020e2:	8467      	strh	r7, [r4, #34]	; 0x22
		g->t.clipx1 = g->p.x+g->p.cx;
 80020e4:	4440      	add	r0, r8
		MUTEX_ENTER(g);
		g->p.cx = mf_character_width(font, c) + font->baseline_x;
		g->p.cy = font->height;
		g->t.font = font;
		g->t.clipx0 = g->p.x = x;
		g->t.clipy0 = g->p.y = y;
 80020e6:	52a7      	strh	r7, [r4, r2]
		g->t.clipx1 = g->p.x+g->p.cx;
 80020e8:	3202      	adds	r2, #2
 80020ea:	52a0      	strh	r0, [r4, r2]
		g->t.clipy1 = g->p.y+g->p.cy;
 80020ec:	19db      	adds	r3, r3, r7
 80020ee:	3202      	adds	r2, #2
 80020f0:	52a3      	strh	r3, [r4, r2]
		g->t.color = color;
 80020f2:	233c      	movs	r3, #60	; 0x3c
 80020f4:	4652      	mov	r2, sl
 80020f6:	54e2      	strb	r2, [r4, r3]
		g->t.bgcolor = g->p.color = bgcolor;
 80020f8:	464a      	mov	r2, r9
 80020fa:	3b0c      	subs	r3, #12
 80020fc:	54e2      	strb	r2, [r4, r3]
 80020fe:	330d      	adds	r3, #13
 8002100:	54e2      	strb	r2, [r4, r3]
				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
					gdisp_lld_write_stop(g);
					g->flags &= ~GDISP_FLG_SCRSTREAM;
				}
			#endif
			gdisp_lld_fill_area(g);
 8002102:	1c20      	adds	r0, r4, #0
 8002104:	f001 fa84 	bl	8003610 <gdisp_lld_fill_area>
		g->t.color = color;
		g->t.bgcolor = g->p.color = bgcolor;

		TEST_CLIP_AREA(g) {
			fillarea(g);
			mf_render_character(font, x, y, c, fillcharline, g);
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <gdispGFillChar+0x90>)
 800210a:	9401      	str	r4, [sp, #4]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	1c28      	adds	r0, r5, #0
 8002110:	4641      	mov	r1, r8
 8002112:	1c3a      	adds	r2, r7, #0
 8002114:	1c33      	adds	r3, r6, #0
 8002116:	f000 ff73 	bl	8003000 <mf_render_character>
		}
		autoflush(g);
 800211a:	1c20      	adds	r0, r4, #0
 800211c:	f001 fbe4 	bl	80038e8 <gdisp_lld_flush>
		MUTEX_EXIT(g);
	}
 8002120:	b002      	add	sp, #8
 8002122:	bc1c      	pop	{r2, r3, r4}
 8002124:	4690      	mov	r8, r2
 8002126:	4699      	mov	r9, r3
 8002128:	46a2      	mov	sl, r4
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212c:	08001ad1 	.word	0x08001ad1

08002130 <gdispGDrawString>:

	void gdispGDrawString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color) {
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	b085      	sub	sp, #20
 8002134:	ad0a      	add	r5, sp, #40	; 0x28
 8002136:	1c04      	adds	r4, r0, #0
 8002138:	cd01      	ldmia	r5!, {r0}
 800213a:	782e      	ldrb	r6, [r5, #0]
		if (!font)
 800213c:	2800      	cmp	r0, #0
 800213e:	d01c      	beq.n	800217a <gdispGDrawString+0x4a>
			return;
		MUTEX_ENTER(g);
		g->t.font = font;
		g->t.clipx0 = x;
		g->t.clipy0 = y;
 8002140:	2540      	movs	r5, #64	; 0x40
		g->t.clipx1 = 32767;	//x + mf_get_string_width(font, str, 0, 0) + font->baseline_x;
 8002142:	4f0f      	ldr	r7, [pc, #60]	; (8002180 <gdispGDrawString+0x50>)

	void gdispGDrawString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color) {
		if (!font)
			return;
		MUTEX_ENTER(g);
		g->t.font = font;
 8002144:	63a0      	str	r0, [r4, #56]	; 0x38
		g->t.clipx0 = x;
 8002146:	87e1      	strh	r1, [r4, #62]	; 0x3e
		g->t.clipy0 = y;
 8002148:	5362      	strh	r2, [r4, r5]
		g->t.clipx1 = 32767;	//x + mf_get_string_width(font, str, 0, 0) + font->baseline_x;
 800214a:	3502      	adds	r5, #2
 800214c:	5367      	strh	r7, [r4, r5]
		g->t.clipy1 = y + font->height;
 800214e:	2744      	movs	r7, #68	; 0x44
 8002150:	7a45      	ldrb	r5, [r0, #9]
 8002152:	1955      	adds	r5, r2, r5
 8002154:	53e5      	strh	r5, [r4, r7]
		g->t.color = color;
 8002156:	253c      	movs	r5, #60	; 0x3c
 8002158:	5566      	strb	r6, [r4, r5]

		mf_render_aligned(font, x+font->baseline_x, y, MF_ALIGN_LEFT, str, 0, drawcharglyph, g);
 800215a:	250c      	movs	r5, #12
 800215c:	5745      	ldrsb	r5, [r0, r5]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	4b07      	ldr	r3, [pc, #28]	; (8002184 <gdispGDrawString+0x54>)
 8002166:	1949      	adds	r1, r1, r5
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	b209      	sxth	r1, r1
 800216c:	9403      	str	r4, [sp, #12]
 800216e:	2300      	movs	r3, #0
 8002170:	f001 f814 	bl	800319c <mf_render_aligned>
		autoflush(g);
 8002174:	1c20      	adds	r0, r4, #0
 8002176:	f001 fbb7 	bl	80038e8 <gdisp_lld_flush>
		MUTEX_EXIT(g);
	}
 800217a:	b005      	add	sp, #20
 800217c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	00007fff 	.word	0x00007fff
 8002184:	08001a89 	.word	0x08001a89

08002188 <gdispGFillString>:

	void gdispGFillString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color, color_t bgcolor) {
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	4657      	mov	r7, sl
 800218c:	464e      	mov	r6, r9
 800218e:	4645      	mov	r5, r8
 8002190:	b4e0      	push	{r5, r6, r7}
 8002192:	b084      	sub	sp, #16
 8002194:	4698      	mov	r8, r3
 8002196:	ab0c      	add	r3, sp, #48	; 0x30
 8002198:	cb20      	ldmia	r3!, {r5}
 800219a:	1c04      	adds	r4, r0, #0
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	1c0e      	adds	r6, r1, #0
 80021a0:	469a      	mov	sl, r3
 80021a2:	ab0e      	add	r3, sp, #56	; 0x38
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	1c17      	adds	r7, r2, #0
 80021a8:	4699      	mov	r9, r3
		if (!font)
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	d037      	beq.n	800221e <gdispGFillString+0x96>
			return;
		MUTEX_ENTER(g);
		g->p.cx = mf_get_string_width(font, str, 0, 0) + font->baseline_x;
 80021ae:	4641      	mov	r1, r8
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	1c28      	adds	r0, r5, #0
 80021b6:	f000 ffc5 	bl	8003144 <mf_get_string_width>
 80021ba:	230c      	movs	r3, #12
		g->p.cy = font->height;
		g->t.font = font;
		g->t.clipx0 = g->p.x = x;
		g->t.clipy0 = g->p.y = y;
 80021bc:	2240      	movs	r2, #64	; 0x40

	void gdispGFillString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color, color_t bgcolor) {
		if (!font)
			return;
		MUTEX_ENTER(g);
		g->p.cx = mf_get_string_width(font, str, 0, 0) + font->baseline_x;
 80021be:	56eb      	ldrsb	r3, [r5, r3]
 80021c0:	1818      	adds	r0, r3, r0
 80021c2:	b280      	uxth	r0, r0
 80021c4:	84a0      	strh	r0, [r4, #36]	; 0x24
		g->p.cy = font->height;
 80021c6:	7a6b      	ldrb	r3, [r5, #9]
		g->t.font = font;
		g->t.clipx0 = g->p.x = x;
 80021c8:	8426      	strh	r6, [r4, #32]
 80021ca:	87e6      	strh	r6, [r4, #62]	; 0x3e
		g->t.clipy0 = g->p.y = y;
		g->t.clipx1 = g->p.x+g->p.cx;
 80021cc:	b2b6      	uxth	r6, r6
	void gdispGFillString(GDisplay *g, coord_t x, coord_t y, const char *str, font_t font, color_t color, color_t bgcolor) {
		if (!font)
			return;
		MUTEX_ENTER(g);
		g->p.cx = mf_get_string_width(font, str, 0, 0) + font->baseline_x;
		g->p.cy = font->height;
 80021ce:	84e3      	strh	r3, [r4, #38]	; 0x26
		g->t.font = font;
 80021d0:	63a5      	str	r5, [r4, #56]	; 0x38
		g->t.clipx0 = g->p.x = x;
		g->t.clipy0 = g->p.y = y;
 80021d2:	8467      	strh	r7, [r4, #34]	; 0x22
		g->t.clipx1 = g->p.x+g->p.cx;
 80021d4:	1980      	adds	r0, r0, r6
		MUTEX_ENTER(g);
		g->p.cx = mf_get_string_width(font, str, 0, 0) + font->baseline_x;
		g->p.cy = font->height;
		g->t.font = font;
		g->t.clipx0 = g->p.x = x;
		g->t.clipy0 = g->p.y = y;
 80021d6:	52a7      	strh	r7, [r4, r2]
		g->t.clipx1 = g->p.x+g->p.cx;
 80021d8:	3202      	adds	r2, #2
 80021da:	52a0      	strh	r0, [r4, r2]
		g->t.clipy1 = g->p.y+g->p.cy;
 80021dc:	19db      	adds	r3, r3, r7
 80021de:	3202      	adds	r2, #2
 80021e0:	52a3      	strh	r3, [r4, r2]
		g->t.color = color;
 80021e2:	233c      	movs	r3, #60	; 0x3c
 80021e4:	4652      	mov	r2, sl
 80021e6:	54e2      	strb	r2, [r4, r3]
		g->t.bgcolor = g->p.color = bgcolor;
 80021e8:	464a      	mov	r2, r9
 80021ea:	3b0c      	subs	r3, #12
 80021ec:	54e2      	strb	r2, [r4, r3]
 80021ee:	330d      	adds	r3, #13
 80021f0:	54e2      	strb	r2, [r4, r3]
				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
					gdisp_lld_write_stop(g);
					g->flags &= ~GDISP_FLG_SCRSTREAM;
				}
			#endif
			gdisp_lld_fill_area(g);
 80021f2:	1c20      	adds	r0, r4, #0
 80021f4:	f001 fa0c 	bl	8003610 <gdisp_lld_fill_area>
		g->t.color = color;
		g->t.bgcolor = g->p.color = bgcolor;

		TEST_CLIP_AREA(g) {
			fillarea(g);
			mf_render_aligned(font, x+font->baseline_x, y, MF_ALIGN_LEFT, str, 0, fillcharglyph, g);
 80021f8:	4643      	mov	r3, r8
 80021fa:	210c      	movs	r1, #12
 80021fc:	5669      	ldrsb	r1, [r5, r1]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <gdispGFillString+0xa4>)
 8002206:	1871      	adds	r1, r6, r1
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	1c28      	adds	r0, r5, #0
 800220c:	b209      	sxth	r1, r1
 800220e:	9403      	str	r4, [sp, #12]
 8002210:	1c3a      	adds	r2, r7, #0
 8002212:	2300      	movs	r3, #0
 8002214:	f000 ffc2 	bl	800319c <mf_render_aligned>
		}

		autoflush(g);
 8002218:	1c20      	adds	r0, r4, #0
 800221a:	f001 fb65 	bl	80038e8 <gdisp_lld_flush>
		MUTEX_EXIT(g);
	}
 800221e:	b004      	add	sp, #16
 8002220:	bc1c      	pop	{r2, r3, r4}
 8002222:	4690      	mov	r8, r2
 8002224:	4699      	mov	r9, r3
 8002226:	46a2      	mov	sl, r4
 8002228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	08001aad 	.word	0x08001aad

08002230 <gdispGDrawStringBox>:

	void gdispGDrawStringBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, font_t font, color_t color, justify_t justify) {
 8002230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002232:	4644      	mov	r4, r8
 8002234:	465f      	mov	r7, fp
 8002236:	4656      	mov	r6, sl
 8002238:	464d      	mov	r5, r9
 800223a:	b4f0      	push	{r4, r5, r6, r7}
 800223c:	b089      	sub	sp, #36	; 0x24
 800223e:	1c1e      	adds	r6, r3, #0
 8002240:	ab12      	add	r3, sp, #72	; 0x48
 8002242:	1c04      	adds	r4, r0, #0
 8002244:	2000      	movs	r0, #0
 8002246:	5e18      	ldrsh	r0, [r3, r0]
 8002248:	ab15      	add	r3, sp, #84	; 0x54
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	9005      	str	r0, [sp, #20]
 800224e:	469b      	mov	fp, r3
 8002250:	ab16      	add	r3, sp, #88	; 0x58
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002256:	4698      	mov	r8, r3
		coord_t		totalHeight;

		if (!font)
 8002258:	2800      	cmp	r0, #0
 800225a:	d039      	beq.n	80022d0 <gdispGDrawStringBox+0xa0>
			return;
		MUTEX_ENTER(g);

		// Apply padding
		#if GDISP_NEED_TEXT_BOXPADLR != 0 || GDISP_NEED_TEXT_BOXPADTB != 0
			if (!(justify & justifyNoPad)) {
 800225c:	075b      	lsls	r3, r3, #29
 800225e:	d53e      	bpl.n	80022de <gdispGDrawStringBox+0xae>
			}
		#endif

		// Save the clipping area
		g->t.clipx0 = x;
		g->t.clipy0 = y;
 8002260:	2340      	movs	r3, #64	; 0x40
				#endif
			}
		#endif

		// Save the clipping area
		g->t.clipx0 = x;
 8002262:	87e1      	strh	r1, [r4, #62]	; 0x3e
		g->t.clipy0 = y;
		g->t.clipx1 = x+cx;
		g->t.clipy1 = y+cy;
 8002264:	9d05      	ldr	r5, [sp, #20]
			}
		#endif

		// Save the clipping area
		g->t.clipx0 = x;
		g->t.clipy0 = y;
 8002266:	52e2      	strh	r2, [r4, r3]
		g->t.clipx1 = x+cx;
 8002268:	b28b      	uxth	r3, r1
 800226a:	199f      	adds	r7, r3, r6
 800226c:	4699      	mov	r9, r3
 800226e:	2342      	movs	r3, #66	; 0x42
		g->t.clipy1 = y+cy;
 8002270:	46ac      	mov	ip, r5
		#endif

		// Save the clipping area
		g->t.clipx0 = x;
		g->t.clipy0 = y;
		g->t.clipx1 = x+cx;
 8002272:	b23f      	sxth	r7, r7
 8002274:	52e7      	strh	r7, [r4, r3]
		g->t.clipy1 = y+cy;
 8002276:	b293      	uxth	r3, r2
 8002278:	469a      	mov	sl, r3
 800227a:	4463      	add	r3, ip
 800227c:	b29b      	uxth	r3, r3
 800227e:	1c1d      	adds	r5, r3, #0
 8002280:	9307      	str	r3, [sp, #28]
 8002282:	2344      	movs	r3, #68	; 0x44
 8002284:	52e5      	strh	r5, [r4, r3]
				totalHeight = 0;
				mf_wordwrap(font, cx, str, mf_countline_callback, &totalHeight);
				totalHeight *= font->height;
			} else
		#endif
		totalHeight = font->height;
 8002286:	7a43      	ldrb	r3, [r0, #9]

		// Select the anchor position
		switch((justify & JUSTIFYMASK_TOPBOTTOM)) {
 8002288:	4645      	mov	r5, r8
				totalHeight = 0;
				mf_wordwrap(font, cx, str, mf_countline_callback, &totalHeight);
				totalHeight *= font->height;
			} else
		#endif
		totalHeight = font->height;
 800228a:	9306      	str	r3, [sp, #24]

		// Select the anchor position
		switch((justify & JUSTIFYMASK_TOPBOTTOM)) {
 800228c:	2330      	movs	r3, #48	; 0x30
 800228e:	402b      	ands	r3, r5
 8002290:	2b10      	cmp	r3, #16
 8002292:	d005      	beq.n	80022a0 <gdispGDrawStringBox+0x70>
 8002294:	2b20      	cmp	r3, #32
 8002296:	d12d      	bne.n	80022f4 <gdispGDrawStringBox+0xc4>
		case justifyTop:
			break;
		case justifyBottom:
			y += cy - totalHeight;
 8002298:	9b06      	ldr	r3, [sp, #24]
 800229a:	9a07      	ldr	r2, [sp, #28]
 800229c:	1ad2      	subs	r2, r2, r3
 800229e:	b212      	sxth	r2, r2
			break;
		default:	// justifyMiddle
			y += (cy+1 - totalHeight)/2;
			break;
		}
		switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 80022a0:	2303      	movs	r3, #3
 80022a2:	4645      	mov	r5, r8
 80022a4:	402b      	ands	r3, r5
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d032      	beq.n	8002310 <gdispGDrawStringBox+0xe0>
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d137      	bne.n	800231e <gdispGDrawStringBox+0xee>
			break;
		}

		/* Render */
		g->t.font = font;
		g->t.color = color;
 80022ae:	213c      	movs	r1, #60	; 0x3c
 80022b0:	465d      	mov	r5, fp
		default:	// justifyLeft
			break;
		}

		/* Render */
		g->t.font = font;
 80022b2:	63a0      	str	r0, [r4, #56]	; 0x38
		g->t.color = color;
 80022b4:	5465      	strb	r5, [r4, r1]
				g->t.wrapy = y;

				mf_wordwrap(font, cx, str, mf_drawline_callback, g);
			} else
		#endif
		mf_render_aligned(font, x, y, (justify & JUSTIFYMASK_LEFTRIGHT), str, 0, drawcharglyph, g);
 80022b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80022b8:	9403      	str	r4, [sp, #12]
 80022ba:	9100      	str	r1, [sp, #0]
 80022bc:	2100      	movs	r1, #0
 80022be:	9101      	str	r1, [sp, #4]
 80022c0:	4918      	ldr	r1, [pc, #96]	; (8002324 <gdispGDrawStringBox+0xf4>)
 80022c2:	9102      	str	r1, [sp, #8]
 80022c4:	1c39      	adds	r1, r7, #0
 80022c6:	f000 ff69 	bl	800319c <mf_render_aligned>

		autoflush(g);
 80022ca:	1c20      	adds	r0, r4, #0
 80022cc:	f001 fb0c 	bl	80038e8 <gdisp_lld_flush>
		MUTEX_EXIT(g);
	}
 80022d0:	b009      	add	sp, #36	; 0x24
 80022d2:	bc3c      	pop	{r2, r3, r4, r5}
 80022d4:	4690      	mov	r8, r2
 80022d6:	4699      	mov	r9, r3
 80022d8:	46a2      	mov	sl, r4
 80022da:	46ab      	mov	fp, r5
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					x += GDISP_NEED_TEXT_BOXPADLR;
					cx -= 2*GDISP_NEED_TEXT_BOXPADLR;
				#endif
				#if GDISP_NEED_TEXT_BOXPADTB != 0
					y += GDISP_NEED_TEXT_BOXPADTB;
					cy -= 2*GDISP_NEED_TEXT_BOXPADTB;
 80022de:	9d05      	ldr	r5, [sp, #20]

		// Apply padding
		#if GDISP_NEED_TEXT_BOXPADLR != 0 || GDISP_NEED_TEXT_BOXPADTB != 0
			if (!(justify & justifyNoPad)) {
				#if GDISP_NEED_TEXT_BOXPADLR != 0
					x += GDISP_NEED_TEXT_BOXPADLR;
 80022e0:	3101      	adds	r1, #1
					cx -= 2*GDISP_NEED_TEXT_BOXPADLR;
				#endif
				#if GDISP_NEED_TEXT_BOXPADTB != 0
					y += GDISP_NEED_TEXT_BOXPADTB;
					cy -= 2*GDISP_NEED_TEXT_BOXPADTB;
 80022e2:	3d02      	subs	r5, #2
		// Apply padding
		#if GDISP_NEED_TEXT_BOXPADLR != 0 || GDISP_NEED_TEXT_BOXPADTB != 0
			if (!(justify & justifyNoPad)) {
				#if GDISP_NEED_TEXT_BOXPADLR != 0
					x += GDISP_NEED_TEXT_BOXPADLR;
					cx -= 2*GDISP_NEED_TEXT_BOXPADLR;
 80022e4:	3e02      	subs	r6, #2
				#endif
				#if GDISP_NEED_TEXT_BOXPADTB != 0
					y += GDISP_NEED_TEXT_BOXPADTB;
 80022e6:	3201      	adds	r2, #1
					cy -= 2*GDISP_NEED_TEXT_BOXPADTB;
 80022e8:	b22b      	sxth	r3, r5

		// Apply padding
		#if GDISP_NEED_TEXT_BOXPADLR != 0 || GDISP_NEED_TEXT_BOXPADTB != 0
			if (!(justify & justifyNoPad)) {
				#if GDISP_NEED_TEXT_BOXPADLR != 0
					x += GDISP_NEED_TEXT_BOXPADLR;
 80022ea:	b209      	sxth	r1, r1
					cx -= 2*GDISP_NEED_TEXT_BOXPADLR;
 80022ec:	b236      	sxth	r6, r6
				#endif
				#if GDISP_NEED_TEXT_BOXPADTB != 0
					y += GDISP_NEED_TEXT_BOXPADTB;
 80022ee:	b212      	sxth	r2, r2
					cy -= 2*GDISP_NEED_TEXT_BOXPADTB;
 80022f0:	9305      	str	r3, [sp, #20]
 80022f2:	e7b5      	b.n	8002260 <gdispGDrawStringBox+0x30>
			break;
		case justifyBottom:
			y += cy - totalHeight;
			break;
		default:	// justifyMiddle
			y += (cy+1 - totalHeight)/2;
 80022f4:	9d05      	ldr	r5, [sp, #20]
 80022f6:	9b06      	ldr	r3, [sp, #24]
 80022f8:	3501      	adds	r5, #1
 80022fa:	1aed      	subs	r5, r5, r3
 80022fc:	0fea      	lsrs	r2, r5, #31
 80022fe:	1952      	adds	r2, r2, r5
			break;
		}
		switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 8002300:	2303      	movs	r3, #3
 8002302:	4645      	mov	r5, r8
			break;
		case justifyBottom:
			y += cy - totalHeight;
			break;
		default:	// justifyMiddle
			y += (cy+1 - totalHeight)/2;
 8002304:	1052      	asrs	r2, r2, #1
 8002306:	4452      	add	r2, sl
 8002308:	b212      	sxth	r2, r2
			break;
		}
		switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 800230a:	402b      	ands	r3, r5
 800230c:	2b01      	cmp	r3, #1
 800230e:	d1cc      	bne.n	80022aa <gdispGDrawStringBox+0x7a>
		case justifyCenter:
			x += (cx + 1) / 2;
 8002310:	3601      	adds	r6, #1
 8002312:	0ff7      	lsrs	r7, r6, #31
 8002314:	19be      	adds	r6, r7, r6
 8002316:	1076      	asrs	r6, r6, #1
 8002318:	444e      	add	r6, r9
 800231a:	b237      	sxth	r7, r6
			break;
 800231c:	e7c7      	b.n	80022ae <gdispGDrawStringBox+0x7e>
			break;
		default:	// justifyMiddle
			y += (cy+1 - totalHeight)/2;
			break;
		}
		switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 800231e:	1c0f      	adds	r7, r1, #0
 8002320:	e7c5      	b.n	80022ae <gdispGDrawStringBox+0x7e>
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	08001a89 	.word	0x08001a89

08002328 <gdispGFillStringBox>:

		autoflush(g);
		MUTEX_EXIT(g);
	}

	void gdispGFillStringBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, const char* str, font_t font, color_t color, color_t bgcolor, justify_t justify) {
 8002328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800232a:	465f      	mov	r7, fp
 800232c:	4656      	mov	r6, sl
 800232e:	464d      	mov	r5, r9
 8002330:	4644      	mov	r4, r8
 8002332:	b4f0      	push	{r4, r5, r6, r7}
 8002334:	b087      	sub	sp, #28
 8002336:	1c1e      	adds	r6, r3, #0
 8002338:	ab10      	add	r3, sp, #64	; 0x40
 800233a:	2500      	movs	r5, #0
 800233c:	5f5d      	ldrsh	r5, [r3, r5]
 800233e:	ab13      	add	r3, sp, #76	; 0x4c
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	1c04      	adds	r4, r0, #0
 8002344:	4698      	mov	r8, r3
 8002346:	ab14      	add	r3, sp, #80	; 0x50
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	4689      	mov	r9, r1
 800234c:	469b      	mov	fp, r3
 800234e:	ab15      	add	r3, sp, #84	; 0x54
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	1c17      	adds	r7, r2, #0
 8002354:	469a      	mov	sl, r3
		coord_t		totalHeight;

		if (!font)
 8002356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002358:	2b00      	cmp	r3, #0
 800235a:	d049      	beq.n	80023f0 <gdispGFillStringBox+0xc8>
			return;
		MUTEX_ENTER(g);

		g->p.x = x;
		g->p.y = y;
 800235c:	8462      	strh	r2, [r4, #34]	; 0x22
		g->p.cy = cy;

		TEST_CLIP_AREA(g) {

			// background fill
			g->p.color = bgcolor;
 800235e:	2330      	movs	r3, #48	; 0x30
 8002360:	465a      	mov	r2, fp

		if (!font)
			return;
		MUTEX_ENTER(g);

		g->p.x = x;
 8002362:	8421      	strh	r1, [r4, #32]
		g->p.y = y;
		g->p.cx = cx;
 8002364:	8486      	strh	r6, [r0, #36]	; 0x24
		g->p.cy = cy;
 8002366:	84c5      	strh	r5, [r0, #38]	; 0x26

		TEST_CLIP_AREA(g) {

			// background fill
			g->p.color = bgcolor;
 8002368:	54c2      	strb	r2, [r0, r3]
				if ((g->flags & GDISP_FLG_SCRSTREAM)) {
					gdisp_lld_write_stop(g);
					g->flags &= ~GDISP_FLG_SCRSTREAM;
				}
			#endif
			gdisp_lld_fill_area(g);
 800236a:	f001 f951 	bl	8003610 <gdisp_lld_fill_area>
			g->p.color = bgcolor;
			fillarea(g);

			// Apply padding
			#if GDISP_NEED_TEXT_BOXPADLR != 0 || GDISP_NEED_TEXT_BOXPADTB != 0
				if (!(justify & justifyNoPad)) {
 800236e:	4653      	mov	r3, sl
 8002370:	075b      	lsls	r3, r3, #29
 8002372:	d544      	bpl.n	80023fe <gdispGFillStringBox+0xd6>
					#endif
				}
			#endif

			// Save the clipping area
			g->t.clipx0 = x;
 8002374:	464b      	mov	r3, r9
 8002376:	87e3      	strh	r3, [r4, #62]	; 0x3e
			g->t.clipy0 = y;
 8002378:	2340      	movs	r3, #64	; 0x40
			g->t.clipx1 = x+cx;
 800237a:	466a      	mov	r2, sp
				}
			#endif

			// Save the clipping area
			g->t.clipx0 = x;
			g->t.clipy0 = y;
 800237c:	52e7      	strh	r7, [r4, r3]
			g->t.clipx1 = x+cx;
 800237e:	464b      	mov	r3, r9
 8002380:	8213      	strh	r3, [r2, #16]
 8002382:	2342      	movs	r3, #66	; 0x42
 8002384:	8a10      	ldrh	r0, [r2, #16]
			g->t.clipy1 = y+cy;
 8002386:	2244      	movs	r2, #68	; 0x44
			#endif

			// Save the clipping area
			g->t.clipx0 = x;
			g->t.clipy0 = y;
			g->t.clipx1 = x+cx;
 8002388:	1981      	adds	r1, r0, r6
 800238a:	b209      	sxth	r1, r1
 800238c:	52e1      	strh	r1, [r4, r3]
			g->t.clipy1 = y+cy;
 800238e:	b2bb      	uxth	r3, r7
 8002390:	469c      	mov	ip, r3
 8002392:	195b      	adds	r3, r3, r5
 8002394:	b29b      	uxth	r3, r3
 8002396:	52a3      	strh	r3, [r4, r2]
					totalHeight = 0;
					mf_wordwrap(font, cx, str, mf_countline_callback, &totalHeight);
					totalHeight *= font->height;
				} else
			#endif
			totalHeight = font->height;
 8002398:	9a12      	ldr	r2, [sp, #72]	; 0x48

			// Save the clipping area
			g->t.clipx0 = x;
			g->t.clipy0 = y;
			g->t.clipx1 = x+cx;
			g->t.clipy1 = y+cy;
 800239a:	9305      	str	r3, [sp, #20]
					totalHeight = 0;
					mf_wordwrap(font, cx, str, mf_countline_callback, &totalHeight);
					totalHeight *= font->height;
				} else
			#endif
			totalHeight = font->height;
 800239c:	7a52      	ldrb	r2, [r2, #9]

			// Select the anchor position
			switch((justify & JUSTIFYMASK_TOPBOTTOM)) {
 800239e:	4653      	mov	r3, sl
					totalHeight = 0;
					mf_wordwrap(font, cx, str, mf_countline_callback, &totalHeight);
					totalHeight *= font->height;
				} else
			#endif
			totalHeight = font->height;
 80023a0:	9204      	str	r2, [sp, #16]

			// Select the anchor position
			switch((justify & JUSTIFYMASK_TOPBOTTOM)) {
 80023a2:	2230      	movs	r2, #48	; 0x30
 80023a4:	401a      	ands	r2, r3
 80023a6:	2a10      	cmp	r2, #16
 80023a8:	d005      	beq.n	80023b6 <gdispGFillStringBox+0x8e>
 80023aa:	2a20      	cmp	r2, #32
 80023ac:	d134      	bne.n	8002418 <gdispGFillStringBox+0xf0>
			case justifyTop:
				break;
			case justifyBottom:
				y += cy - totalHeight;
 80023ae:	9b04      	ldr	r3, [sp, #16]
 80023b0:	9a05      	ldr	r2, [sp, #20]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	b21f      	sxth	r7, r3
				break;
			default:	// justifyMiddle
				y += (cy+1 - totalHeight)/2;
				break;
			}
			switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 80023b6:	2303      	movs	r3, #3
 80023b8:	4652      	mov	r2, sl
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d038      	beq.n	8002432 <gdispGFillStringBox+0x10a>
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d127      	bne.n	8002414 <gdispGFillStringBox+0xec>
			default:	// justifyLeft
				break;
			}

			/* Render */
			g->t.font = font;
 80023c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
			g->t.color = color;
 80023c6:	4640      	mov	r0, r8
			default:	// justifyLeft
				break;
			}

			/* Render */
			g->t.font = font;
 80023c8:	63a2      	str	r2, [r4, #56]	; 0x38
			g->t.color = color;
 80023ca:	223c      	movs	r2, #60	; 0x3c
 80023cc:	54a0      	strb	r0, [r4, r2]
			g->t.bgcolor = bgcolor;
 80023ce:	4658      	mov	r0, fp
 80023d0:	3201      	adds	r2, #1
 80023d2:	54a0      	strb	r0, [r4, r2]
					g->t.wrapy = y;

					mf_wordwrap(font, cx, str, mf_fillline_callback, g);
				} else
			#endif
			mf_render_aligned(font, x, y, (justify & JUSTIFYMASK_LEFTRIGHT), str, 0, fillcharglyph, g);
 80023d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80023d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	9201      	str	r2, [sp, #4]
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <gdispGFillStringBox+0x118>)
 80023e0:	9403      	str	r4, [sp, #12]
 80023e2:	9202      	str	r2, [sp, #8]
 80023e4:	1c3a      	adds	r2, r7, #0
 80023e6:	f000 fed9 	bl	800319c <mf_render_aligned>
		}

		autoflush(g);
 80023ea:	1c20      	adds	r0, r4, #0
 80023ec:	f001 fa7c 	bl	80038e8 <gdisp_lld_flush>
		MUTEX_EXIT(g);
	}
 80023f0:	b007      	add	sp, #28
 80023f2:	bc3c      	pop	{r2, r3, r4, r5}
 80023f4:	4690      	mov	r8, r2
 80023f6:	4699      	mov	r9, r3
 80023f8:	46a2      	mov	sl, r4
 80023fa:	46ab      	mov	fp, r5
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

			// Apply padding
			#if GDISP_NEED_TEXT_BOXPADLR != 0 || GDISP_NEED_TEXT_BOXPADTB != 0
				if (!(justify & justifyNoPad)) {
					#if GDISP_NEED_TEXT_BOXPADLR != 0
						x += GDISP_NEED_TEXT_BOXPADLR;
 80023fe:	464b      	mov	r3, r9
 8002400:	3301      	adds	r3, #1
 8002402:	b21b      	sxth	r3, r3
 8002404:	4699      	mov	r9, r3
						cx -= 2*GDISP_NEED_TEXT_BOXPADLR;
 8002406:	3e02      	subs	r6, #2
					#endif
					#if GDISP_NEED_TEXT_BOXPADTB != 0
						y += GDISP_NEED_TEXT_BOXPADTB;
 8002408:	1c7b      	adds	r3, r7, #1
						cy -= 2*GDISP_NEED_TEXT_BOXPADTB;
 800240a:	3d02      	subs	r5, #2
			// Apply padding
			#if GDISP_NEED_TEXT_BOXPADLR != 0 || GDISP_NEED_TEXT_BOXPADTB != 0
				if (!(justify & justifyNoPad)) {
					#if GDISP_NEED_TEXT_BOXPADLR != 0
						x += GDISP_NEED_TEXT_BOXPADLR;
						cx -= 2*GDISP_NEED_TEXT_BOXPADLR;
 800240c:	b236      	sxth	r6, r6
					#endif
					#if GDISP_NEED_TEXT_BOXPADTB != 0
						y += GDISP_NEED_TEXT_BOXPADTB;
 800240e:	b21f      	sxth	r7, r3
						cy -= 2*GDISP_NEED_TEXT_BOXPADTB;
 8002410:	b22d      	sxth	r5, r5
 8002412:	e7af      	b.n	8002374 <gdispGFillStringBox+0x4c>
				break;
			default:	// justifyMiddle
				y += (cy+1 - totalHeight)/2;
				break;
			}
			switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 8002414:	4649      	mov	r1, r9
 8002416:	e7d5      	b.n	80023c4 <gdispGFillStringBox+0x9c>
				break;
			case justifyBottom:
				y += cy - totalHeight;
				break;
			default:	// justifyMiddle
				y += (cy+1 - totalHeight)/2;
 8002418:	9b04      	ldr	r3, [sp, #16]
 800241a:	3501      	adds	r5, #1
 800241c:	1aed      	subs	r5, r5, r3
 800241e:	0feb      	lsrs	r3, r5, #31
 8002420:	195d      	adds	r5, r3, r5
				break;
			}
			switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 8002422:	4652      	mov	r2, sl
 8002424:	2303      	movs	r3, #3
				break;
			case justifyBottom:
				y += cy - totalHeight;
				break;
			default:	// justifyMiddle
				y += (cy+1 - totalHeight)/2;
 8002426:	106d      	asrs	r5, r5, #1
 8002428:	4465      	add	r5, ip
 800242a:	b22f      	sxth	r7, r5
				break;
			}
			switch((justify & JUSTIFYMASK_LEFTRIGHT)) {
 800242c:	4013      	ands	r3, r2
 800242e:	2b01      	cmp	r3, #1
 8002430:	d1c6      	bne.n	80023c0 <gdispGFillStringBox+0x98>
			case justifyCenter:
				x += (cx + 1) / 2;
 8002432:	3601      	adds	r6, #1
 8002434:	0ff1      	lsrs	r1, r6, #31
 8002436:	1989      	adds	r1, r1, r6
 8002438:	1049      	asrs	r1, r1, #1
 800243a:	1841      	adds	r1, r0, r1
 800243c:	b209      	sxth	r1, r1
				break;
 800243e:	e7c1      	b.n	80023c4 <gdispGFillStringBox+0x9c>
 8002440:	08001aad 	.word	0x08001aad

08002444 <gdispGetFontMetric>:
		autoflush(g);
		MUTEX_EXIT(g);
	}

	coord_t gdispGetFontMetric(font_t font, fontmetric_t metric) {
		if (!font)
 8002444:	2800      	cmp	r0, #0
 8002446:	d005      	beq.n	8002454 <gdispGetFontMetric+0x10>
			return 0;
		/* No mutex required as we only read static data */
		switch(metric) {
 8002448:	2907      	cmp	r1, #7
 800244a:	d803      	bhi.n	8002454 <gdispGetFontMetric+0x10>
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <gdispGetFontMetric+0x3c>)
 800244e:	0089      	lsls	r1, r1, #2
 8002450:	585b      	ldr	r3, [r3, r1]
 8002452:	469f      	mov	pc, r3
		case fontHeight:			return font->height;
		case fontDescendersHeight:	return font->height - font->baseline_y;
		case fontLineSpacing:		return font->line_height;
		case fontCharPadding:		return 0;
 8002454:	2000      	movs	r0, #0
 8002456:	b200      	sxth	r0, r0
		case fontMaxWidth:			return font->max_x_advance;
		case fontBaselineX:			return font->baseline_x;
		case fontBaselineY:			return font->baseline_y;
		}
		return 0;
	}
 8002458:	4770      	bx	lr
		case fontDescendersHeight:	return font->height - font->baseline_y;
		case fontLineSpacing:		return font->line_height;
		case fontCharPadding:		return 0;
		case fontMinWidth:			return font->min_x_advance;
		case fontMaxWidth:			return font->max_x_advance;
		case fontBaselineX:			return font->baseline_x;
 800245a:	7b00      	ldrb	r0, [r0, #12]
 800245c:	b240      	sxtb	r0, r0
 800245e:	b280      	uxth	r0, r0
 8002460:	e7f9      	b.n	8002456 <gdispGetFontMetric+0x12>
	coord_t gdispGetFontMetric(font_t font, fontmetric_t metric) {
		if (!font)
			return 0;
		/* No mutex required as we only read static data */
		switch(metric) {
		case fontHeight:			return font->height;
 8002462:	7a40      	ldrb	r0, [r0, #9]
 8002464:	e7f7      	b.n	8002456 <gdispGetFontMetric+0x12>
		case fontDescendersHeight:	return font->height - font->baseline_y;
 8002466:	7a43      	ldrb	r3, [r0, #9]
 8002468:	7b40      	ldrb	r0, [r0, #13]
 800246a:	1a18      	subs	r0, r3, r0
 800246c:	b280      	uxth	r0, r0
 800246e:	e7f2      	b.n	8002456 <gdispGetFontMetric+0x12>
		case fontLineSpacing:		return font->line_height;
 8002470:	7b80      	ldrb	r0, [r0, #14]
 8002472:	e7f0      	b.n	8002456 <gdispGetFontMetric+0x12>
		case fontCharPadding:		return 0;
		case fontMinWidth:			return font->min_x_advance;
 8002474:	7a80      	ldrb	r0, [r0, #10]
 8002476:	e7ee      	b.n	8002456 <gdispGetFontMetric+0x12>
		case fontMaxWidth:			return font->max_x_advance;
 8002478:	7ac0      	ldrb	r0, [r0, #11]
 800247a:	e7ec      	b.n	8002456 <gdispGetFontMetric+0x12>
		case fontBaselineX:			return font->baseline_x;
		case fontBaselineY:			return font->baseline_y;
 800247c:	7b40      	ldrb	r0, [r0, #13]
 800247e:	e7ea      	b.n	8002456 <gdispGetFontMetric+0x12>
 8002480:	08006854 	.word	0x08006854

08002484 <gdispGetCharWidth>:
		}
		return 0;
	}

	coord_t gdispGetCharWidth(char c, font_t font) {
 8002484:	b508      	push	{r3, lr}
		if (!font)
 8002486:	2900      	cmp	r1, #0
 8002488:	d007      	beq.n	800249a <gdispGetCharWidth+0x16>
 800248a:	1c0b      	adds	r3, r1, #0
 800248c:	1c01      	adds	r1, r0, #0
			return 0;
		/* No mutex required as we only read static data */
		return mf_character_width(font, c);
 800248e:	1c18      	adds	r0, r3, #0
 8002490:	f000 fdd2 	bl	8003038 <mf_character_width>
 8002494:	b280      	uxth	r0, r0
 8002496:	b200      	sxth	r0, r0
	}
 8002498:	bd08      	pop	{r3, pc}
		return 0;
	}

	coord_t gdispGetCharWidth(char c, font_t font) {
		if (!font)
			return 0;
 800249a:	2000      	movs	r0, #0
 800249c:	e7fb      	b.n	8002496 <gdispGetCharWidth+0x12>
 800249e:	46c0      	nop			; (mov r8, r8)

080024a0 <gdispGetStringWidthCount>:
		/* No mutex required as we only read static data */
		return mf_character_width(font, c);
	}

	coord_t gdispGetStringWidthCount(const char* str, font_t font, uint16_t count) {
 80024a0:	b508      	push	{r3, lr}
		if (!str || !font)
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d009      	beq.n	80024ba <gdispGetStringWidthCount+0x1a>
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d007      	beq.n	80024ba <gdispGetStringWidthCount+0x1a>
 80024aa:	1c0b      	adds	r3, r1, #0
 80024ac:	1c01      	adds	r1, r0, #0

		// No mutex required as we only read static data
		#if GDISP_NEED_TEXT_KERNING
			return mf_get_string_width(font, str, count, TRUE);
		#else
			return mf_get_string_width(font, str, count, FALSE);
 80024ae:	1c18      	adds	r0, r3, #0
 80024b0:	2300      	movs	r3, #0
 80024b2:	f000 fe47 	bl	8003144 <mf_get_string_width>
 80024b6:	b200      	sxth	r0, r0
		#endif
	}
 80024b8:	bd08      	pop	{r3, pc}
		return mf_character_width(font, c);
	}

	coord_t gdispGetStringWidthCount(const char* str, font_t font, uint16_t count) {
		if (!str || !font)
			return 0;
 80024ba:	2000      	movs	r0, #0
 80024bc:	e7fb      	b.n	80024b6 <gdispGetStringWidthCount+0x16>
 80024be:	46c0      	nop			; (mov r8, r8)

080024c0 <gdispGetStringWidth>:
		#else
			return mf_get_string_width(font, str, count, FALSE);
		#endif
	}

	coord_t gdispGetStringWidth(const char* str, font_t font) {
 80024c0:	b508      	push	{r3, lr}
		/* No mutex required as we only read static data */
		return mf_character_width(font, c);
	}

	coord_t gdispGetStringWidthCount(const char* str, font_t font, uint16_t count) {
		if (!str || !font)
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d00a      	beq.n	80024dc <gdispGetStringWidth+0x1c>
 80024c6:	2900      	cmp	r1, #0
 80024c8:	d008      	beq.n	80024dc <gdispGetStringWidth+0x1c>
 80024ca:	1c0b      	adds	r3, r1, #0

		// No mutex required as we only read static data
		#if GDISP_NEED_TEXT_KERNING
			return mf_get_string_width(font, str, count, TRUE);
		#else
			return mf_get_string_width(font, str, count, FALSE);
 80024cc:	2200      	movs	r2, #0
 80024ce:	1c01      	adds	r1, r0, #0
 80024d0:	1c18      	adds	r0, r3, #0
 80024d2:	2300      	movs	r3, #0
 80024d4:	f000 fe36 	bl	8003144 <mf_get_string_width>
		#endif
	}

	coord_t gdispGetStringWidth(const char* str, font_t font) {
		return gdispGetStringWidthCount(str, font, 0);
 80024d8:	b200      	sxth	r0, r0
	}
 80024da:	bd08      	pop	{r3, pc}
		return mf_character_width(font, c);
	}

	coord_t gdispGetStringWidthCount(const char* str, font_t font, uint16_t count) {
		if (!str || !font)
			return 0;
 80024dc:	2000      	movs	r0, #0
 80024de:	e7fb      	b.n	80024d8 <gdispGetStringWidth+0x18>

080024e0 <gdispBlendColor>:
		return ARGB2COLOR(a1, r1, g1, b1);
	}
#else
	color_t gdispBlendColor(color_t fg, color_t bg, uint8_t alpha)
	{
		uint16_t fg_ratio = alpha + 1;
 80024e0:	b292      	uxth	r2, r2
		uint16_t bg_ratio = 256 - alpha;
		uint16_t r, g, b;

		r = RED_OF(fg) * fg_ratio;
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d003      	beq.n	80024ee <gdispBlendColor+0xe>
		return ARGB2COLOR(a1, r1, g1, b1);
	}
#else
	color_t gdispBlendColor(color_t fg, color_t bg, uint8_t alpha)
	{
		uint16_t fg_ratio = alpha + 1;
 80024e6:	1c53      	adds	r3, r2, #1
		uint16_t bg_ratio = 256 - alpha;
		uint16_t r, g, b;

		r = RED_OF(fg) * fg_ratio;
 80024e8:	0218      	lsls	r0, r3, #8
 80024ea:	1ac0      	subs	r0, r0, r3
 80024ec:	b280      	uxth	r0, r0
 80024ee:	1c03      	adds	r3, r0, #0
		g = GREEN_OF(fg) * fg_ratio;
		b = BLUE_OF(fg) * fg_ratio;

		r += RED_OF(bg) * bg_ratio;
 80024f0:	2900      	cmp	r1, #0
 80024f2:	d007      	beq.n	8002504 <gdispBlendColor+0x24>
	}
#else
	color_t gdispBlendColor(color_t fg, color_t bg, uint8_t alpha)
	{
		uint16_t fg_ratio = alpha + 1;
		uint16_t bg_ratio = 256 - alpha;
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	1a9a      	subs	r2, r3, r2

		r = RED_OF(fg) * fg_ratio;
		g = GREEN_OF(fg) * fg_ratio;
		b = BLUE_OF(fg) * fg_ratio;

		r += RED_OF(bg) * bg_ratio;
 80024fa:	0211      	lsls	r1, r2, #8
 80024fc:	1a8a      	subs	r2, r1, r2
 80024fe:	b292      	uxth	r2, r2
 8002500:	1883      	adds	r3, r0, r2
 8002502:	b298      	uxth	r0, r3
		g += GREEN_OF(bg) * bg_ratio;
		b += BLUE_OF(bg) * bg_ratio;
 8002504:	b29a      	uxth	r2, r3

		r >>= 8;
 8002506:	4310      	orrs	r0, r2
		g >>= 8;
		b >>= 8;

		return RGB2COLOR(r, g, b);
 8002508:	0a00      	lsrs	r0, r0, #8
 800250a:	b280      	uxth	r0, r0
 800250c:	1e43      	subs	r3, r0, #1
 800250e:	4198      	sbcs	r0, r3
 8002510:	b2c0      	uxtb	r0, r0
	}
 8002512:	4770      	bx	lr

08002514 <gdispContrastColor>:
#endif

color_t gdispContrastColor(color_t color) {
	uint16_t r, g, b;

	r = RED_OF(color) > 128 ? 0 : 255;
 8002514:	4243      	negs	r3, r0
 8002516:	4158      	adcs	r0, r3
	g = GREEN_OF(color) > 128 ? 0 : 255;
	b = BLUE_OF(color) > 128 ? 0 : 255;

	return RGB2COLOR(r, g, b);
 8002518:	b2c0      	uxtb	r0, r0
}
 800251a:	4770      	bx	lr

0800251c <matchfont>:
static const struct mf_font_list_s *fontList;

/**
 * Match a pattern against the font name.
 */
static bool_t matchfont(const char *pattern, const char *name) {
 800251c:	7802      	ldrb	r2, [r0, #0]
 800251e:	780b      	ldrb	r3, [r1, #0]
	while(1) {
		switch (pattern[0]) {
 8002520:	2a00      	cmp	r2, #0
 8002522:	d00f      	beq.n	8002544 <matchfont+0x28>
 8002524:	2a2a      	cmp	r2, #42	; 0x2a
 8002526:	d111      	bne.n	800254c <matchfont+0x30>
		case '*':
			if (name[0] == 0)
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <matchfont+0x1e>
				return pattern[1] == 0;
			if (pattern[1] == name[0])
 800252c:	7842      	ldrb	r2, [r0, #1]
 800252e:	429a      	cmp	r2, r3
 8002530:	d013      	beq.n	800255a <matchfont+0x3e>
 8002532:	784b      	ldrb	r3, [r1, #1]
				pattern++;
			else
				name++;
 8002534:	3101      	adds	r1, #1
 */
static bool_t matchfont(const char *pattern, const char *name) {
	while(1) {
		switch (pattern[0]) {
		case '*':
			if (name[0] == 0)
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f8      	bne.n	800252c <matchfont+0x10>
				return pattern[1] == 0;
 800253a:	7840      	ldrb	r0, [r0, #1]
 800253c:	4243      	negs	r3, r0
 800253e:	4158      	adcs	r0, r3
 8002540:	b2c0      	uxtb	r0, r0
 8002542:	e002      	b.n	800254a <matchfont+0x2e>
				pattern++;
			else
				name++;
			break;
		case 0:
			return name[0] == 0;
 8002544:	4258      	negs	r0, r3
 8002546:	4158      	adcs	r0, r3
 8002548:	b2c0      	uxtb	r0, r0
			pattern++;
			name++;
			break;
		}
	}
}
 800254a:	4770      	bx	lr
				name++;
			break;
		case 0:
			return name[0] == 0;
		default:
			if (name[0] != pattern[0])
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <matchfont+0x44>
 8002550:	7842      	ldrb	r2, [r0, #1]
 8002552:	784b      	ldrb	r3, [r1, #1]
				return FALSE;
			pattern++;
 8002554:	3001      	adds	r0, #1
			name++;
 8002556:	3101      	adds	r1, #1
			break;
 8002558:	e7e2      	b.n	8002520 <matchfont+0x4>
		switch (pattern[0]) {
		case '*':
			if (name[0] == 0)
				return pattern[1] == 0;
			if (pattern[1] == name[0])
				pattern++;
 800255a:	3001      	adds	r0, #1
 800255c:	1c1a      	adds	r2, r3, #0
 800255e:	e7df      	b.n	8002520 <matchfont+0x4>
			break;
		case 0:
			return name[0] == 0;
		default:
			if (name[0] != pattern[0])
				return FALSE;
 8002560:	2000      	movs	r0, #0
 8002562:	e7f2      	b.n	800254a <matchfont+0x2e>

08002564 <gdispOpenFont>:
			break;
		}
	}
}

font_t gdispOpenFont(const char *name) {
 8002564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct mf_font_list_s *fp;
	
	if (!fontList)
 8002566:	4c13      	ldr	r4, [pc, #76]	; (80025b4 <gdispOpenFont+0x50>)
			break;
		}
	}
}

font_t gdispOpenFont(const char *name) {
 8002568:	1c07      	adds	r7, r0, #0
	const struct mf_font_list_s *fp;
	
	if (!fontList)
 800256a:	6826      	ldr	r6, [r4, #0]
 800256c:	2e00      	cmp	r6, #0
 800256e:	d018      	beq.n	80025a2 <gdispOpenFont+0x3e>
			break;
		}
	}
}

font_t gdispOpenFont(const char *name) {
 8002570:	1c34      	adds	r4, r6, #0
 8002572:	e002      	b.n	800257a <gdispOpenFont+0x16>
	
	if (!fontList)
		fontList = mf_get_font_list();
		
	// Try the long names first
	for(fp = fontList; fp; fp = fp->next) {
 8002574:	6824      	ldr	r4, [r4, #0]
 8002576:	2c00      	cmp	r4, #0
 8002578:	d00b      	beq.n	8002592 <gdispOpenFont+0x2e>
		if (matchfont(name, fp->font->full_name))
 800257a:	6865      	ldr	r5, [r4, #4]
 800257c:	1c38      	adds	r0, r7, #0
 800257e:	6829      	ldr	r1, [r5, #0]
 8002580:	f7ff ffcc 	bl	800251c <matchfont>
 8002584:	2800      	cmp	r0, #0
 8002586:	d0f5      	beq.n	8002574 <gdispOpenFont+0x10>
			return fp->font;
	}
	
	/* Return default builtin font.. better than nothing. */
	return mf_get_font_list()->font;
}
 8002588:	1c28      	adds	r0, r5, #0
 800258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (matchfont(name, fp->font->full_name))
			return fp->font;
	}

	// Try the short names if no long names match
	for(fp = fontList; fp; fp = fp->next) {
 800258c:	6836      	ldr	r6, [r6, #0]
 800258e:	2e00      	cmp	r6, #0
 8002590:	d00c      	beq.n	80025ac <gdispOpenFont+0x48>
		if (matchfont(name, fp->font->short_name))
 8002592:	6875      	ldr	r5, [r6, #4]
 8002594:	1c38      	adds	r0, r7, #0
 8002596:	6869      	ldr	r1, [r5, #4]
 8002598:	f7ff ffc0 	bl	800251c <matchfont>
 800259c:	2800      	cmp	r0, #0
 800259e:	d0f5      	beq.n	800258c <gdispOpenFont+0x28>
 80025a0:	e7f2      	b.n	8002588 <gdispOpenFont+0x24>

font_t gdispOpenFont(const char *name) {
	const struct mf_font_list_s *fp;
	
	if (!fontList)
		fontList = mf_get_font_list();
 80025a2:	f000 fd7f 	bl	80030a4 <mf_get_font_list>
 80025a6:	1e06      	subs	r6, r0, #0
 80025a8:	6020      	str	r0, [r4, #0]
		
	// Try the long names first
	for(fp = fontList; fp; fp = fp->next) {
 80025aa:	d1e1      	bne.n	8002570 <gdispOpenFont+0xc>
		if (matchfont(name, fp->font->short_name))
			return fp->font;
	}
	
	/* Return default builtin font.. better than nothing. */
	return mf_get_font_list()->font;
 80025ac:	f000 fd7a 	bl	80030a4 <mf_get_font_list>
 80025b0:	6845      	ldr	r5, [r0, #4]
 80025b2:	e7e9      	b.n	8002588 <gdispOpenFont+0x24>
 80025b4:	20000884 	.word	0x20000884

080025b8 <gdispCloseFont>:
}

void gdispCloseFont(font_t font) {
	if ((font->flags & (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) == (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) {
 80025b8:	223f      	movs	r2, #63	; 0x3f
	
	/* Return default builtin font.. better than nothing. */
	return mf_get_font_list()->font;
}

void gdispCloseFont(font_t font) {
 80025ba:	b508      	push	{r3, lr}
	if ((font->flags & (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) == (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) {
 80025bc:	7bc3      	ldrb	r3, [r0, #15]
 80025be:	4393      	bics	r3, r2
 80025c0:	2bc0      	cmp	r3, #192	; 0xc0
 80025c2:	d000      	beq.n	80025c6 <gdispCloseFont+0xe>
		((struct mf_font_s *)font)->render_character = 0;
		
		/* Release the allocated memory */
		gfxFree((void *)font);
	}
}
 80025c4:	bd08      	pop	{r3, pc}
}

void gdispCloseFont(font_t font) {
	if ((font->flags & (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) == (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) {
		/* Make sure that no-one can successfully use font after closing */
		((struct mf_font_s *)font)->render_character = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	6183      	str	r3, [r0, #24]
		
		/* Release the allocated memory */
		gfxFree((void *)font);
 80025ca:	f001 ff89 	bl	80044e0 <gfxFree>
 80025ce:	e7f9      	b.n	80025c4 <gdispCloseFont+0xc>

080025d0 <gdispScaleFont>:
	}
}

font_t gdispScaleFont(font_t font, uint8_t scale_x, uint8_t scale_y)
{
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	1c07      	adds	r7, r0, #0
	struct mf_scaledfont_s *newfont;
	
	if (!(newfont = gfxAlloc(sizeof(struct mf_scaledfont_s))))
 80025d4:	2024      	movs	r0, #36	; 0x24
		gfxFree((void *)font);
	}
}

font_t gdispScaleFont(font_t font, uint8_t scale_x, uint8_t scale_y)
{
 80025d6:	1c0e      	adds	r6, r1, #0
 80025d8:	1c15      	adds	r5, r2, #0
	struct mf_scaledfont_s *newfont;
	
	if (!(newfont = gfxAlloc(sizeof(struct mf_scaledfont_s))))
 80025da:	f001 ff77 	bl	80044cc <gfxAlloc>
 80025de:	1e04      	subs	r4, r0, #0
 80025e0:	d009      	beq.n	80025f6 <gdispScaleFont+0x26>
		return 0;
	
	mf_scale_font(newfont, font, scale_x, scale_y);
 80025e2:	1c32      	adds	r2, r6, #0
 80025e4:	1c2b      	adds	r3, r5, #0
 80025e6:	1c39      	adds	r1, r7, #0
 80025e8:	f000 ffe6 	bl	80035b8 <mf_scale_font>
	((struct mf_font_s *)newfont)->flags |= FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED;
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	7be3      	ldrb	r3, [r4, #15]
 80025f0:	4252      	negs	r2, r2
 80025f2:	4313      	orrs	r3, r2
 80025f4:	73e3      	strb	r3, [r4, #15]
	return (font_t)newfont;
}
 80025f6:	1c20      	adds	r0, r4, #0
 80025f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)

080025fc <gdispGetFontName>:

const char *gdispGetFontName(font_t font) {
	return font->short_name;
 80025fc:	6840      	ldr	r0, [r0, #4]
}
 80025fe:	4770      	bx	lr

08002600 <gdispAddFont>:

bool_t gdispAddFont(font_t font) {
	struct mf_font_list_s *hdr;

	if ((font->flags & (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) != (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED))
 8002600:	223f      	movs	r2, #63	; 0x3f

const char *gdispGetFontName(font_t font) {
	return font->short_name;
}

bool_t gdispAddFont(font_t font) {
 8002602:	b570      	push	{r4, r5, r6, lr}
	struct mf_font_list_s *hdr;

	if ((font->flags & (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) != (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED))
 8002604:	7bc3      	ldrb	r3, [r0, #15]
 8002606:	4393      	bics	r3, r2
 8002608:	2bc0      	cmp	r3, #192	; 0xc0
 800260a:	d001      	beq.n	8002610 <gdispAddFont+0x10>
		return FALSE;
 800260c:	2000      	movs	r0, #0
	hdr->font = (const struct mf_font_s *)font;
	hdr->next = fontList;
	((struct mf_font_s *)font)->flags &= ~FONT_FLAG_UNLISTED;
	fontList = hdr;
	return TRUE;
}
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	1c04      	adds	r4, r0, #0
	struct mf_font_list_s *hdr;

	if ((font->flags & (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED)) != (FONT_FLAG_DYNAMIC|FONT_FLAG_UNLISTED))
		return FALSE;
		
	if (!(hdr = gfxAlloc(sizeof(struct mf_font_list_s))))
 8002612:	2008      	movs	r0, #8
 8002614:	f001 ff5a 	bl	80044cc <gfxAlloc>
 8002618:	1e05      	subs	r5, r0, #0
 800261a:	d0f7      	beq.n	800260c <gdispAddFont+0xc>
		return FALSE;

	if (!fontList)
 800261c:	4e07      	ldr	r6, [pc, #28]	; (800263c <gdispAddFont+0x3c>)
 800261e:	6830      	ldr	r0, [r6, #0]
 8002620:	2800      	cmp	r0, #0
 8002622:	d008      	beq.n	8002636 <gdispAddFont+0x36>
		fontList = mf_get_font_list();
	hdr->font = (const struct mf_font_s *)font;
	hdr->next = fontList;
	((struct mf_font_s *)font)->flags &= ~FONT_FLAG_UNLISTED;
 8002624:	2240      	movs	r2, #64	; 0x40
		return FALSE;

	if (!fontList)
		fontList = mf_get_font_list();
	hdr->font = (const struct mf_font_s *)font;
	hdr->next = fontList;
 8002626:	6028      	str	r0, [r5, #0]
	if (!(hdr = gfxAlloc(sizeof(struct mf_font_list_s))))
		return FALSE;

	if (!fontList)
		fontList = mf_get_font_list();
	hdr->font = (const struct mf_font_s *)font;
 8002628:	606c      	str	r4, [r5, #4]
	hdr->next = fontList;
	((struct mf_font_s *)font)->flags &= ~FONT_FLAG_UNLISTED;
 800262a:	7be3      	ldrb	r3, [r4, #15]
	fontList = hdr;
	return TRUE;
 800262c:	20ff      	movs	r0, #255	; 0xff

	if (!fontList)
		fontList = mf_get_font_list();
	hdr->font = (const struct mf_font_s *)font;
	hdr->next = fontList;
	((struct mf_font_s *)font)->flags &= ~FONT_FLAG_UNLISTED;
 800262e:	4393      	bics	r3, r2
 8002630:	73e3      	strb	r3, [r4, #15]
	fontList = hdr;
 8002632:	6035      	str	r5, [r6, #0]
	return TRUE;
 8002634:	e7eb      	b.n	800260e <gdispAddFont+0xe>
		
	if (!(hdr = gfxAlloc(sizeof(struct mf_font_list_s))))
		return FALSE;

	if (!fontList)
		fontList = mf_get_font_list();
 8002636:	f000 fd35 	bl	80030a4 <mf_get_font_list>
 800263a:	e7f3      	b.n	8002624 <gdispAddFont+0x24>
 800263c:	20000884 	.word	0x20000884

08002640 <gdispImageInit>:
		},
	#endif
};

void gdispImageInit(gdispImage *img) {
	img->type = GDISP_IMAGE_TYPE_UNKNOWN;
 8002640:	2300      	movs	r3, #0
 8002642:	8003      	strh	r3, [r0, #0]
}
 8002644:	4770      	bx	lr
 8002646:	46c0      	nop			; (mov r8, r8)

08002648 <gdispImageOpenGFile>:

gdispImageError gdispImageOpenGFile(gdispImage *img, GFILE *f) {
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gdispImageError err;

	if (!img)
 800264a:	2800      	cmp	r0, #0
 800264c:	d029      	beq.n	80026a2 <gdispImageOpenGFile+0x5a>
		return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!f)
 800264e:	2900      	cmp	r1, #0
 8002650:	d029      	beq.n	80026a6 <gdispImageOpenGFile+0x5e>
		return GDISP_IMAGE_ERR_NOSUCHFILE;
	img->f = f;
	img->bgcolor = GFX_WHITE;
 8002652:	2301      	movs	r3, #1
 8002654:	7103      	strb	r3, [r0, #4]
	for(img->fns = ImageHandlers; img->fns < ImageHandlers+sizeof(ImageHandlers)/sizeof(ImageHandlers[0]); img->fns++) {
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <gdispImageOpenGFile+0x64>)
 8002658:	1c04      	adds	r4, r0, #0
 800265a:	1c1f      	adds	r7, r3, #0

	if (!img)
		return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!f)
		return GDISP_IMAGE_ERR_NOSUCHFILE;
	img->f = f;
 800265c:	60c1      	str	r1, [r0, #12]
	img->bgcolor = GFX_WHITE;
	for(img->fns = ImageHandlers; img->fns < ImageHandlers+sizeof(ImageHandlers)/sizeof(ImageHandlers[0]); img->fns++) {
 800265e:	6103      	str	r3, [r0, #16]
		err = img->fns->open(img);
		if (err != GDISP_IMAGE_ERR_BADFORMAT) {
 8002660:	4e13      	ldr	r6, [pc, #76]	; (80026b0 <gdispImageOpenGFile+0x68>)
		return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!f)
		return GDISP_IMAGE_ERR_NOSUCHFILE;
	img->f = f;
	img->bgcolor = GFX_WHITE;
	for(img->fns = ImageHandlers; img->fns < ImageHandlers+sizeof(ImageHandlers)/sizeof(ImageHandlers[0]); img->fns++) {
 8002662:	3720      	adds	r7, #32
 8002664:	e008      	b.n	8002678 <gdispImageOpenGFile+0x30>
			// Everything is possible
			return err;
		}

		// Try the next decoder
		gfileSetPos(img->f, 0);
 8002666:	68e0      	ldr	r0, [r4, #12]
 8002668:	2100      	movs	r1, #0
 800266a:	f002 f819 	bl	80046a0 <gfileSetPos>
		return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!f)
		return GDISP_IMAGE_ERR_NOSUCHFILE;
	img->f = f;
	img->bgcolor = GFX_WHITE;
	for(img->fns = ImageHandlers; img->fns < ImageHandlers+sizeof(ImageHandlers)/sizeof(ImageHandlers[0]); img->fns++) {
 800266e:	6923      	ldr	r3, [r4, #16]
 8002670:	3320      	adds	r3, #32
 8002672:	6123      	str	r3, [r4, #16]
 8002674:	42bb      	cmp	r3, r7
 8002676:	d209      	bcs.n	800268c <gdispImageOpenGFile+0x44>
		err = img->fns->open(img);
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1c20      	adds	r0, r4, #0
 800267c:	4798      	blx	r3
 800267e:	1e05      	subs	r5, r0, #0
		if (err != GDISP_IMAGE_ERR_BADFORMAT) {
 8002680:	42b5      	cmp	r5, r6
 8002682:	d0f0      	beq.n	8002666 <gdispImageOpenGFile+0x1e>
			if ((err & GDISP_IMAGE_ERR_UNRECOVERABLE))
 8002684:	0403      	lsls	r3, r0, #16
 8002686:	d403      	bmi.n	8002690 <gdispImageOpenGFile+0x48>
	gfileClose(img->f);
	img->f = 0;
	img->flags = 0;
	img->fns = 0;
	img->priv = 0;
	return err;
 8002688:	1c28      	adds	r0, r5, #0
}
 800268a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Try the next decoder
		gfileSetPos(img->f, 0);
	}

	err = GDISP_IMAGE_ERR_BADFORMAT;
	img->type = GDISP_IMAGE_TYPE_UNKNOWN;
 800268c:	2300      	movs	r3, #0
 800268e:	8023      	strh	r3, [r4, #0]

unrecoverable:
	gfileClose(img->f);
 8002690:	68e0      	ldr	r0, [r4, #12]
 8002692:	f001 ffa5 	bl	80045e0 <gfileClose>
	img->f = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	60e3      	str	r3, [r4, #12]
	img->flags = 0;
 800269a:	8063      	strh	r3, [r4, #2]
	img->fns = 0;
 800269c:	6123      	str	r3, [r4, #16]
	img->priv = 0;
 800269e:	6163      	str	r3, [r4, #20]
 80026a0:	e7f2      	b.n	8002688 <gdispImageOpenGFile+0x40>

gdispImageError gdispImageOpenGFile(gdispImage *img, GFILE *f) {
	gdispImageError err;

	if (!img)
		return GDISP_IMAGE_ERR_NULLPOINTER;
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <gdispImageOpenGFile+0x6c>)
 80026a4:	e7f1      	b.n	800268a <gdispImageOpenGFile+0x42>
	if (!f)
		return GDISP_IMAGE_ERR_NOSUCHFILE;
 80026a6:	4804      	ldr	r0, [pc, #16]	; (80026b8 <gdispImageOpenGFile+0x70>)
 80026a8:	e7ef      	b.n	800268a <gdispImageOpenGFile+0x42>
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	20000014 	.word	0x20000014
 80026b0:	00008001 	.word	0x00008001
 80026b4:	00008006 	.word	0x00008006
 80026b8:	00008005 	.word	0x00008005

080026bc <gdispImageClose>:
	img->fns = 0;
	img->priv = 0;
	return err;
}

void gdispImageClose(gdispImage *img) {
 80026bc:	b510      	push	{r4, lr}
	if (!img)
 80026be:	2800      	cmp	r0, #0
 80026c0:	d00d      	beq.n	80026de <gdispImageClose+0x22>
		return;
	if (img->fns)
 80026c2:	6903      	ldr	r3, [r0, #16]
 80026c4:	1c04      	adds	r4, r0, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <gdispImageClose+0x12>
		img->fns->close(img);
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4798      	blx	r3
	gfileClose(img->f);
 80026ce:	68e0      	ldr	r0, [r4, #12]
 80026d0:	f001 ff86 	bl	80045e0 <gfileClose>
	img->type = GDISP_IMAGE_TYPE_UNKNOWN;
 80026d4:	2300      	movs	r3, #0
 80026d6:	8023      	strh	r3, [r4, #0]
	img->flags = 0;
 80026d8:	8063      	strh	r3, [r4, #2]
	img->fns = 0;
 80026da:	6123      	str	r3, [r4, #16]
	img->priv = 0;
 80026dc:	6163      	str	r3, [r4, #20]
}
 80026de:	bd10      	pop	{r4, pc}

080026e0 <gdispImageIsOpen>:

bool_t gdispImageIsOpen(gdispImage *img) {
	return img && img->type != GDISP_IMAGE_TYPE_UNKNOWN && img->fns != 0;
 80026e0:	2800      	cmp	r0, #0
 80026e2:	d009      	beq.n	80026f8 <gdispImageIsOpen+0x18>
 80026e4:	8802      	ldrh	r2, [r0, #0]
 80026e6:	2300      	movs	r3, #0
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d003      	beq.n	80026f4 <gdispImageIsOpen+0x14>
 80026ec:	6903      	ldr	r3, [r0, #16]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	4183      	sbcs	r3, r0
 80026f2:	b2db      	uxtb	r3, r3
}
 80026f4:	1c18      	adds	r0, r3, #0
 80026f6:	4770      	bx	lr
 80026f8:	2300      	movs	r3, #0
 80026fa:	e7fb      	b.n	80026f4 <gdispImageIsOpen+0x14>

080026fc <gdispImageSetBgColor>:

void gdispImageSetBgColor(gdispImage *img, color_t bgcolor) {
	if (!img)
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d000      	beq.n	8002702 <gdispImageSetBgColor+0x6>
		return;
	img->bgcolor = bgcolor;
 8002700:	7101      	strb	r1, [r0, #4]
}
 8002702:	4770      	bx	lr

08002704 <gdispImageCache>:

gdispImageError gdispImageCache(gdispImage *img) {
 8002704:	b508      	push	{r3, lr}
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
 8002706:	2800      	cmp	r0, #0
 8002708:	d007      	beq.n	800271a <gdispImageCache+0x16>
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
 800270a:	6903      	ldr	r3, [r0, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <gdispImageCache+0x12>
	return img->fns->cache(img);
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4798      	blx	r3
}
 8002714:	bd08      	pop	{r3, pc}
	img->bgcolor = bgcolor;
}

gdispImageError gdispImageCache(gdispImage *img) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
 8002716:	4802      	ldr	r0, [pc, #8]	; (8002720 <gdispImageCache+0x1c>)
 8002718:	e7fc      	b.n	8002714 <gdispImageCache+0x10>
		return;
	img->bgcolor = bgcolor;
}

gdispImageError gdispImageCache(gdispImage *img) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
 800271a:	4802      	ldr	r0, [pc, #8]	; (8002724 <gdispImageCache+0x20>)
 800271c:	e7fa      	b.n	8002714 <gdispImageCache+0x10>
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	00008001 	.word	0x00008001
 8002724:	00008006 	.word	0x00008006

08002728 <gdispGImageDraw>:
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
	return img->fns->cache(img);
}

gdispImageError gdispGImageDraw(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
 8002728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272a:	4644      	mov	r4, r8
 800272c:	465f      	mov	r7, fp
 800272e:	4656      	mov	r6, sl
 8002730:	464d      	mov	r5, r9
 8002732:	b4f0      	push	{r4, r5, r6, r7}
 8002734:	b087      	sub	sp, #28
 8002736:	4680      	mov	r8, r0
 8002738:	a810      	add	r0, sp, #64	; 0x40
 800273a:	2600      	movs	r6, #0
 800273c:	5f86      	ldrsh	r6, [r0, r6]
 800273e:	a811      	add	r0, sp, #68	; 0x44
 8002740:	2700      	movs	r7, #0
 8002742:	5fc7      	ldrsh	r7, [r0, r7]
 8002744:	a812      	add	r0, sp, #72	; 0x48
 8002746:	2400      	movs	r4, #0
 8002748:	5f04      	ldrsh	r4, [r0, r4]
 800274a:	a813      	add	r0, sp, #76	; 0x4c
 800274c:	2500      	movs	r5, #0
 800274e:	5f45      	ldrsh	r5, [r0, r5]
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
 8002750:	2900      	cmp	r1, #0
 8002752:	d03a      	beq.n	80027ca <gdispGImageDraw+0xa2>
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
 8002754:	6908      	ldr	r0, [r1, #16]
 8002756:	4684      	mov	ip, r0
 8002758:	2800      	cmp	r0, #0
 800275a:	d03a      	beq.n	80027d2 <gdispGImageDraw+0xaa>

	// Check on window
	if (cx <= 0 || cy <= 0) return GDISP_IMAGE_ERR_OK;
 800275c:	2e00      	cmp	r6, #0
 800275e:	dd36      	ble.n	80027ce <gdispGImageDraw+0xa6>
 8002760:	2f00      	cmp	r7, #0
 8002762:	dd34      	ble.n	80027ce <gdispGImageDraw+0xa6>
 8002764:	43e0      	mvns	r0, r4
 8002766:	17c0      	asrs	r0, r0, #31
 8002768:	4004      	ands	r4, r0
	if (sx < 0) sx = 0;
	if (sy < 0) sy = 0;
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
 800276a:	88c8      	ldrh	r0, [r1, #6]
 800276c:	4681      	mov	r9, r0
 800276e:	b200      	sxth	r0, r0
 8002770:	4682      	mov	sl, r0
gdispImageError gdispGImageDraw(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;

	// Check on window
	if (cx <= 0 || cy <= 0) return GDISP_IMAGE_ERR_OK;
 8002772:	2000      	movs	r0, #0
	if (sx < 0) sx = 0;
	if (sy < 0) sy = 0;
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
 8002774:	45a2      	cmp	sl, r4
 8002776:	dd21      	ble.n	80027bc <gdispGImageDraw+0x94>
 8002778:	43e8      	mvns	r0, r5
 800277a:	17c0      	asrs	r0, r0, #31
 800277c:	4005      	ands	r5, r0
 800277e:	8908      	ldrh	r0, [r1, #8]
 8002780:	9504      	str	r5, [sp, #16]
 8002782:	9005      	str	r0, [sp, #20]
 8002784:	b200      	sxth	r0, r0
 8002786:	4683      	mov	fp, r0
gdispImageError gdispGImageDraw(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;

	// Check on window
	if (cx <= 0 || cy <= 0) return GDISP_IMAGE_ERR_OK;
 8002788:	2000      	movs	r0, #0
	if (sx < 0) sx = 0;
	if (sy < 0) sy = 0;
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
 800278a:	45ab      	cmp	fp, r5
 800278c:	dd16      	ble.n	80027bc <gdispGImageDraw+0x94>
	if (sx + cx > img->width)  cx = img->width - sx;
 800278e:	19a0      	adds	r0, r4, r6
 8002790:	4550      	cmp	r0, sl
 8002792:	dd02      	ble.n	800279a <gdispGImageDraw+0x72>
 8002794:	4648      	mov	r0, r9
 8002796:	1b06      	subs	r6, r0, r4
 8002798:	b236      	sxth	r6, r6
	if (sy + cy > img->height) cy = img->height - sy;
 800279a:	9804      	ldr	r0, [sp, #16]
 800279c:	19c0      	adds	r0, r0, r7
 800279e:	4558      	cmp	r0, fp
 80027a0:	dd03      	ble.n	80027aa <gdispGImageDraw+0x82>
 80027a2:	9805      	ldr	r0, [sp, #20]
 80027a4:	9d04      	ldr	r5, [sp, #16]
 80027a6:	1b47      	subs	r7, r0, r5
 80027a8:	b23f      	sxth	r7, r7

	// Draw
	return img->fns->draw(g, img, x, y, cx, cy, sx, sy);
 80027aa:	9402      	str	r4, [sp, #8]
 80027ac:	9c04      	ldr	r4, [sp, #16]
 80027ae:	9600      	str	r6, [sp, #0]
 80027b0:	9403      	str	r4, [sp, #12]
 80027b2:	4664      	mov	r4, ip
 80027b4:	9701      	str	r7, [sp, #4]
 80027b6:	4640      	mov	r0, r8
 80027b8:	68e4      	ldr	r4, [r4, #12]
 80027ba:	47a0      	blx	r4
}
 80027bc:	b007      	add	sp, #28
 80027be:	bc3c      	pop	{r2, r3, r4, r5}
 80027c0:	4690      	mov	r8, r2
 80027c2:	4699      	mov	r9, r3
 80027c4:	46a2      	mov	sl, r4
 80027c6:	46ab      	mov	fp, r5
 80027c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
	return img->fns->cache(img);
}

gdispImageError gdispGImageDraw(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
 80027ca:	4803      	ldr	r0, [pc, #12]	; (80027d8 <gdispGImageDraw+0xb0>)
 80027cc:	e7f6      	b.n	80027bc <gdispGImageDraw+0x94>
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;

	// Check on window
	if (cx <= 0 || cy <= 0) return GDISP_IMAGE_ERR_OK;
 80027ce:	2000      	movs	r0, #0
 80027d0:	e7f4      	b.n	80027bc <gdispGImageDraw+0x94>
	return img->fns->cache(img);
}

gdispImageError gdispGImageDraw(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
 80027d2:	4802      	ldr	r0, [pc, #8]	; (80027dc <gdispGImageDraw+0xb4>)
 80027d4:	e7f2      	b.n	80027bc <gdispGImageDraw+0x94>
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	00008006 	.word	0x00008006
 80027dc:	00008001 	.word	0x00008001

080027e0 <gdispImageNext>:

	// Draw
	return img->fns->draw(g, img, x, y, cx, cy, sx, sy);
}

delaytime_t gdispImageNext(gdispImage *img) {
 80027e0:	b508      	push	{r3, lr}
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d007      	beq.n	80027f6 <gdispImageNext+0x16>
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
 80027e6:	6903      	ldr	r3, [r0, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <gdispImageNext+0x12>
	return img->fns->next(img);
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4798      	blx	r3
}
 80027f0:	bd08      	pop	{r3, pc}
	return img->fns->draw(g, img, x, y, cx, cy, sx, sy);
}

delaytime_t gdispImageNext(gdispImage *img) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
 80027f2:	4802      	ldr	r0, [pc, #8]	; (80027fc <gdispImageNext+0x1c>)
 80027f4:	e7fc      	b.n	80027f0 <gdispImageNext+0x10>
	// Draw
	return img->fns->draw(g, img, x, y, cx, cy, sx, sy);
}

delaytime_t gdispImageNext(gdispImage *img) {
	if (!img) return GDISP_IMAGE_ERR_NULLPOINTER;
 80027f6:	4802      	ldr	r0, [pc, #8]	; (8002800 <gdispImageNext+0x20>)
 80027f8:	e7fa      	b.n	80027f0 <gdispImageNext+0x10>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	00008001 	.word	0x00008001
 8002800:	00008006 	.word	0x00008006

08002804 <gdispImageGetPaletteSize>:
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
	return img->fns->next(img);
}

uint16_t gdispImageGetPaletteSize(gdispImage *img) {
 8002804:	b508      	push	{r3, lr}
	if (!img || !img->fns) return 0;
 8002806:	2800      	cmp	r0, #0
 8002808:	d007      	beq.n	800281a <gdispImageGetPaletteSize+0x16>
 800280a:	6903      	ldr	r3, [r0, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <gdispImageGetPaletteSize+0x16>
	if (!img->fns->getPaletteSize) return 0;
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <gdispImageGetPaletteSize+0x16>
	return img->fns->getPaletteSize(img);
 8002816:	4798      	blx	r3
}
 8002818:	bd08      	pop	{r3, pc}
	if (!img->fns) return GDISP_IMAGE_ERR_BADFORMAT;
	return img->fns->next(img);
}

uint16_t gdispImageGetPaletteSize(gdispImage *img) {
	if (!img || !img->fns) return 0;
 800281a:	2000      	movs	r0, #0
 800281c:	e7fc      	b.n	8002818 <gdispImageGetPaletteSize+0x14>
 800281e:	46c0      	nop			; (mov r8, r8)

08002820 <gdispImageGetPalette>:
	if (!img->fns->getPaletteSize) return 0;
	return img->fns->getPaletteSize(img);
}

color_t gdispImageGetPalette(gdispImage *img, uint16_t index) {
 8002820:	b508      	push	{r3, lr}
	if (!img || !img->fns) return 0;
 8002822:	2800      	cmp	r0, #0
 8002824:	d007      	beq.n	8002836 <gdispImageGetPalette+0x16>
 8002826:	6903      	ldr	r3, [r0, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <gdispImageGetPalette+0x16>
	if (!img->fns->getPalette) return 0;
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <gdispImageGetPalette+0x16>
	return img->fns->getPalette(img, index);
 8002832:	4798      	blx	r3
}
 8002834:	bd08      	pop	{r3, pc}
	if (!img->fns->getPaletteSize) return 0;
	return img->fns->getPaletteSize(img);
}

color_t gdispImageGetPalette(gdispImage *img, uint16_t index) {
	if (!img || !img->fns) return 0;
 8002836:	2000      	movs	r0, #0
 8002838:	e7fc      	b.n	8002834 <gdispImageGetPalette+0x14>
 800283a:	46c0      	nop			; (mov r8, r8)

0800283c <gdispImageAdjustPalette>:
	if (!img->fns->getPalette) return 0;
	return img->fns->getPalette(img, index);
}

bool_t gdispImageAdjustPalette(gdispImage *img, uint16_t index, color_t newColor) {
 800283c:	b508      	push	{r3, lr}
	if (!img || !img->fns) return FALSE;
 800283e:	2800      	cmp	r0, #0
 8002840:	d007      	beq.n	8002852 <gdispImageAdjustPalette+0x16>
 8002842:	6903      	ldr	r3, [r0, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <gdispImageAdjustPalette+0x16>
	if (!img->fns->adjustPalette) return FALSE;
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <gdispImageAdjustPalette+0x16>
	return img->fns->adjustPalette(img, index, newColor);
 800284e:	4798      	blx	r3
}
 8002850:	bd08      	pop	{r3, pc}
	if (!img->fns->getPalette) return 0;
	return img->fns->getPalette(img, index);
}

bool_t gdispImageAdjustPalette(gdispImage *img, uint16_t index, color_t newColor) {
	if (!img || !img->fns) return FALSE;
 8002852:	2000      	movs	r0, #0
 8002854:	e7fc      	b.n	8002850 <gdispImageAdjustPalette+0x14>
 8002856:	46c0      	nop			; (mov r8, r8)

08002858 <gdispImageAlloc>:
	return img->fns->adjustPalette(img, index, newColor);
}


// Helper Routines
void *gdispImageAlloc(gdispImage *img, size_t sz) {
 8002858:	b508      	push	{r3, lr}
				img->maxmemused = img->memused;
		}
		return ptr;
	#else
		(void) img;
		return gfxAlloc(sz);
 800285a:	1c08      	adds	r0, r1, #0
 800285c:	f001 fe36 	bl	80044cc <gfxAlloc>
	#endif
}
 8002860:	bd08      	pop	{r3, pc}
 8002862:	46c0      	nop			; (mov r8, r8)

08002864 <gdispImageFree>:

void gdispImageFree(gdispImage *img, void *ptr, size_t sz) {
 8002864:	b508      	push	{r3, lr}
		gfxFree(ptr);
		img->memused -= sz;
	#else
		(void) img;
		(void) sz;
		gfxFree(ptr);
 8002866:	1c08      	adds	r0, r1, #0
 8002868:	f001 fe3a 	bl	80044e0 <gfxFree>
	#endif
}
 800286c:	bd08      	pop	{r3, pc}
 800286e:	46c0      	nop			; (mov r8, r8)

08002870 <getPixels>:
unsupportedcleanup:
	gdispImageClose_BMP(img);				// Clean up the private data area
	return GDISP_IMAGE_ERR_UNSUPPORTED;		// Not supported
}

static coord_t getPixels(gdispImage *img, coord_t x) {
 8002870:	b570      	push	{r4, r5, r6, lr}
	gdispImagePrivate_BMP *	priv;
	color_t *			pc;
	coord_t				len;

	priv = (gdispImagePrivate_BMP *)img->priv;
 8002872:	6945      	ldr	r5, [r0, #20]
unsupportedcleanup:
	gdispImageClose_BMP(img);				// Clean up the private data area
	return GDISP_IMAGE_ERR_UNSUPPORTED;		// Not supported
}

static coord_t getPixels(gdispImage *img, coord_t x) {
 8002874:	b082      	sub	sp, #8

	priv = (gdispImagePrivate_BMP *)img->priv;
	pc = priv->buf;
	len = 0;

	switch(priv->bitsperpixel) {
 8002876:	786b      	ldrb	r3, [r5, #1]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d149      	bne.n	8002910 <getPixels+0xa0>
		{
		uint8_t		b[4];
		uint8_t		m;

			priv = (gdispImagePrivate_BMP *)img->priv;
			pc = priv->buf;
 800287c:	1c2e      	adds	r6, r5, #0
			len = 0;

			while(x < img->width && len <= GDISP_IMAGE_BMP_BLIT_BUFFER_SIZE-32) {
 800287e:	2206      	movs	r2, #6
 8002880:	5e83      	ldrsh	r3, [r0, r2]
		{
		uint8_t		b[4];
		uint8_t		m;

			priv = (gdispImagePrivate_BMP *)img->priv;
			pc = priv->buf;
 8002882:	3610      	adds	r6, #16
			len = 0;

			while(x < img->width && len <= GDISP_IMAGE_BMP_BLIT_BUFFER_SIZE-32) {
 8002884:	428b      	cmp	r3, r1
 8002886:	dd43      	ble.n	8002910 <getPixels+0xa0>
				if (gfileRead(img->f, &b, 4) != 4)
 8002888:	ac01      	add	r4, sp, #4
 800288a:	68c0      	ldr	r0, [r0, #12]
 800288c:	1c21      	adds	r1, r4, #0
 800288e:	2204      	movs	r2, #4
 8002890:	f001 fec8 	bl	8004624 <gfileRead>
 8002894:	2804      	cmp	r0, #4
 8002896:	d13b      	bne.n	8002910 <getPixels+0xa0>
 8002898:	1c2a      	adds	r2, r5, #0
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	3218      	adds	r2, #24
					return 0;

				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
 800289e:	7823      	ldrb	r3, [r4, #0]
 80028a0:	400b      	ands	r3, r1
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	4183      	sbcs	r3, r0
 80028a6:	6868      	ldr	r0, [r5, #4]

			while(x < img->width && len <= GDISP_IMAGE_BMP_BLIT_BUFFER_SIZE-32) {
				if (gfileRead(img->f, &b, 4) != 4)
					return 0;

				for(m=0x80; m; m >>= 1, pc++)
 80028a8:	0849      	lsrs	r1, r1, #1
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
 80028aa:	5cc3      	ldrb	r3, [r0, r3]
 80028ac:	7033      	strb	r3, [r6, #0]

			while(x < img->width && len <= GDISP_IMAGE_BMP_BLIT_BUFFER_SIZE-32) {
				if (gfileRead(img->f, &b, 4) != 4)
					return 0;

				for(m=0x80; m; m >>= 1, pc++)
 80028ae:	3601      	adds	r6, #1
 80028b0:	4296      	cmp	r6, r2
 80028b2:	d1f4      	bne.n	800289e <getPixels+0x2e>
 80028b4:	1c29      	adds	r1, r5, #0
 80028b6:	2080      	movs	r0, #128	; 0x80
 80028b8:	3120      	adds	r1, #32
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
 80028ba:	7863      	ldrb	r3, [r4, #1]
 80028bc:	4003      	ands	r3, r0
 80028be:	1e5e      	subs	r6, r3, #1
 80028c0:	41b3      	sbcs	r3, r6
 80028c2:	686e      	ldr	r6, [r5, #4]
				if (gfileRead(img->f, &b, 4) != 4)
					return 0;

				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
 80028c4:	0840      	lsrs	r0, r0, #1
					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
 80028c6:	5cf3      	ldrb	r3, [r6, r3]
 80028c8:	7013      	strb	r3, [r2, #0]
				if (gfileRead(img->f, &b, 4) != 4)
					return 0;

				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
 80028ca:	3201      	adds	r2, #1
 80028cc:	428a      	cmp	r2, r1
 80028ce:	d1f4      	bne.n	80028ba <getPixels+0x4a>
 80028d0:	1c2a      	adds	r2, r5, #0
 80028d2:	2080      	movs	r0, #128	; 0x80
 80028d4:	3228      	adds	r2, #40	; 0x28
					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[2]) ? 1 : 0];
 80028d6:	78a3      	ldrb	r3, [r4, #2]
 80028d8:	4003      	ands	r3, r0
 80028da:	1e5e      	subs	r6, r3, #1
 80028dc:	41b3      	sbcs	r3, r6
 80028de:	686e      	ldr	r6, [r5, #4]

				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
 80028e0:	0840      	lsrs	r0, r0, #1
					pc[0] = priv->palette[(m&b[2]) ? 1 : 0];
 80028e2:	5cf3      	ldrb	r3, [r6, r3]
 80028e4:	700b      	strb	r3, [r1, #0]

				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
 80028e6:	3101      	adds	r1, #1
 80028e8:	4291      	cmp	r1, r2
 80028ea:	d1f4      	bne.n	80028d6 <getPixels+0x66>
 80028ec:	1c28      	adds	r0, r5, #0
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	3030      	adds	r0, #48	; 0x30
					pc[0] = priv->palette[(m&b[2]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[3]) ? 1 : 0];
 80028f2:	78e3      	ldrb	r3, [r4, #3]
 80028f4:	400b      	ands	r3, r1
 80028f6:	1e5e      	subs	r6, r3, #1
 80028f8:	41b3      	sbcs	r3, r6
 80028fa:	686e      	ldr	r6, [r5, #4]
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[2]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
 80028fc:	0849      	lsrs	r1, r1, #1
					pc[0] = priv->palette[(m&b[3]) ? 1 : 0];
 80028fe:	5cf3      	ldrb	r3, [r6, r3]
 8002900:	7013      	strb	r3, [r2, #0]
					pc[0] = priv->palette[(m&b[0]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[1]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
					pc[0] = priv->palette[(m&b[2]) ? 1 : 0];
				for(m=0x80; m; m >>= 1, pc++)
 8002902:	3201      	adds	r2, #1
 8002904:	4282      	cmp	r2, r0
 8002906:	d1f4      	bne.n	80028f2 <getPixels+0x82>
					pc[0] = priv->palette[(m&b[3]) ? 1 : 0];
				len += 32;
 8002908:	2020      	movs	r0, #32
 800290a:	b200      	sxth	r0, r0
#endif

	default:
		return len;
	}
}
 800290c:	b002      	add	sp, #8
 800290e:	bd70      	pop	{r4, r5, r6, pc}
		}
		return len;
#endif

	default:
		return len;
 8002910:	2000      	movs	r0, #0
 8002912:	e7fa      	b.n	800290a <getPixels+0x9a>

08002914 <gdispImageClose_BMP>:
	size_t		frame0pos;
	pixel_t		*frame0cache;
	pixel_t		buf[GDISP_IMAGE_BMP_BLIT_BUFFER_SIZE];
	} gdispImagePrivate_BMP;

void gdispImageClose_BMP(gdispImage *img) {
 8002914:	b538      	push	{r3, r4, r5, lr}
	gdispImagePrivate_BMP *priv;

	priv = (gdispImagePrivate_BMP *)img->priv;
 8002916:	6945      	ldr	r5, [r0, #20]
	if (priv) {
 8002918:	2d00      	cmp	r5, #0
 800291a:	d018      	beq.n	800294e <gdispImageClose_BMP+0x3a>
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
		if (priv->palette)
 800291c:	6869      	ldr	r1, [r5, #4]
 800291e:	1c04      	adds	r4, r0, #0
 8002920:	2900      	cmp	r1, #0
 8002922:	d002      	beq.n	800292a <gdispImageClose_BMP+0x16>
			gdispImageFree(img, (void *)priv->palette, priv->palsize*sizeof(color_t));
 8002924:	886a      	ldrh	r2, [r5, #2]
 8002926:	f7ff ff9d 	bl	8002864 <gdispImageFree>
#endif
		if (priv->frame0cache)
 800292a:	68e9      	ldr	r1, [r5, #12]
 800292c:	2900      	cmp	r1, #0
 800292e:	d007      	beq.n	8002940 <gdispImageClose_BMP+0x2c>
			gdispImageFree(img, (void *)priv->frame0cache, img->width*img->height*sizeof(pixel_t));
 8002930:	2306      	movs	r3, #6
 8002932:	5ee2      	ldrsh	r2, [r4, r3]
 8002934:	2008      	movs	r0, #8
 8002936:	5e23      	ldrsh	r3, [r4, r0]
 8002938:	1c20      	adds	r0, r4, #0
 800293a:	435a      	muls	r2, r3
 800293c:	f7ff ff92 	bl	8002864 <gdispImageFree>
		gdispImageFree(img, (void *)priv, sizeof(gdispImagePrivate_BMP));
 8002940:	1c20      	adds	r0, r4, #0
 8002942:	1c29      	adds	r1, r5, #0
 8002944:	2230      	movs	r2, #48	; 0x30
 8002946:	f7ff ff8d 	bl	8002864 <gdispImageFree>
		img->priv = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	6163      	str	r3, [r4, #20]
	}
}
 800294e:	bd38      	pop	{r3, r4, r5, pc}

08002950 <gdispImageOpen_BMP>:

gdispImageError gdispImageOpen_BMP(gdispImage *img) {
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002952:	b083      	sub	sp, #12
 8002954:	1c04      	adds	r4, r0, #0
	uint16_t	aword;
	uint32_t	adword;
	uint32_t	offsetColorTable;

	/* Read the file identifier */
	if (gfileRead(img->f, hdr, 2) != 2)
 8002956:	4669      	mov	r1, sp
 8002958:	68c0      	ldr	r0, [r0, #12]
 800295a:	2202      	movs	r2, #2
 800295c:	f001 fe62 	bl	8004624 <gfileRead>
 8002960:	2802      	cmp	r0, #2
 8002962:	d002      	beq.n	800296a <gdispImageOpen_BMP+0x1a>
		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us
 8002964:	4872      	ldr	r0, [pc, #456]	; (8002b30 <gdispImageOpen_BMP+0x1e0>)
	return GDISP_IMAGE_ERR_BADDATA;			// Oops - something wrong

unsupportedcleanup:
	gdispImageClose_BMP(img);				// Clean up the private data area
	return GDISP_IMAGE_ERR_UNSUPPORTED;		// Not supported
}
 8002966:	b003      	add	sp, #12
 8002968:	bdf0      	pop	{r4, r5, r6, r7, pc}

	/**
	 * We only accept Windows V2+ bitmaps.
	 *  - we don't support OS/2 bitmaps, icons, pointers, or Windows V1 bitmaps.
	 */
	if (hdr[0] != 'B' || hdr[1] != 'M')
 800296a:	466b      	mov	r3, sp
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b42      	cmp	r3, #66	; 0x42
 8002970:	d1f8      	bne.n	8002964 <gdispImageOpen_BMP+0x14>
 8002972:	466b      	mov	r3, sp
 8002974:	785b      	ldrb	r3, [r3, #1]
 8002976:	2b4d      	cmp	r3, #77	; 0x4d
 8002978:	d1f4      	bne.n	8002964 <gdispImageOpen_BMP+0x14>
		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us

	/* We know we are a BMP format image */
	img->flags = 0;
 800297a:	2600      	movs	r6, #0

	/* Allocate our private area */
	if (!(img->priv = gdispImageAlloc(img, sizeof(gdispImagePrivate_BMP))))
 800297c:	1c20      	adds	r0, r4, #0
	 */
	if (hdr[0] != 'B' || hdr[1] != 'M')
		return GDISP_IMAGE_ERR_BADFORMAT;		// It can't be us

	/* We know we are a BMP format image */
	img->flags = 0;
 800297e:	8066      	strh	r6, [r4, #2]

	/* Allocate our private area */
	if (!(img->priv = gdispImageAlloc(img, sizeof(gdispImagePrivate_BMP))))
 8002980:	2130      	movs	r1, #48	; 0x30
 8002982:	f7ff ff69 	bl	8002858 <gdispImageAlloc>
 8002986:	1e05      	subs	r5, r0, #0
 8002988:	6160      	str	r0, [r4, #20]
 800298a:	d011      	beq.n	80029b0 <gdispImageOpen_BMP+0x60>
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
	priv->palette = 0;
#endif

	/* Skip the size field and the 2 reserved fields */
	if (gfileRead(img->f, priv->buf, 8) != 8)
 800298c:	1c07      	adds	r7, r0, #0
		return GDISP_IMAGE_ERR_NOMEMORY;

	/* Initialise the essential bits in the private area */
	priv = (gdispImagePrivate_BMP *)img->priv;
	priv->frame0cache = 0;
	priv->bmpflags = 0;
 800298e:	2300      	movs	r3, #0
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
	priv->palette = 0;
#endif

	/* Skip the size field and the 2 reserved fields */
	if (gfileRead(img->f, priv->buf, 8) != 8)
 8002990:	3710      	adds	r7, #16
		return GDISP_IMAGE_ERR_NOMEMORY;

	/* Initialise the essential bits in the private area */
	priv = (gdispImagePrivate_BMP *)img->priv;
	priv->frame0cache = 0;
	priv->bmpflags = 0;
 8002992:	7003      	strb	r3, [r0, #0]
	if (!(img->priv = gdispImageAlloc(img, sizeof(gdispImagePrivate_BMP))))
		return GDISP_IMAGE_ERR_NOMEMORY;

	/* Initialise the essential bits in the private area */
	priv = (gdispImagePrivate_BMP *)img->priv;
	priv->frame0cache = 0;
 8002994:	60c6      	str	r6, [r0, #12]
	priv->bmpflags = 0;
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
	priv->palette = 0;
 8002996:	6046      	str	r6, [r0, #4]
#endif

	/* Skip the size field and the 2 reserved fields */
	if (gfileRead(img->f, priv->buf, 8) != 8)
 8002998:	1c39      	adds	r1, r7, #0
 800299a:	68e0      	ldr	r0, [r4, #12]
 800299c:	2208      	movs	r2, #8
 800299e:	f001 fe41 	bl	8004624 <gfileRead>
 80029a2:	2808      	cmp	r0, #8
 80029a4:	d006      	beq.n	80029b4 <gdispImageOpen_BMP+0x64>

	img->type = GDISP_IMAGE_TYPE_BMP;
	return GDISP_IMAGE_ERR_OK;

baddatacleanup:
	gdispImageClose_BMP(img);				// Clean up the private data area
 80029a6:	1c20      	adds	r0, r4, #0
 80029a8:	f7ff ffb4 	bl	8002914 <gdispImageClose_BMP>
	return GDISP_IMAGE_ERR_BADDATA;			// Oops - something wrong
 80029ac:	4861      	ldr	r0, [pc, #388]	; (8002b34 <gdispImageOpen_BMP+0x1e4>)
 80029ae:	e7da      	b.n	8002966 <gdispImageOpen_BMP+0x16>
	/* We know we are a BMP format image */
	img->flags = 0;

	/* Allocate our private area */
	if (!(img->priv = gdispImageAlloc(img, sizeof(gdispImagePrivate_BMP))))
		return GDISP_IMAGE_ERR_NOMEMORY;
 80029b0:	4861      	ldr	r0, [pc, #388]	; (8002b38 <gdispImageOpen_BMP+0x1e8>)
 80029b2:	e7d8      	b.n	8002966 <gdispImageOpen_BMP+0x16>
	/* Skip the size field and the 2 reserved fields */
	if (gfileRead(img->f, priv->buf, 8) != 8)
		goto baddatacleanup;

	/* Get the offset to the bitmap data */
	if (gfileRead(img->f, &priv->frame0pos, 4) != 4)
 80029b4:	1c29      	adds	r1, r5, #0
 80029b6:	2204      	movs	r2, #4
 80029b8:	68e0      	ldr	r0, [r4, #12]
 80029ba:	3108      	adds	r1, #8
 80029bc:	f001 fe32 	bl	8004624 <gfileRead>
 80029c0:	1e02      	subs	r2, r0, #0
 80029c2:	2a04      	cmp	r2, #4
 80029c4:	d1ef      	bne.n	80029a6 <gdispImageOpen_BMP+0x56>
	gdispImageMakeLE32(priv->frame0pos);

	/* Process the BITMAPCOREHEADER structure */

	/* Get the offset to the colour data */
	if (gfileRead(img->f, &offsetColorTable, 4) != 4)
 80029c6:	68e0      	ldr	r0, [r4, #12]
 80029c8:	a901      	add	r1, sp, #4
 80029ca:	f001 fe2b 	bl	8004624 <gfileRead>
 80029ce:	2804      	cmp	r0, #4
 80029d0:	d1e9      	bne.n	80029a6 <gdispImageOpen_BMP+0x56>
		goto baddatacleanup;
	gdispImageMakeLE32(offsetColorTable);
	offsetColorTable += 14;						// Add the size of the BITMAPFILEHEADER
 80029d2:	9b01      	ldr	r3, [sp, #4]
 80029d4:	330e      	adds	r3, #14
 80029d6:	9301      	str	r3, [sp, #4]

	// Detect our bitmap version
	if (offsetColorTable == 12+14) {
 80029d8:	2b1a      	cmp	r3, #26
 80029da:	d018      	beq.n	8002a0e <gdispImageOpen_BMP+0xbe>
		default:
			goto unsupportedcleanup;
		}
		priv->bitsperpixel = aword;

	} else if (offsetColorTable >= 40+14) {
 80029dc:	2b35      	cmp	r3, #53	; 0x35
 80029de:	d9e2      	bls.n	80029a6 <gdispImageOpen_BMP+0x56>
		if (offsetColorTable > 40+14)
 80029e0:	2b36      	cmp	r3, #54	; 0x36
 80029e2:	d003      	beq.n	80029ec <gdispImageOpen_BMP+0x9c>
			priv->bmpflags |= BMP_V4;
 80029e4:	2202      	movs	r2, #2
 80029e6:	782b      	ldrb	r3, [r5, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	702b      	strb	r3, [r5, #0]

		// Read the header
		if (gfileRead(img->f, priv->buf, 40-4) != 40-4)
 80029ec:	68e0      	ldr	r0, [r4, #12]
 80029ee:	1c39      	adds	r1, r7, #0
 80029f0:	2224      	movs	r2, #36	; 0x24
 80029f2:	f001 fe17 	bl	8004624 <gfileRead>
 80029f6:	2824      	cmp	r0, #36	; 0x24
 80029f8:	d1d5      	bne.n	80029a6 <gdispImageOpen_BMP+0x56>
			goto baddatacleanup;
		// Get the width
		adword = gdispImageGetAlignedLE32(priv->buf, 0);
		if (adword > 32768)				// This also picks up negative values
 80029fa:	2280      	movs	r2, #128	; 0x80

		// Read the header
		if (gfileRead(img->f, priv->buf, 40-4) != 40-4)
			goto baddatacleanup;
		// Get the width
		adword = gdispImageGetAlignedLE32(priv->buf, 0);
 80029fc:	692b      	ldr	r3, [r5, #16]
		if (adword > 32768)				// This also picks up negative values
 80029fe:	0212      	lsls	r2, r2, #8
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d932      	bls.n	8002a6a <gdispImageOpen_BMP+0x11a>
baddatacleanup:
	gdispImageClose_BMP(img);				// Clean up the private data area
	return GDISP_IMAGE_ERR_BADDATA;			// Oops - something wrong

unsupportedcleanup:
	gdispImageClose_BMP(img);				// Clean up the private data area
 8002a04:	1c20      	adds	r0, r4, #0
 8002a06:	f7ff ff85 	bl	8002914 <gdispImageClose_BMP>
	return GDISP_IMAGE_ERR_UNSUPPORTED;		// Not supported
 8002a0a:	484c      	ldr	r0, [pc, #304]	; (8002b3c <gdispImageOpen_BMP+0x1ec>)
 8002a0c:	e7ab      	b.n	8002966 <gdispImageOpen_BMP+0x16>
	gdispImageMakeLE32(offsetColorTable);
	offsetColorTable += 14;						// Add the size of the BITMAPFILEHEADER

	// Detect our bitmap version
	if (offsetColorTable == 12+14) {
		priv->bmpflags |= BMP_V2;
 8002a0e:	2201      	movs	r2, #1
 8002a10:	782b      	ldrb	r3, [r5, #0]

		// Read the header
		if (gfileRead(img->f, priv->buf, 12-4) != 12-4)
 8002a12:	1c39      	adds	r1, r7, #0
	gdispImageMakeLE32(offsetColorTable);
	offsetColorTable += 14;						// Add the size of the BITMAPFILEHEADER

	// Detect our bitmap version
	if (offsetColorTable == 12+14) {
		priv->bmpflags |= BMP_V2;
 8002a14:	4313      	orrs	r3, r2
 8002a16:	702b      	strb	r3, [r5, #0]

		// Read the header
		if (gfileRead(img->f, priv->buf, 12-4) != 12-4)
 8002a18:	68e0      	ldr	r0, [r4, #12]
 8002a1a:	3207      	adds	r2, #7
 8002a1c:	f001 fe02 	bl	8004624 <gfileRead>
 8002a20:	2808      	cmp	r0, #8
 8002a22:	d1c0      	bne.n	80029a6 <gdispImageOpen_BMP+0x56>
			goto baddatacleanup;
		// Get the width
		img->width = gdispImageGetAlignedLE16(priv->buf, 0);
 8002a24:	8a2b      	ldrh	r3, [r5, #16]
 8002a26:	80e3      	strh	r3, [r4, #6]
		// Get the height
		img->height = gdispImageGetAlignedLE16(priv->buf, 2);
 8002a28:	8a6b      	ldrh	r3, [r5, #18]
 8002a2a:	8123      	strh	r3, [r4, #8]
		if (img->height < 0) {
 8002a2c:	b21b      	sxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da07      	bge.n	8002a42 <gdispImageOpen_BMP+0xf2>
			priv->bmpflags |= BMP_TOP_TO_BOTTOM;
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	782b      	ldrb	r3, [r5, #0]
 8002a36:	4252      	negs	r2, r2
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	702b      	strb	r3, [r5, #0]
			img->height = -img->height;
 8002a3c:	8923      	ldrh	r3, [r4, #8]
 8002a3e:	425b      	negs	r3, r3
 8002a40:	8123      	strh	r3, [r4, #8]
		}
		// Get the planes
		aword = gdispImageGetAlignedLE16(priv->buf, 4);
		if (aword != 1)
 8002a42:	8aab      	ldrh	r3, [r5, #20]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d1dd      	bne.n	8002a04 <gdispImageOpen_BMP+0xb4>
			goto unsupportedcleanup;
		// Get the bits per pixel
		aword = gdispImageGetAlignedLE16(priv->buf, 6);
		switch(aword) {
 8002a48:	8aea      	ldrh	r2, [r5, #22]
 8002a4a:	2a01      	cmp	r2, #1
 8002a4c:	d1da      	bne.n	8002a04 <gdispImageOpen_BMP+0xb4>
#endif
#if GDISP_NEED_IMAGE_BMP_8
		case 8:
#endif
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
			priv->bmpflags |= BMP_PALETTE;
 8002a4e:	2104      	movs	r1, #4
 8002a50:	782b      	ldrb	r3, [r5, #0]
			break;
#endif
		default:
			goto unsupportedcleanup;
		}
		priv->bitsperpixel = aword;
 8002a52:	706a      	strb	r2, [r5, #1]
#endif
#if GDISP_NEED_IMAGE_BMP_8
		case 8:
#endif
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
			priv->bmpflags |= BMP_PALETTE;
 8002a54:	430b      	orrs	r3, r1
 8002a56:	702b      	strb	r3, [r5, #0]
			priv->palsize = 1<<aword;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	806b      	strh	r3, [r5, #2]
	} else
		goto baddatacleanup;

#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
	/* Load the palette tables */
	if (priv->bmpflags & BMP_PALETTE) {
 8002a5c:	782b      	ldrb	r3, [r5, #0]
 8002a5e:	075b      	lsls	r3, r3, #29
 8002a60:	d427      	bmi.n	8002ab2 <gdispImageOpen_BMP+0x162>
				for(adword = priv->maskalpha;  adword > 255; priv->shiftalpha++, adword >>= 1);
		}
	}
#endif

	img->type = GDISP_IMAGE_TYPE_BMP;
 8002a62:	2303      	movs	r3, #3
	return GDISP_IMAGE_ERR_OK;
 8002a64:	2000      	movs	r0, #0
				for(adword = priv->maskalpha;  adword > 255; priv->shiftalpha++, adword >>= 1);
		}
	}
#endif

	img->type = GDISP_IMAGE_TYPE_BMP;
 8002a66:	8023      	strh	r3, [r4, #0]
	return GDISP_IMAGE_ERR_OK;
 8002a68:	e77d      	b.n	8002966 <gdispImageOpen_BMP+0x16>
			goto baddatacleanup;
		// Get the width
		adword = gdispImageGetAlignedLE32(priv->buf, 0);
		if (adword > 32768)				// This also picks up negative values
			goto unsupportedcleanup;
		img->width = adword;
 8002a6a:	80e3      	strh	r3, [r4, #6]
		// Get the height
		adword = gdispImageGetAlignedLE32(priv->buf, 4);
 8002a6c:	696b      	ldr	r3, [r5, #20]
		if ((int32_t)adword < 0) {		// Negative test
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da05      	bge.n	8002a7e <gdispImageOpen_BMP+0x12e>
			priv->bmpflags |= BMP_TOP_TO_BOTTOM;
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	782a      	ldrb	r2, [r5, #0]
 8002a76:	4249      	negs	r1, r1
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	702a      	strb	r2, [r5, #0]
			adword = -adword;
 8002a7c:	425b      	negs	r3, r3
		}
		if (adword > 32768)
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	0212      	lsls	r2, r2, #8
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d8be      	bhi.n	8002a04 <gdispImageOpen_BMP+0xb4>
			goto unsupportedcleanup;
		img->height = adword;
 8002a86:	8123      	strh	r3, [r4, #8]
		// Get the planes
		aword = gdispImageGetAlignedLE16(priv->buf, 8);
		if (aword != 1)
 8002a88:	8b2b      	ldrh	r3, [r5, #24]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d1ba      	bne.n	8002a04 <gdispImageOpen_BMP+0xb4>
			goto unsupportedcleanup;
		// Get the bits per pixel
		aword = gdispImageGetAlignedLE16(priv->buf, 10);
		switch(aword) {
 8002a8e:	8b6a      	ldrh	r2, [r5, #26]
 8002a90:	2a01      	cmp	r2, #1
 8002a92:	d1b7      	bne.n	8002a04 <gdispImageOpen_BMP+0xb4>
#endif
#if GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
		case 8:
#endif
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
			priv->bmpflags |= BMP_PALETTE;
 8002a94:	2104      	movs	r1, #4
 8002a96:	782b      	ldrb	r3, [r5, #0]
			break;
#endif
		default:
			goto unsupportedcleanup;
		}
		priv->bitsperpixel = aword;
 8002a98:	706a      	strb	r2, [r5, #1]
#endif
#if GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
		case 8:
#endif
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
			priv->bmpflags |= BMP_PALETTE;
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	702b      	strb	r3, [r5, #0]
			priv->palsize = 1<<aword;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	806b      	strh	r3, [r5, #2]
			goto unsupportedcleanup;
		}
		priv->bitsperpixel = aword;
		// Get the compression
		adword = gdispImageGetAlignedLE32(priv->buf, 12);
		switch(adword) {
 8002aa2:	69eb      	ldr	r3, [r5, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ad      	bne.n	8002a04 <gdispImageOpen_BMP+0xb4>
		}
		priv->bitsperpixel = aword;
#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
		// Get the actual colors used
		adword = gdispImageGetAlignedLE32(priv->buf, 28);
		if (adword && adword < priv->palsize)
 8002aa8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d1d6      	bne.n	8002a5c <gdispImageOpen_BMP+0x10c>
			priv->palsize = adword;
 8002aae:	806b      	strh	r3, [r5, #2]
 8002ab0:	e7d4      	b.n	8002a5c <gdispImageOpen_BMP+0x10c>
		goto baddatacleanup;

#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8 || GDISP_NEED_IMAGE_BMP_8_RLE
	/* Load the palette tables */
	if (priv->bmpflags & BMP_PALETTE) {
		gfileSetPos(img->f, offsetColorTable);
 8002ab2:	9901      	ldr	r1, [sp, #4]
 8002ab4:	68e0      	ldr	r0, [r4, #12]
 8002ab6:	f001 fdf3 	bl	80046a0 <gfileSetPos>

		if (!(priv->palette = (color_t *)gdispImageAlloc(img, priv->palsize*sizeof(color_t))))
 8002aba:	8869      	ldrh	r1, [r5, #2]
 8002abc:	1c20      	adds	r0, r4, #0
 8002abe:	f7ff fecb 	bl	8002858 <gdispImageAlloc>
 8002ac2:	6068      	str	r0, [r5, #4]
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d100      	bne.n	8002aca <gdispImageOpen_BMP+0x17a>
 8002ac8:	e772      	b.n	80029b0 <gdispImageOpen_BMP+0x60>
			return GDISP_IMAGE_ERR_NOMEMORY;
		if (priv->bmpflags & BMP_V2) {
 8002aca:	2301      	movs	r3, #1
 8002acc:	782e      	ldrb	r6, [r5, #0]
 8002ace:	401e      	ands	r6, r3
 8002ad0:	d017      	beq.n	8002b02 <gdispImageOpen_BMP+0x1b2>
 8002ad2:	2600      	movs	r6, #0
			for(aword = 0; aword < priv->palsize; aword++) {
 8002ad4:	886b      	ldrh	r3, [r5, #2]
 8002ad6:	42b3      	cmp	r3, r6
 8002ad8:	d9c3      	bls.n	8002a62 <gdispImageOpen_BMP+0x112>
				if (gfileRead(img->f, &priv->buf, 3) != 3) goto baddatacleanup;
 8002ada:	68e0      	ldr	r0, [r4, #12]
 8002adc:	1c39      	adds	r1, r7, #0
 8002ade:	2203      	movs	r2, #3
 8002ae0:	f001 fda0 	bl	8004624 <gfileRead>
 8002ae4:	2803      	cmp	r0, #3
 8002ae6:	d000      	beq.n	8002aea <gdispImageOpen_BMP+0x19a>
 8002ae8:	e75d      	b.n	80029a6 <gdispImageOpen_BMP+0x56>
				priv->palette[aword] = RGB2COLOR(((uint8_t *)priv->buf)[2], ((uint8_t *)priv->buf)[1], ((uint8_t *)priv->buf)[0]);
 8002aea:	7cab      	ldrb	r3, [r5, #18]
 8002aec:	7c6a      	ldrb	r2, [r5, #17]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	7c2b      	ldrb	r3, [r5, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	1e5a      	subs	r2, r3, #1
 8002af6:	4193      	sbcs	r3, r2
 8002af8:	686a      	ldr	r2, [r5, #4]
 8002afa:	5593      	strb	r3, [r2, r6]
		gfileSetPos(img->f, offsetColorTable);

		if (!(priv->palette = (color_t *)gdispImageAlloc(img, priv->palsize*sizeof(color_t))))
			return GDISP_IMAGE_ERR_NOMEMORY;
		if (priv->bmpflags & BMP_V2) {
			for(aword = 0; aword < priv->palsize; aword++) {
 8002afc:	3601      	adds	r6, #1
 8002afe:	b2b6      	uxth	r6, r6
 8002b00:	e7e8      	b.n	8002ad4 <gdispImageOpen_BMP+0x184>
				if (gfileRead(img->f, &priv->buf, 3) != 3) goto baddatacleanup;
				priv->palette[aword] = RGB2COLOR(((uint8_t *)priv->buf)[2], ((uint8_t *)priv->buf)[1], ((uint8_t *)priv->buf)[0]);
			}
		} else {
			for(aword = 0; aword < priv->palsize; aword++) {
 8002b02:	886b      	ldrh	r3, [r5, #2]
 8002b04:	42b3      	cmp	r3, r6
 8002b06:	d9ac      	bls.n	8002a62 <gdispImageOpen_BMP+0x112>
				if (gfileRead(img->f, &priv->buf, 4) != 4) goto baddatacleanup;
 8002b08:	68e0      	ldr	r0, [r4, #12]
 8002b0a:	1c39      	adds	r1, r7, #0
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	f001 fd89 	bl	8004624 <gfileRead>
 8002b12:	2804      	cmp	r0, #4
 8002b14:	d000      	beq.n	8002b18 <gdispImageOpen_BMP+0x1c8>
 8002b16:	e746      	b.n	80029a6 <gdispImageOpen_BMP+0x56>
				priv->palette[aword] = RGB2COLOR(((uint8_t *)priv->buf)[2], ((uint8_t *)priv->buf)[1], ((uint8_t *)priv->buf)[0]);
 8002b18:	7cab      	ldrb	r3, [r5, #18]
 8002b1a:	7c6a      	ldrb	r2, [r5, #17]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	7c2b      	ldrb	r3, [r5, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	4193      	sbcs	r3, r2
 8002b26:	686a      	ldr	r2, [r5, #4]
 8002b28:	5593      	strb	r3, [r2, r6]
			for(aword = 0; aword < priv->palsize; aword++) {
				if (gfileRead(img->f, &priv->buf, 3) != 3) goto baddatacleanup;
				priv->palette[aword] = RGB2COLOR(((uint8_t *)priv->buf)[2], ((uint8_t *)priv->buf)[1], ((uint8_t *)priv->buf)[0]);
			}
		} else {
			for(aword = 0; aword < priv->palsize; aword++) {
 8002b2a:	3601      	adds	r6, #1
 8002b2c:	b2b6      	uxth	r6, r6
 8002b2e:	e7e8      	b.n	8002b02 <gdispImageOpen_BMP+0x1b2>
 8002b30:	00008001 	.word	0x00008001
 8002b34:	00008002 	.word	0x00008002
 8002b38:	00008004 	.word	0x00008004
 8002b3c:	00008003 	.word	0x00008003

08002b40 <gdispImageCache_BMP>:
	default:
		return len;
	}
}

gdispImageError gdispImageCache_BMP(gdispImage *img) {
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	464f      	mov	r7, r9
 8002b44:	4646      	mov	r6, r8
	color_t *			pcd;
	coord_t				pos, x, y;
	size_t				len;

	/* If we are already cached - just return OK */
	priv = (gdispImagePrivate_BMP *)img->priv;
 8002b46:	6944      	ldr	r4, [r0, #20]
	default:
		return len;
	}
}

gdispImageError gdispImageCache_BMP(gdispImage *img) {
 8002b48:	b4c0      	push	{r6, r7}
	coord_t				pos, x, y;
	size_t				len;

	/* If we are already cached - just return OK */
	priv = (gdispImagePrivate_BMP *)img->priv;
	if (priv->frame0cache)
 8002b4a:	68e3      	ldr	r3, [r4, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <gdispImageCache_BMP+0x1a>
		return GDISP_IMAGE_ERR_OK;
 8002b50:	2000      	movs	r0, #0
			}
		}
	}

	return GDISP_IMAGE_ERR_OK;
}
 8002b52:	bc0c      	pop	{r2, r3}
 8002b54:	4690      	mov	r8, r2
 8002b56:	4699      	mov	r9, r3
 8002b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	priv = (gdispImagePrivate_BMP *)img->priv;
	if (priv->frame0cache)
		return GDISP_IMAGE_ERR_OK;

	/* We need to allocate the cache */
	len = img->width * img->height * sizeof(pixel_t);
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	5ec1      	ldrsh	r1, [r0, r3]
 8002b5e:	2208      	movs	r2, #8
 8002b60:	5e83      	ldrsh	r3, [r0, r2]
 8002b62:	1c05      	adds	r5, r0, #0
 8002b64:	4359      	muls	r1, r3
	priv->frame0cache = (pixel_t *)gdispImageAlloc(img, len);
 8002b66:	f7ff fe77 	bl	8002858 <gdispImageAlloc>
 8002b6a:	60e0      	str	r0, [r4, #12]
	if (!priv->frame0cache)
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d06b      	beq.n	8002c48 <gdispImageCache_BMP+0x108>
		return GDISP_IMAGE_ERR_NOMEMORY;

	/* Read the entire bitmap into cache */
	gfileSetPos(img->f, priv->frame0pos);
 8002b70:	68e8      	ldr	r0, [r5, #12]
 8002b72:	68a1      	ldr	r1, [r4, #8]
 8002b74:	f001 fd94 	bl	80046a0 <gfileSetPos>
#if GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8_RLE
	priv->rlerun = 0;
	priv->rlecode = 0;
#endif

	pcs = priv->buf;				// This line is just to prevent a compiler warning.
 8002b78:	2310      	movs	r3, #16
 8002b7a:	4699      	mov	r9, r3

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
 8002b7c:	7823      	ldrb	r3, [r4, #0]
#if GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8_RLE
	priv->rlerun = 0;
	priv->rlecode = 0;
#endif

	pcs = priv->buf;				// This line is just to prevent a compiler warning.
 8002b7e:	44a1      	add	r9, r4

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
 8002b80:	2b7f      	cmp	r3, #127	; 0x7f
 8002b82:	d82c      	bhi.n	8002bde <gdispImageCache_BMP+0x9e>
				*pcd++ = *pcs++;
				x++; pos--;
			}
		}
	} else {
		for(y = img->height-1, pcd = priv->frame0cache + img->width*(img->height-1); y >= 0; y--, pcd -= 2*img->width) {
 8002b84:	892b      	ldrh	r3, [r5, #8]
 8002b86:	88e9      	ldrh	r1, [r5, #6]
 8002b88:	1e58      	subs	r0, r3, #1
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	b20a      	sxth	r2, r1
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	4353      	muls	r3, r2
 8002b92:	68e4      	ldr	r4, [r4, #12]
 8002b94:	18e4      	adds	r4, r4, r3
 8002b96:	b283      	uxth	r3, r0
 8002b98:	4698      	mov	r8, r3
 8002b9a:	0403      	lsls	r3, r0, #16
 8002b9c:	d4d8      	bmi.n	8002b50 <gdispImageCache_BMP+0x10>
 8002b9e:	464f      	mov	r7, r9
			x = 0; pos = 0;
			while(x < img->width) {
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	dd45      	ble.n	8002c30 <gdispImageCache_BMP+0xf0>
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	b2a6      	uxth	r6, r4
 8002ba8:	e00c      	b.n	8002bc4 <gdispImageCache_BMP+0x84>
				if (!pos) {
					if (!(pos = getPixels(img, x)))
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
				}
				*pcd++ = *pcs++;
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	3401      	adds	r4, #1
 8002bae:	1c5f      	adds	r7, r3, #1
 8002bb0:	1e63      	subs	r3, r4, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
			}
		}
	} else {
		for(y = img->height-1, pcd = priv->frame0cache + img->width*(img->height-1); y >= 0; y--, pcd -= 2*img->width) {
			x = 0; pos = 0;
			while(x < img->width) {
 8002bb4:	88e9      	ldrh	r1, [r5, #6]
 8002bb6:	1ba3      	subs	r3, r4, r6
					if (!(pos = getPixels(img, x)))
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
				}
				*pcd++ = *pcs++;
				x++; pos--;
 8002bb8:	3801      	subs	r0, #1
			}
		}
	} else {
		for(y = img->height-1, pcd = priv->frame0cache + img->width*(img->height-1); y >= 0; y--, pcd -= 2*img->width) {
			x = 0; pos = 0;
			while(x < img->width) {
 8002bba:	b20a      	sxth	r2, r1
 8002bbc:	b21b      	sxth	r3, r3
					if (!(pos = getPixels(img, x)))
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
				}
				*pcd++ = *pcs++;
				x++; pos--;
 8002bbe:	b280      	uxth	r0, r0
			}
		}
	} else {
		for(y = img->height-1, pcd = priv->frame0cache + img->width*(img->height-1); y >= 0; y--, pcd -= 2*img->width) {
			x = 0; pos = 0;
			while(x < img->width) {
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dd35      	ble.n	8002c30 <gdispImageCache_BMP+0xf0>
 8002bc4:	1ba1      	subs	r1, r4, r6
 8002bc6:	b289      	uxth	r1, r1
 8002bc8:	1c3b      	adds	r3, r7, #0
				if (!pos) {
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d1ed      	bne.n	8002baa <gdispImageCache_BMP+0x6a>
					if (!(pos = getPixels(img, x)))
 8002bce:	b209      	sxth	r1, r1
 8002bd0:	1c28      	adds	r0, r5, #0
 8002bd2:	f7ff fe4d 	bl	8002870 <getPixels>
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d038      	beq.n	8002c4c <gdispImageCache_BMP+0x10c>
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
 8002bda:	464b      	mov	r3, r9
 8002bdc:	e7e5      	b.n	8002baa <gdispImageCache_BMP+0x6a>
#endif

	pcs = priv->buf;				// This line is just to prevent a compiler warning.

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(y = 0, pcd = priv->frame0cache; y < img->height; y++) {
 8002bde:	2208      	movs	r2, #8
 8002be0:	5eab      	ldrsh	r3, [r5, r2]
 8002be2:	68e4      	ldr	r4, [r4, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	ddb3      	ble.n	8002b50 <gdispImageCache_BMP+0x10>
 8002be8:	2100      	movs	r1, #0
 8002bea:	464a      	mov	r2, r9
 8002bec:	4688      	mov	r8, r1
 8002bee:	2006      	movs	r0, #6
 8002bf0:	5e29      	ldrsh	r1, [r5, r0]
			x = 0; pos = 0;
			while(x < img->width) {
 8002bf2:	2900      	cmp	r1, #0
 8002bf4:	dd2e      	ble.n	8002c54 <gdispImageCache_BMP+0x114>
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	b2a6      	uxth	r6, r4
 8002bfa:	e00c      	b.n	8002c16 <gdispImageCache_BMP+0xd6>
				if (!pos) {
					if (!(pos = getPixels(img, x)))
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
				}
				*pcd++ = *pcs++;
 8002bfc:	7819      	ldrb	r1, [r3, #0]
 8002bfe:	3401      	adds	r4, #1
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	1e63      	subs	r3, r4, #1
 8002c04:	7019      	strb	r1, [r3, #0]
	pcs = priv->buf;				// This line is just to prevent a compiler warning.

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(y = 0, pcd = priv->frame0cache; y < img->height; y++) {
			x = 0; pos = 0;
			while(x < img->width) {
 8002c06:	2706      	movs	r7, #6
 8002c08:	5fe9      	ldrsh	r1, [r5, r7]
 8002c0a:	1ba3      	subs	r3, r4, r6
					if (!(pos = getPixels(img, x)))
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
				}
				*pcd++ = *pcs++;
				x++; pos--;
 8002c0c:	3801      	subs	r0, #1
	pcs = priv->buf;				// This line is just to prevent a compiler warning.

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(y = 0, pcd = priv->frame0cache; y < img->height; y++) {
			x = 0; pos = 0;
			while(x < img->width) {
 8002c0e:	b21b      	sxth	r3, r3
					if (!(pos = getPixels(img, x)))
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
				}
				*pcd++ = *pcs++;
				x++; pos--;
 8002c10:	b280      	uxth	r0, r0
	pcs = priv->buf;				// This line is just to prevent a compiler warning.

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(y = 0, pcd = priv->frame0cache; y < img->height; y++) {
			x = 0; pos = 0;
			while(x < img->width) {
 8002c12:	4299      	cmp	r1, r3
 8002c14:	dd1c      	ble.n	8002c50 <gdispImageCache_BMP+0x110>
 8002c16:	1ba1      	subs	r1, r4, r6
 8002c18:	b289      	uxth	r1, r1
 8002c1a:	1c13      	adds	r3, r2, #0
				if (!pos) {
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d1ed      	bne.n	8002bfc <gdispImageCache_BMP+0xbc>
					if (!(pos = getPixels(img, x)))
 8002c20:	b209      	sxth	r1, r1
 8002c22:	1c28      	adds	r0, r5, #0
 8002c24:	f7ff fe24 	bl	8002870 <getPixels>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d00f      	beq.n	8002c4c <gdispImageCache_BMP+0x10c>
						return GDISP_IMAGE_ERR_BADDATA;
					pcs = priv->buf;
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	e7e5      	b.n	8002bfc <gdispImageCache_BMP+0xbc>
 8002c30:	4643      	mov	r3, r8
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4698      	mov	r8, r3
				*pcd++ = *pcs++;
				x++; pos--;
			}
		}
	} else {
		for(y = img->height-1, pcd = priv->frame0cache + img->width*(img->height-1); y >= 0; y--, pcd -= 2*img->width) {
 8002c38:	0052      	lsls	r2, r2, #1
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	1aa4      	subs	r4, r4, r2
 8002c3e:	3301      	adds	r3, #1
 8002c40:	d100      	bne.n	8002c44 <gdispImageCache_BMP+0x104>
 8002c42:	e785      	b.n	8002b50 <gdispImageCache_BMP+0x10>
 8002c44:	b20a      	sxth	r2, r1
 8002c46:	e7ab      	b.n	8002ba0 <gdispImageCache_BMP+0x60>

	/* We need to allocate the cache */
	len = img->width * img->height * sizeof(pixel_t);
	priv->frame0cache = (pixel_t *)gdispImageAlloc(img, len);
	if (!priv->frame0cache)
		return GDISP_IMAGE_ERR_NOMEMORY;
 8002c48:	4806      	ldr	r0, [pc, #24]	; (8002c64 <gdispImageCache_BMP+0x124>)
 8002c4a:	e782      	b.n	8002b52 <gdispImageCache_BMP+0x12>
		for(y = 0, pcd = priv->frame0cache; y < img->height; y++) {
			x = 0; pos = 0;
			while(x < img->width) {
				if (!pos) {
					if (!(pos = getPixels(img, x)))
						return GDISP_IMAGE_ERR_BADDATA;
 8002c4c:	4806      	ldr	r0, [pc, #24]	; (8002c68 <gdispImageCache_BMP+0x128>)
 8002c4e:	e780      	b.n	8002b52 <gdispImageCache_BMP+0x12>
 8002c50:	2008      	movs	r0, #8
 8002c52:	5e2b      	ldrsh	r3, [r5, r0]
 8002c54:	4647      	mov	r7, r8
 8002c56:	3701      	adds	r7, #1
 8002c58:	b2b8      	uxth	r0, r7
 8002c5a:	4680      	mov	r8, r0
#endif

	pcs = priv->buf;				// This line is just to prevent a compiler warning.

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(y = 0, pcd = priv->frame0cache; y < img->height; y++) {
 8002c5c:	b200      	sxth	r0, r0
 8002c5e:	4283      	cmp	r3, r0
 8002c60:	dcc7      	bgt.n	8002bf2 <gdispImageCache_BMP+0xb2>
 8002c62:	e775      	b.n	8002b50 <gdispImageCache_BMP+0x10>
 8002c64:	00008004 	.word	0x00008004
 8002c68:	00008002 	.word	0x00008002

08002c6c <gdispGImageDraw_BMP>:
	}

	return GDISP_IMAGE_ERR_OK;
}

gdispImageError gdispGImageDraw_BMP(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
 8002c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6e:	4656      	mov	r6, sl
 8002c70:	464d      	mov	r5, r9
 8002c72:	4644      	mov	r4, r8
 8002c74:	465f      	mov	r7, fp
 8002c76:	b4f0      	push	{r4, r5, r6, r7}
 8002c78:	b091      	sub	sp, #68	; 0x44
 8002c7a:	ac1a      	add	r4, sp, #104	; 0x68
 8002c7c:	9308      	str	r3, [sp, #32]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	5ee4      	ldrsh	r4, [r4, r3]
 8002c82:	9207      	str	r2, [sp, #28]
 8002c84:	9406      	str	r4, [sp, #24]
 8002c86:	1c23      	adds	r3, r4, #0
 8002c88:	ac1b      	add	r4, sp, #108	; 0x6c
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	5ea5      	ldrsh	r5, [r4, r2]
 8002c8e:	ac1c      	add	r4, sp, #112	; 0x70
 8002c90:	2200      	movs	r2, #0
 8002c92:	5ea4      	ldrsh	r4, [r4, r2]
	coord_t				pos, len, st;

	priv = (gdispImagePrivate_BMP *)img->priv;

	/* Check some reasonableness */
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
 8002c94:	88ce      	ldrh	r6, [r1, #6]
	}

	return GDISP_IMAGE_ERR_OK;
}

gdispImageError gdispGImageDraw_BMP(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
 8002c96:	46a1      	mov	r9, r4
 8002c98:	ac1d      	add	r4, sp, #116	; 0x74
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	5ea4      	ldrsh	r4, [r4, r2]
	coord_t				pos, len, st;

	priv = (gdispImagePrivate_BMP *)img->priv;

	/* Check some reasonableness */
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
 8002c9e:	b237      	sxth	r7, r6
	}

	return GDISP_IMAGE_ERR_OK;
}

gdispImageError gdispGImageDraw_BMP(GDisplay *g, gdispImage *img, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t sx, coord_t sy) {
 8002ca0:	46a0      	mov	r8, r4
	gdispImagePrivate_BMP *	priv;
	coord_t				mx, my;
	coord_t				pos, len, st;

	priv = (gdispImagePrivate_BMP *)img->priv;
 8002ca2:	694c      	ldr	r4, [r1, #20]
 8002ca4:	46a2      	mov	sl, r4

	/* Check some reasonableness */
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
 8002ca6:	454f      	cmp	r7, r9
 8002ca8:	dd35      	ble.n	8002d16 <gdispGImageDraw_BMP+0xaa>
 8002caa:	890c      	ldrh	r4, [r1, #8]
 8002cac:	b222      	sxth	r2, r4
 8002cae:	4694      	mov	ip, r2
 8002cb0:	4542      	cmp	r2, r8
 8002cb2:	dd30      	ble.n	8002d16 <gdispGImageDraw_BMP+0xaa>
	if (sx + cx > img->width) cx = img->width - sx;
 8002cb4:	444b      	add	r3, r9
 8002cb6:	42bb      	cmp	r3, r7
 8002cb8:	dd03      	ble.n	8002cc2 <gdispGImageDraw_BMP+0x56>
 8002cba:	464b      	mov	r3, r9
 8002cbc:	1af6      	subs	r6, r6, r3
 8002cbe:	b233      	sxth	r3, r6
 8002cc0:	9306      	str	r3, [sp, #24]
	if (sy + cy > img->height) cy = img->height - sy;
 8002cc2:	4643      	mov	r3, r8
 8002cc4:	195e      	adds	r6, r3, r5
 8002cc6:	4566      	cmp	r6, ip
 8002cc8:	dc2d      	bgt.n	8002d26 <gdispGImageDraw_BMP+0xba>

	/* Draw from the image cache - if it exists */
	if (priv->frame0cache) {
 8002cca:	4653      	mov	r3, sl
 8002ccc:	9a07      	ldr	r2, [sp, #28]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	9c08      	ldr	r4, [sp, #32]
 8002cd2:	1c0e      	adds	r6, r1, #0
 8002cd4:	9208      	str	r2, [sp, #32]
 8002cd6:	9007      	str	r0, [sp, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d027      	beq.n	8002d2c <gdispGImageDraw_BMP+0xc0>
		gdispGBlitArea(g, x, y, cx, cy, sx, sy, img->width, priv->frame0cache);
 8002cdc:	9500      	str	r5, [sp, #0]
 8002cde:	464d      	mov	r5, r9
 8002ce0:	9501      	str	r5, [sp, #4]
 8002ce2:	4645      	mov	r5, r8
 8002ce4:	9304      	str	r3, [sp, #16]
 8002ce6:	1c11      	adds	r1, r2, #0
 8002ce8:	9502      	str	r5, [sp, #8]
 8002cea:	9703      	str	r7, [sp, #12]
 8002cec:	1c22      	adds	r2, r4, #0
 8002cee:	9b06      	ldr	r3, [sp, #24]
 8002cf0:	f7ff f8ca 	bl	8001e88 <gdispGBlitArea>
		return GDISP_IMAGE_ERR_OK;
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	e00f      	b.n	8002d18 <gdispGImageDraw_BMP+0xac>
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	5e72      	ldrsh	r2, [r6, r1]
 8002cfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002cfe:	3101      	adds	r1, #1
 8002d00:	b289      	uxth	r1, r1
 8002d02:	1c08      	adds	r0, r1, #0
 8002d04:	910a      	str	r1, [sp, #40]	; 0x28
 8002d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d08:	3101      	adds	r1, #1
 8002d0a:	b289      	uxth	r1, r1
 8002d0c:	910b      	str	r1, [sp, #44]	; 0x2c
	priv->rlerun = 0;
	priv->rlecode = 0;
#endif

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(my = 0; my < img->height; my++) {
 8002d0e:	b201      	sxth	r1, r0
 8002d10:	428a      	cmp	r2, r1
 8002d12:	dd00      	ble.n	8002d16 <gdispGImageDraw_BMP+0xaa>
 8002d14:	e0b4      	b.n	8002e80 <gdispGImageDraw_BMP+0x214>
	coord_t				pos, len, st;

	priv = (gdispImagePrivate_BMP *)img->priv;

	/* Check some reasonableness */
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
 8002d16:	2000      	movs	r0, #0
			}
		}
	}

	return GDISP_IMAGE_ERR_OK;
}
 8002d18:	b011      	add	sp, #68	; 0x44
 8002d1a:	bc3c      	pop	{r2, r3, r4, r5}
 8002d1c:	4690      	mov	r8, r2
 8002d1e:	4699      	mov	r9, r3
 8002d20:	46a2      	mov	sl, r4
 8002d22:	46ab      	mov	fp, r5
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	priv = (gdispImagePrivate_BMP *)img->priv;

	/* Check some reasonableness */
	if (sx >= img->width || sy >= img->height) return GDISP_IMAGE_ERR_OK;
	if (sx + cx > img->width) cx = img->width - sx;
	if (sy + cy > img->height) cy = img->height - sy;
 8002d26:	1ae5      	subs	r5, r4, r3
 8002d28:	b22d      	sxth	r5, r5
 8002d2a:	e7ce      	b.n	8002cca <gdispGImageDraw_BMP+0x5e>
		gdispGBlitArea(g, x, y, cx, cy, sx, sy, img->width, priv->frame0cache);
		return GDISP_IMAGE_ERR_OK;
	}

	/* Start decoding from the beginning */
	gfileSetPos(img->f, priv->frame0pos);
 8002d2c:	4653      	mov	r3, sl
 8002d2e:	68c8      	ldr	r0, [r1, #12]
 8002d30:	6899      	ldr	r1, [r3, #8]
 8002d32:	f001 fcb5 	bl	80046a0 <gfileSetPos>
#if GDISP_NEED_IMAGE_BMP_4_RLE || GDISP_NEED_IMAGE_BMP_8_RLE
	priv->rlerun = 0;
	priv->rlecode = 0;
#endif

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
 8002d36:	4653      	mov	r3, sl
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d3c:	d900      	bls.n	8002d40 <gdispGImageDraw_BMP+0xd4>
 8002d3e:	e089      	b.n	8002e54 <gdispGImageDraw_BMP+0x1e8>
				}
				mx += pos;
			}
		}
	} else {
		for(my = img->height-1; my >= 0; my--) {
 8002d40:	8933      	ldrh	r3, [r6, #8]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	920d      	str	r2, [sp, #52]	; 0x34
 8002d4a:	b212      	sxth	r2, r2
 8002d4c:	4693      	mov	fp, r2
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	dbe1      	blt.n	8002d16 <gdispGImageDraw_BMP+0xaa>
 8002d52:	191c      	adds	r4, r3, r4
 8002d54:	4643      	mov	r3, r8
 8002d56:	1ae4      	subs	r4, r4, r3
 8002d58:	b2a3      	uxth	r3, r4
 8002d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8002d5c:	2206      	movs	r2, #6
 8002d5e:	5eb3      	ldrsh	r3, [r6, r2]
			mx = 0;
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
 8002d60:	1c2a      	adds	r2, r5, #0
 8002d62:	9906      	ldr	r1, [sp, #24]
 8002d64:	4442      	add	r2, r8
 8002d66:	4449      	add	r1, r9
 8002d68:	9109      	str	r1, [sp, #36]	; 0x24
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	46ca      	mov	sl, r9
 8002d6e:	4691      	mov	r9, r2
 8002d70:	910e      	str	r1, [sp, #56]	; 0x38
			}
		}
	} else {
		for(my = img->height-1; my >= 0; my--) {
			mx = 0;
			while(mx < img->width) {
 8002d72:	2400      	movs	r4, #0
 8002d74:	2700      	movs	r7, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dd56      	ble.n	8002e28 <gdispGImageDraw_BMP+0x1bc>
					len = pos-st;
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
					if (len == 1)
						gdispGDrawPixel(g, x+mx+st-sx, y+my-sy, priv->buf[st]);
					else
						gdispGBlitArea(g, x+mx+st-sx, y+my-sy, len, 1, st, 0, pos, priv->buf);
 8002d7a:	466b      	mov	r3, sp
 8002d7c:	465d      	mov	r5, fp
 8002d7e:	2228      	movs	r2, #40	; 0x28
 8002d80:	5e9b      	ldrsh	r3, [r3, r2]
 8002d82:	930c      	str	r3, [sp, #48]	; 0x30
		}
	} else {
		for(my = img->height-1; my >= 0; my--) {
			mx = 0;
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
 8002d84:	1c30      	adds	r0, r6, #0
 8002d86:	1c39      	adds	r1, r7, #0
 8002d88:	f7ff fd72 	bl	8002870 <getPixels>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d059      	beq.n	8002e44 <gdispGImageDraw_BMP+0x1d8>
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
 8002d90:	45a8      	cmp	r8, r5
 8002d92:	dc3f      	bgt.n	8002e14 <gdispGImageDraw_BMP+0x1a8>
 8002d94:	454d      	cmp	r5, r9
 8002d96:	da3d      	bge.n	8002e14 <gdispGImageDraw_BMP+0x1a8>
 8002d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d9a:	429f      	cmp	r7, r3
 8002d9c:	da3a      	bge.n	8002e14 <gdispGImageDraw_BMP+0x1a8>
 8002d9e:	183b      	adds	r3, r7, r0
 8002da0:	459a      	cmp	sl, r3
 8002da2:	dc37      	bgt.n	8002e14 <gdispGImageDraw_BMP+0x1a8>
					st = mx < sx ? sx - mx : 0;
 8002da4:	4653      	mov	r3, sl
 8002da6:	466a      	mov	r2, sp
 8002da8:	8593      	strh	r3, [r2, #44]	; 0x2c
 8002daa:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8002dac:	b2a4      	uxth	r4, r4
 8002dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8002db0:	45ba      	cmp	sl, r7
 8002db2:	dc49      	bgt.n	8002e48 <gdispGImageDraw_BMP+0x1dc>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	2200      	movs	r2, #0
 8002dba:	930f      	str	r3, [sp, #60]	; 0x3c
					len = pos-st;
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
 8002dbc:	187f      	adds	r7, r7, r1
 8002dbe:	46bc      	mov	ip, r7
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
					st = mx < sx ? sx - mx : 0;
					len = pos-st;
 8002dc0:	b283      	uxth	r3, r0
 8002dc2:	469b      	mov	fp, r3
 8002dc4:	1a9b      	subs	r3, r3, r2
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
 8002dc6:	b21b      	sxth	r3, r3
 8002dc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002dca:	449c      	add	ip, r3
 8002dcc:	4567      	cmp	r7, ip
 8002dce:	da06      	bge.n	8002dde <gdispGImageDraw_BMP+0x172>
 8002dd0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8002dd2:	9b06      	ldr	r3, [sp, #24]
 8002dd4:	46bc      	mov	ip, r7
 8002dd6:	4463      	add	r3, ip
 8002dd8:	1b1b      	subs	r3, r3, r4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	b21b      	sxth	r3, r3
					if (len == 1)
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d100      	bne.n	8002de4 <gdispGImageDraw_BMP+0x178>
 8002de2:	e0ae      	b.n	8002f42 <gdispGImageDraw_BMP+0x2d6>
 8002de4:	18a1      	adds	r1, r4, r2
 8002de6:	9a08      	ldr	r2, [sp, #32]
 8002de8:	4694      	mov	ip, r2
						gdispGDrawPixel(g, x+mx+st-sx, y+my-sy, priv->buf[st]);
					else
						gdispGBlitArea(g, x+mx+st-sx, y+my-sy, len, 1, st, 0, pos, priv->buf);
 8002dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002dec:	4461      	add	r1, ip
 8002dee:	1a89      	subs	r1, r1, r2
 8002df0:	2201      	movs	r2, #1
 8002df2:	9200      	str	r2, [sp, #0]
 8002df4:	466a      	mov	r2, sp
 8002df6:	273c      	movs	r7, #60	; 0x3c
 8002df8:	5fd2      	ldrsh	r2, [r2, r7]
 8002dfa:	b209      	sxth	r1, r1
 8002dfc:	9201      	str	r2, [sp, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	9202      	str	r2, [sp, #8]
 8002e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e04:	9003      	str	r0, [sp, #12]
 8002e06:	3210      	adds	r2, #16
 8002e08:	9204      	str	r2, [sp, #16]
 8002e0a:	9807      	ldr	r0, [sp, #28]
 8002e0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e0e:	f7ff f83b 	bl	8001e88 <gdispGBlitArea>
 8002e12:	e002      	b.n	8002e1a <gdispGImageDraw_BMP+0x1ae>
 8002e14:	b283      	uxth	r3, r0
 8002e16:	469b      	mov	fp, r3
 8002e18:	b2a4      	uxth	r4, r4
				}
				mx += pos;
 8002e1a:	445c      	add	r4, fp
 8002e1c:	b2a4      	uxth	r4, r4
			}
		}
	} else {
		for(my = img->height-1; my >= 0; my--) {
			mx = 0;
			while(mx < img->width) {
 8002e1e:	2206      	movs	r2, #6
 8002e20:	5eb3      	ldrsh	r3, [r6, r2]
 8002e22:	b227      	sxth	r7, r4
 8002e24:	42bb      	cmp	r3, r7
 8002e26:	dcad      	bgt.n	8002d84 <gdispGImageDraw_BMP+0x118>
 8002e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	1c11      	adds	r1, r2, #0
 8002e30:	920d      	str	r2, [sp, #52]	; 0x34
 8002e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e34:	3a01      	subs	r2, #1
 8002e36:	b292      	uxth	r2, r2
 8002e38:	920a      	str	r2, [sp, #40]	; 0x28
				}
				mx += pos;
			}
		}
	} else {
		for(my = img->height-1; my >= 0; my--) {
 8002e3a:	b20a      	sxth	r2, r1
 8002e3c:	4693      	mov	fp, r2
 8002e3e:	3201      	adds	r2, #1
 8002e40:	d197      	bne.n	8002d72 <gdispGImageDraw_BMP+0x106>
 8002e42:	e768      	b.n	8002d16 <gdispGImageDraw_BMP+0xaa>
	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(my = 0; my < img->height; my++) {
			mx = 0;
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
 8002e44:	4853      	ldr	r0, [pc, #332]	; (8002f94 <gdispGImageDraw_BMP+0x328>)
 8002e46:	e767      	b.n	8002d18 <gdispGImageDraw_BMP+0xac>
			mx = 0;
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
					st = mx < sx ? sx - mx : 0;
 8002e48:	1b1a      	subs	r2, r3, r4
 8002e4a:	b292      	uxth	r2, r2
 8002e4c:	b293      	uxth	r3, r2
 8002e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e50:	b219      	sxth	r1, r3
 8002e52:	e7b3      	b.n	8002dbc <gdispGImageDraw_BMP+0x150>
	priv->rlerun = 0;
	priv->rlecode = 0;
#endif

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(my = 0; my < img->height; my++) {
 8002e54:	2308      	movs	r3, #8
 8002e56:	5ef2      	ldrsh	r2, [r6, r3]
 8002e58:	2a00      	cmp	r2, #0
 8002e5a:	dc00      	bgt.n	8002e5e <gdispGImageDraw_BMP+0x1f2>
 8002e5c:	e75b      	b.n	8002d16 <gdispGImageDraw_BMP+0xaa>
 8002e5e:	4643      	mov	r3, r8
 8002e60:	1ae4      	subs	r4, r4, r3
 8002e62:	b2a3      	uxth	r3, r4
 8002e64:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e66:	2300      	movs	r3, #0
 8002e68:	930a      	str	r3, [sp, #40]	; 0x28
 8002e6a:	2106      	movs	r1, #6
 8002e6c:	5e73      	ldrsh	r3, [r6, r1]
			mx = 0;
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
 8002e6e:	1c29      	adds	r1, r5, #0
 8002e70:	9806      	ldr	r0, [sp, #24]
 8002e72:	4441      	add	r1, r8
 8002e74:	4448      	add	r0, r9
 8002e76:	9009      	str	r0, [sp, #36]	; 0x24
 8002e78:	4650      	mov	r0, sl
 8002e7a:	46cb      	mov	fp, r9
 8002e7c:	468a      	mov	sl, r1
 8002e7e:	900e      	str	r0, [sp, #56]	; 0x38
#endif

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(my = 0; my < img->height; my++) {
			mx = 0;
			while(mx < img->width) {
 8002e80:	2400      	movs	r4, #0
 8002e82:	2700      	movs	r7, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	dc00      	bgt.n	8002e8a <gdispGImageDraw_BMP+0x21e>
 8002e88:	e738      	b.n	8002cfc <gdispGImageDraw_BMP+0x90>
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
 8002e8a:	466b      	mov	r3, sp
 8002e8c:	2228      	movs	r2, #40	; 0x28
 8002e8e:	5e9b      	ldrsh	r3, [r3, r2]
 8002e90:	1c1d      	adds	r5, r3, #0
 8002e92:	e04a      	b.n	8002f2a <gdispGImageDraw_BMP+0x2be>
 8002e94:	4555      	cmp	r5, sl
 8002e96:	da50      	bge.n	8002f3a <gdispGImageDraw_BMP+0x2ce>
 8002e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e9a:	429f      	cmp	r7, r3
 8002e9c:	da4d      	bge.n	8002f3a <gdispGImageDraw_BMP+0x2ce>
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	459b      	cmp	fp, r3
 8002ea2:	dc4a      	bgt.n	8002f3a <gdispGImageDraw_BMP+0x2ce>
					st = mx < sx ? sx - mx : 0;
 8002ea4:	465b      	mov	r3, fp
 8002ea6:	466a      	mov	r2, sp
 8002ea8:	8613      	strh	r3, [r2, #48]	; 0x30
 8002eaa:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8002eac:	b2a4      	uxth	r4, r4
 8002eae:	930c      	str	r3, [sp, #48]	; 0x30
 8002eb0:	45bb      	cmp	fp, r7
 8002eb2:	dc56      	bgt.n	8002f62 <gdispGImageDraw_BMP+0x2f6>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	930d      	str	r3, [sp, #52]	; 0x34
 8002eba:	930f      	str	r3, [sp, #60]	; 0x3c
					len = pos-st;
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
 8002ebc:	990d      	ldr	r1, [sp, #52]	; 0x34
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
					st = mx < sx ? sx - mx : 0;
					len = pos-st;
 8002ebe:	b283      	uxth	r3, r0
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
 8002ec0:	468c      	mov	ip, r1
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
					st = mx < sx ? sx - mx : 0;
					len = pos-st;
 8002ec2:	4699      	mov	r9, r3
 8002ec4:	1a9b      	subs	r3, r3, r2
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
 8002ec6:	4467      	add	r7, ip
 8002ec8:	b21b      	sxth	r3, r3
 8002eca:	18f9      	adds	r1, r7, r3
 8002ecc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002ece:	428f      	cmp	r7, r1
 8002ed0:	da06      	bge.n	8002ee0 <gdispGImageDraw_BMP+0x274>
 8002ed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ed4:	9b06      	ldr	r3, [sp, #24]
 8002ed6:	468c      	mov	ip, r1
 8002ed8:	4463      	add	r3, ip
 8002eda:	1b1b      	subs	r3, r3, r4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	18a2      	adds	r2, r4, r2
					if (len == 1)
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d044      	beq.n	8002f70 <gdispGImageDraw_BMP+0x304>
 8002ee6:	9f08      	ldr	r7, [sp, #32]
						gdispGDrawPixel(g, x+mx+st-sx, y+my-sy, priv->buf[st]);
					else
						gdispGBlitArea(g, x+mx+st-sx, y+my-sy, len, 1, st, 0, pos, priv->buf);
 8002ee8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002eea:	46bc      	mov	ip, r7
 8002eec:	4462      	add	r2, ip
 8002eee:	1a51      	subs	r1, r2, r1
 8002ef0:	466a      	mov	r2, sp
 8002ef2:	272c      	movs	r7, #44	; 0x2c
 8002ef4:	5fd2      	ldrsh	r2, [r2, r7]
 8002ef6:	2701      	movs	r7, #1
 8002ef8:	920c      	str	r2, [sp, #48]	; 0x30
 8002efa:	466a      	mov	r2, sp
 8002efc:	9700      	str	r7, [sp, #0]
 8002efe:	273c      	movs	r7, #60	; 0x3c
 8002f00:	5fd7      	ldrsh	r7, [r2, r7]
 8002f02:	9003      	str	r0, [sp, #12]
 8002f04:	9701      	str	r7, [sp, #4]
 8002f06:	2700      	movs	r7, #0
 8002f08:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002f0a:	b209      	sxth	r1, r1
 8002f0c:	3010      	adds	r0, #16
 8002f0e:	9004      	str	r0, [sp, #16]
 8002f10:	9702      	str	r7, [sp, #8]
 8002f12:	9807      	ldr	r0, [sp, #28]
 8002f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f16:	f7fe ffb7 	bl	8001e88 <gdispGBlitArea>
				}
				mx += pos;
 8002f1a:	444c      	add	r4, r9
 8002f1c:	b2a4      	uxth	r4, r4
#endif

	if (priv->bmpflags & BMP_TOP_TO_BOTTOM) {
		for(my = 0; my < img->height; my++) {
			mx = 0;
			while(mx < img->width) {
 8002f1e:	2206      	movs	r2, #6
 8002f20:	5eb3      	ldrsh	r3, [r6, r2]
 8002f22:	b227      	sxth	r7, r4
 8002f24:	42bb      	cmp	r3, r7
 8002f26:	dc00      	bgt.n	8002f2a <gdispGImageDraw_BMP+0x2be>
 8002f28:	e6e6      	b.n	8002cf8 <gdispGImageDraw_BMP+0x8c>
				if (!(pos = getPixels(img, mx)))
 8002f2a:	1c30      	adds	r0, r6, #0
 8002f2c:	1c39      	adds	r1, r7, #0
 8002f2e:	f7ff fc9f 	bl	8002870 <getPixels>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d086      	beq.n	8002e44 <gdispGImageDraw_BMP+0x1d8>
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
 8002f36:	45a8      	cmp	r8, r5
 8002f38:	ddac      	ble.n	8002e94 <gdispGImageDraw_BMP+0x228>
 8002f3a:	b283      	uxth	r3, r0
 8002f3c:	b2a4      	uxth	r4, r4
 8002f3e:	4699      	mov	r9, r3
 8002f40:	e7eb      	b.n	8002f1a <gdispGImageDraw_BMP+0x2ae>
 8002f42:	9b08      	ldr	r3, [sp, #32]
 8002f44:	18a2      	adds	r2, r4, r2
 8002f46:	469c      	mov	ip, r3
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
					st = mx < sx ? sx - mx : 0;
					len = pos-st;
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
					if (len == 1)
						gdispGDrawPixel(g, x+mx+st-sx, y+my-sy, priv->buf[st]);
 8002f48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f4a:	4462      	add	r2, ip
 8002f4c:	1ad2      	subs	r2, r2, r3
 8002f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f50:	b212      	sxth	r2, r2
 8002f52:	185b      	adds	r3, r3, r1
 8002f54:	7c1b      	ldrb	r3, [r3, #16]
 8002f56:	1c11      	adds	r1, r2, #0
 8002f58:	9807      	ldr	r0, [sp, #28]
 8002f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f5c:	f7fe fe30 	bl	8001bc0 <gdispGDrawPixel>
 8002f60:	e75b      	b.n	8002e1a <gdispGImageDraw_BMP+0x1ae>
			mx = 0;
			while(mx < img->width) {
				if (!(pos = getPixels(img, mx)))
					return GDISP_IMAGE_ERR_BADDATA;
				if (my >= sy && my < sy+cy && mx < sx+cx && mx+pos >= sx) {
					st = mx < sx ? sx - mx : 0;
 8002f62:	1b1a      	subs	r2, r3, r4
 8002f64:	b292      	uxth	r2, r2
 8002f66:	b293      	uxth	r3, r2
 8002f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	930d      	str	r3, [sp, #52]	; 0x34
 8002f6e:	e7a5      	b.n	8002ebc <gdispGImageDraw_BMP+0x250>
 8002f70:	9b08      	ldr	r3, [sp, #32]
					len = pos-st;
					if (mx+st+len > sx+cx) len = sx+cx-mx-st;
					if (len == 1)
						gdispGDrawPixel(g, x+mx+st-sx, y+my-sy, priv->buf[st]);
 8002f72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f74:	469c      	mov	ip, r3
 8002f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f78:	4462      	add	r2, ip
 8002f7a:	1ad1      	subs	r1, r2, r3
 8002f7c:	466b      	mov	r3, sp
 8002f7e:	4684      	mov	ip, r0
 8002f80:	222c      	movs	r2, #44	; 0x2c
 8002f82:	5e9a      	ldrsh	r2, [r3, r2]
 8002f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f86:	b209      	sxth	r1, r1
 8002f88:	4463      	add	r3, ip
 8002f8a:	7c1b      	ldrb	r3, [r3, #16]
 8002f8c:	9807      	ldr	r0, [sp, #28]
 8002f8e:	f7fe fe17 	bl	8001bc0 <gdispGDrawPixel>
 8002f92:	e7c2      	b.n	8002f1a <gdispGImageDraw_BMP+0x2ae>
 8002f94:	00008002 	.word	0x00008002

08002f98 <gdispImageNext_BMP>:
delaytime_t gdispImageNext_BMP(gdispImage *img) {
	(void) img;

	/* No more frames/pages */
	return TIME_INFINITE;
}
 8002f98:	2001      	movs	r0, #1
 8002f9a:	4240      	negs	r0, r0
 8002f9c:	4770      	bx	lr
 8002f9e:	46c0      	nop			; (mov r8, r8)

08002fa0 <gdispImageGetPaletteSize_BMP>:

uint16_t gdispImageGetPaletteSize_BMP(gdispImage *img) {
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
 8002fa0:	6943      	ldr	r3, [r0, #20]
		if (!priv)
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <gdispImageGetPaletteSize_BMP+0x12>
			return 0;
	
		if (!(priv->bmpflags & BMP_PALETTE))
 8002fa6:	781a      	ldrb	r2, [r3, #0]
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
		if (!priv)
			return 0;
 8002fa8:	2000      	movs	r0, #0
	
		if (!(priv->bmpflags & BMP_PALETTE))
 8002faa:	0752      	lsls	r2, r2, #29
 8002fac:	d500      	bpl.n	8002fb0 <gdispImageGetPaletteSize_BMP+0x10>
			return 0;
	
		return priv->palsize;
 8002fae:	8858      	ldrh	r0, [r3, #2]
	#else
		return 0;
	#endif
}
 8002fb0:	4770      	bx	lr
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
		if (!priv)
			return 0;
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e7fc      	b.n	8002fb0 <gdispImageGetPaletteSize_BMP+0x10>
 8002fb6:	46c0      	nop			; (mov r8, r8)

08002fb8 <gdispImageGetPalette_BMP>:

color_t gdispImageGetPalette_BMP(gdispImage *img, uint16_t index) {
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
 8002fb8:	6942      	ldr	r2, [r0, #20]
		if (!priv)
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	d00b      	beq.n	8002fd6 <gdispImageGetPalette_BMP+0x1e>
			return 0;
	
		if (!(priv->bmpflags & BMP_PALETTE))
 8002fbe:	2004      	movs	r0, #4
 8002fc0:	7813      	ldrb	r3, [r2, #0]
 8002fc2:	4018      	ands	r0, r3
 8002fc4:	d006      	beq.n	8002fd4 <gdispImageGetPalette_BMP+0x1c>
			return 0;
	
		if (index >= priv->palsize)
 8002fc6:	8853      	ldrh	r3, [r2, #2]
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
		if (!priv)
			return 0;
 8002fc8:	2000      	movs	r0, #0
	
		if (!(priv->bmpflags & BMP_PALETTE))
			return 0;
	
		if (index >= priv->palsize)
 8002fca:	428b      	cmp	r3, r1
 8002fcc:	d902      	bls.n	8002fd4 <gdispImageGetPalette_BMP+0x1c>
			return 0;
	
		return priv->palette[(uint8_t)index];
 8002fce:	6853      	ldr	r3, [r2, #4]
 8002fd0:	b2c9      	uxtb	r1, r1
 8002fd2:	5c58      	ldrb	r0, [r3, r1]
	
	#else
		return 0;
	#endif
}
 8002fd4:	4770      	bx	lr
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
		if (!priv)
			return 0;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e7fc      	b.n	8002fd4 <gdispImageGetPalette_BMP+0x1c>
 8002fda:	46c0      	nop			; (mov r8, r8)

08002fdc <gdispImageAdjustPalette_BMP>:
	#else
		return 0;
	#endif
}

bool_t gdispImageAdjustPalette_BMP(gdispImage *img, uint16_t index, color_t newColor) {
 8002fdc:	b510      	push	{r4, lr}
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
 8002fde:	6944      	ldr	r4, [r0, #20]
		if (!priv)
 8002fe0:	2c00      	cmp	r4, #0
 8002fe2:	d00b      	beq.n	8002ffc <gdispImageAdjustPalette_BMP+0x20>
			return FALSE;
	
		if (!(priv->bmpflags & BMP_PALETTE))
 8002fe4:	2004      	movs	r0, #4
 8002fe6:	7823      	ldrb	r3, [r4, #0]
 8002fe8:	4018      	ands	r0, r3
 8002fea:	d006      	beq.n	8002ffa <gdispImageAdjustPalette_BMP+0x1e>
			return FALSE;
	
		if (index >= priv->palsize)
 8002fec:	8863      	ldrh	r3, [r4, #2]
 8002fee:	428b      	cmp	r3, r1
 8002ff0:	d904      	bls.n	8002ffc <gdispImageAdjustPalette_BMP+0x20>
			return FALSE;

		priv->palette[(uint8_t)index] = newColor;

		return TRUE;
 8002ff2:	20ff      	movs	r0, #255	; 0xff
			return FALSE;
	
		if (index >= priv->palsize)
			return FALSE;

		priv->palette[(uint8_t)index] = newColor;
 8002ff4:	6863      	ldr	r3, [r4, #4]
 8002ff6:	b2c9      	uxtb	r1, r1
 8002ff8:	545a      	strb	r2, [r3, r1]
		return TRUE;
	
	#else
		return 0;
	#endif
}
 8002ffa:	bd10      	pop	{r4, pc}
	#if GDISP_NEED_IMAGE_BMP_1 || GDISP_NEED_IMAGE_BMP_4 || GDISP_NEED_IMAGE_BMP_8
		gdispImagePrivate_BMP *priv;
	
		priv = (gdispImagePrivate_BMP *)img->priv;
		if (!priv)
			return FALSE;
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	e7fc      	b.n	8002ffa <gdispImageAdjustPalette_BMP+0x1e>

08003000 <mf_render_character>:
uint8_t mf_render_character(const struct mf_font_s *font,
                            int16_t x0, int16_t y0,
                            mf_char character,
                            mf_pixel_callback_t callback,
                            void *state)
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	1c15      	adds	r5, r2, #0
 8003004:	1c04      	adds	r4, r0, #0
 8003006:	b083      	sub	sp, #12
    uint8_t width;
    width = font->render_character(font, x0, y0, MFCHAR2UINT16(character), callback, state);
 8003008:	9a08      	ldr	r2, [sp, #32]
 800300a:	b29b      	uxth	r3, r3
 800300c:	9200      	str	r2, [sp, #0]
 800300e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003010:	69a7      	ldr	r7, [r4, #24]
 8003012:	9201      	str	r2, [sp, #4]
 8003014:	1c2a      	adds	r2, r5, #0
uint8_t mf_render_character(const struct mf_font_s *font,
                            int16_t x0, int16_t y0,
                            mf_char character,
                            mf_pixel_callback_t callback,
                            void *state)
{
 8003016:	1c0e      	adds	r6, r1, #0
    uint8_t width;
    width = font->render_character(font, x0, y0, MFCHAR2UINT16(character), callback, state);
 8003018:	47b8      	blx	r7
    
    if (!width)
 800301a:	2800      	cmp	r0, #0
 800301c:	d109      	bne.n	8003032 <mf_render_character+0x32>
    {
        width = font->render_character(font, x0, y0, font->fallback_character,
 800301e:	9a08      	ldr	r2, [sp, #32]
 8003020:	8a23      	ldrh	r3, [r4, #16]
 8003022:	9200      	str	r2, [sp, #0]
 8003024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003026:	69a7      	ldr	r7, [r4, #24]
 8003028:	9201      	str	r2, [sp, #4]
 800302a:	1c20      	adds	r0, r4, #0
 800302c:	1c31      	adds	r1, r6, #0
 800302e:	1c2a      	adds	r2, r5, #0
 8003030:	47b8      	blx	r7
                                       callback, state);
    }
    
    return width;
}
 8003032:	b003      	add	sp, #12
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)

08003038 <mf_character_width>:

uint8_t mf_character_width(const struct mf_font_s *font,
                           mf_char character)
{
 8003038:	b510      	push	{r4, lr}
 800303a:	1c04      	adds	r4, r0, #0
    uint8_t width;
    width = font->character_width(font, MFCHAR2UINT16(character));
 800303c:	b289      	uxth	r1, r1
 800303e:	6963      	ldr	r3, [r4, #20]
 8003040:	4798      	blx	r3
    
    if (!width)
 8003042:	2800      	cmp	r0, #0
 8003044:	d103      	bne.n	800304e <mf_character_width+0x16>
    {
        width = font->character_width(font, font->fallback_character);
 8003046:	8a21      	ldrh	r1, [r4, #16]
 8003048:	6963      	ldr	r3, [r4, #20]
 800304a:	1c20      	adds	r0, r4, #0
 800304c:	4798      	blx	r3
    }
    
    return width;
}
 800304e:	bd10      	pop	{r4, pc}

08003050 <mf_find_font>:
    }
    return (!*b);
}

const struct mf_font_s *mf_find_font(const char *name)
{
 8003050:	b510      	push	{r4, lr}
 8003052:	1c02      	adds	r2, r0, #0
 8003054:	4910      	ldr	r1, [pc, #64]	; (8003098 <mf_find_font+0x48>)
 8003056:	e005      	b.n	8003064 <mf_find_font+0x14>
 8003058:	3201      	adds	r2, #1
 800305a:	1e54      	subs	r4, r2, #1
/* Avoids a dependency on libc */
static bool strequals(const char *a, const char *b)
{
    while (*a)
    {
        if (*a++ != *b++)
 800305c:	7824      	ldrb	r4, [r4, #0]
 800305e:	3101      	adds	r1, #1
 8003060:	429c      	cmp	r4, r3
 8003062:	d105      	bne.n	8003070 <mf_find_font+0x20>
}

/* Avoids a dependency on libc */
static bool strequals(const char *a, const char *b)
{
    while (*a)
 8003064:	780b      	ldrb	r3, [r1, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f6      	bne.n	8003058 <mf_find_font+0x8>
    const struct mf_font_list_s *f;
    f = MF_INCLUDED_FONTS;
    
    while (f)
    {
        if (strequals(f->font->full_name, name) ||
 800306a:	7813      	ldrb	r3, [r2, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00f      	beq.n	8003090 <mf_find_font+0x40>
/* Avoids a dependency on libc */
static bool strequals(const char *a, const char *b)
{
    while (*a)
    {
        if (*a++ != *b++)
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <mf_find_font+0x4c>)
 8003072:	e005      	b.n	8003080 <mf_find_font+0x30>
 8003074:	3001      	adds	r0, #1
 8003076:	1e41      	subs	r1, r0, #1
 8003078:	7809      	ldrb	r1, [r1, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	4291      	cmp	r1, r2
 800307e:	d109      	bne.n	8003094 <mf_find_font+0x44>
}

/* Avoids a dependency on libc */
static bool strequals(const char *a, const char *b)
{
    while (*a)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	2a00      	cmp	r2, #0
 8003084:	d1f6      	bne.n	8003074 <mf_find_font+0x24>
    const struct mf_font_list_s *f;
    f = MF_INCLUDED_FONTS;
    
    while (f)
    {
        if (strequals(f->font->full_name, name) ||
 8003086:	7803      	ldrb	r3, [r0, #0]
        }
        
        f = f->next;
    }
    
    return 0;
 8003088:	2000      	movs	r0, #0
    const struct mf_font_list_s *f;
    f = MF_INCLUDED_FONTS;
    
    while (f)
    {
        if (strequals(f->font->full_name, name) ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d000      	beq.n	8003090 <mf_find_font+0x40>
        
        f = f->next;
    }
    
    return 0;
}
 800308e:	bd10      	pop	{r4, pc}
    while (f)
    {
        if (strequals(f->font->full_name, name) ||
            strequals(f->font->short_name, name))
        {
            return f->font;
 8003090:	4803      	ldr	r0, [pc, #12]	; (80030a0 <mf_find_font+0x50>)
 8003092:	e7fc      	b.n	800308e <mf_find_font+0x3e>
        }
        
        f = f->next;
    }
    
    return 0;
 8003094:	2000      	movs	r0, #0
 8003096:	e7fa      	b.n	800308e <mf_find_font+0x3e>
 8003098:	080074e4 	.word	0x080074e4
 800309c:	080074f8 	.word	0x080074f8
 80030a0:	080068f4 	.word	0x080068f4

080030a4 <mf_get_font_list>:
}

const struct mf_font_list_s *mf_get_font_list()
{
    return MF_INCLUDED_FONTS;
 80030a4:	4801      	ldr	r0, [pc, #4]	; (80030ac <mf_get_font_list+0x8>)
}
 80030a6:	3024      	adds	r0, #36	; 0x24
 80030a8:	4770      	bx	lr
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	080068f4 	.word	0x080068f4

080030b0 <mf_round_to_tab>:

#if MF_USE_TABS
/* Round the X coordinate up to the nearest tab stop. */
static int16_t mf_round_to_tab(const struct mf_font_s *font,
                               int16_t x0, int16_t x)
{
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	1c0f      	adds	r7, r1, #0
    int16_t tabw, dx;
    
    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
 80030b4:	216d      	movs	r1, #109	; 0x6d

#if MF_USE_TABS
/* Round the X coordinate up to the nearest tab stop. */
static int16_t mf_round_to_tab(const struct mf_font_s *font,
                               int16_t x0, int16_t x)
{
 80030b6:	1c15      	adds	r5, r2, #0
 80030b8:	1c06      	adds	r6, r0, #0
    int16_t tabw, dx;
    
    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
 80030ba:	f7ff ffbd 	bl	8003038 <mf_character_width>
 80030be:	00c0      	lsls	r0, r0, #3
 80030c0:	b284      	uxth	r4, r0
    
    /* Always atleast 1 space */
    x += mf_character_width(font, ' ');
 80030c2:	2120      	movs	r1, #32
 80030c4:	1c30      	adds	r0, r6, #0
 80030c6:	f7ff ffb7 	bl	8003038 <mf_character_width>
    
    /* Round to next tab stop */
    dx = x - x0 + font->baseline_x;
 80030ca:	210c      	movs	r1, #12
 80030cc:	5671      	ldrsb	r1, [r6, r1]
    int16_t tabw, dx;
    
    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
    
    /* Always atleast 1 space */
    x += mf_character_width(font, ' ');
 80030ce:	1940      	adds	r0, r0, r5
 80030d0:	1bc9      	subs	r1, r1, r7
 80030d2:	b280      	uxth	r0, r0
 80030d4:	1905      	adds	r5, r0, r4
    
    /* Round to next tab stop */
    dx = x - x0 + font->baseline_x;
 80030d6:	1840      	adds	r0, r0, r1
    x += tabw - (dx % tabw);
 80030d8:	b200      	sxth	r0, r0
 80030da:	1c21      	adds	r1, r4, #0
 80030dc:	f002 f8ce 	bl	800527c <__aeabi_idivmod>
 80030e0:	1a68      	subs	r0, r5, r1
    
    return x;
 80030e2:	b200      	sxth	r0, r0
}
 80030e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)

080030e8 <render_left>:
static void render_left(const struct mf_font_s *font,
                        int16_t x0, int16_t y0,
                        mf_str text, uint16_t count,
                        mf_character_callback_t callback,
                        void *state)
{
 80030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ea:	464f      	mov	r7, r9
 80030ec:	4646      	mov	r6, r8
    int16_t x;
    mf_char c1 = 0, c2;
    
    x = x0 - font->baseline_x;
 80030ee:	250c      	movs	r5, #12
static void render_left(const struct mf_font_s *font,
                        int16_t x0, int16_t y0,
                        mf_str text, uint16_t count,
                        mf_character_callback_t callback,
                        void *state)
{
 80030f0:	b4c0      	push	{r6, r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	9301      	str	r3, [sp, #4]
    int16_t x;
    mf_char c1 = 0, c2;
    
    x = x0 - font->baseline_x;
 80030f6:	5745      	ldrsb	r5, [r0, r5]
    while (count--)
 80030f8:	ab0a      	add	r3, sp, #40	; 0x28
                        void *state)
{
    int16_t x;
    mf_char c1 = 0, c2;
    
    x = x0 - font->baseline_x;
 80030fa:	1b4d      	subs	r5, r1, r5
static void render_left(const struct mf_font_s *font,
                        int16_t x0, int16_t y0,
                        mf_str text, uint16_t count,
                        mf_character_callback_t callback,
                        void *state)
{
 80030fc:	4681      	mov	r9, r0
 80030fe:	4688      	mov	r8, r1
 8003100:	1c17      	adds	r7, r2, #0
 8003102:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    int16_t x;
    mf_char c1 = 0, c2;
    
    x = x0 - font->baseline_x;
 8003104:	b2ad      	uxth	r5, r5
    while (count--)
 8003106:	881c      	ldrh	r4, [r3, #0]
 8003108:	e007      	b.n	800311a <render_left+0x32>
        }
        
        if (c1 != 0)
            x += mf_compute_kerning(font, c1, c2);

        x += callback(x, y0, c2, state);
 800310a:	b228      	sxth	r0, r5
 800310c:	1c39      	adds	r1, r7, #0
 800310e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003110:	47b0      	blx	r6
 8003112:	1945      	adds	r5, r0, r5
 8003114:	b2ad      	uxth	r5, r5
 8003116:	3c01      	subs	r4, #1
 8003118:	b2a4      	uxth	r4, r4
{
    int16_t x;
    mf_char c1 = 0, c2;
    
    x = x0 - font->baseline_x;
    while (count--)
 800311a:	2c00      	cmp	r4, #0
 800311c:	d00c      	beq.n	8003138 <render_left+0x50>
    {
        c2 = mf_getchar(&text);
 800311e:	a801      	add	r0, sp, #4
 8003120:	f001 ff28 	bl	8004f74 <mf_getchar>
 8003124:	1e02      	subs	r2, r0, #0
        
        if (c2 == '\t')
 8003126:	2a09      	cmp	r2, #9
 8003128:	d1ef      	bne.n	800310a <render_left+0x22>
        {
#if MF_USE_TABS
            x = mf_round_to_tab(font, x0, x);
 800312a:	b22a      	sxth	r2, r5
 800312c:	4648      	mov	r0, r9
 800312e:	4641      	mov	r1, r8
 8003130:	f7ff ffbe 	bl	80030b0 <mf_round_to_tab>
 8003134:	1c05      	adds	r5, r0, #0
            c1 = ' ';
            continue;
 8003136:	e7ee      	b.n	8003116 <render_left+0x2e>
            x += mf_compute_kerning(font, c1, c2);

        x += callback(x, y0, c2, state);
        c1 = c2;
    }
}
 8003138:	b003      	add	sp, #12
 800313a:	bc0c      	pop	{r2, r3}
 800313c:	4690      	mov	r8, r2
 800313e:	4699      	mov	r9, r3
 8003140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)

08003144 <mf_get_string_width>:
}
#endif

int16_t mf_get_string_width(const struct mf_font_s *font, mf_str text,
                            uint16_t count, bool kern)
{
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	1c06      	adds	r6, r0, #0
 800314a:	9101      	str	r1, [sp, #4]
    int16_t result = 0;
    uint16_t c1 = 0, c2;
    
    if (!count)
 800314c:	2a00      	cmp	r2, #0
 800314e:	d100      	bne.n	8003152 <mf_get_string_width+0xe>
        count = 0xFFFF;
 8003150:	4a11      	ldr	r2, [pc, #68]	; (8003198 <mf_get_string_width+0x54>)
 8003152:	1c14      	adds	r4, r2, #0
 8003154:	2500      	movs	r5, #0
 8003156:	e008      	b.n	800316a <mf_get_string_width+0x26>
        }
        
        if (kern && c1 != 0)
            result += mf_compute_kerning(font, c1, c2);

        result += mf_character_width(font, c2);
 8003158:	1c30      	adds	r0, r6, #0
 800315a:	f7ff ff6d 	bl	8003038 <mf_character_width>
 800315e:	3c01      	subs	r4, #1
 8003160:	1945      	adds	r5, r0, r5
 8003162:	b2a4      	uxth	r4, r4
 8003164:	b2ad      	uxth	r5, r5
    uint16_t c1 = 0, c2;
    
    if (!count)
        count = 0xFFFF;
    
    while (count-- && *text)
 8003166:	2c00      	cmp	r4, #0
 8003168:	d013      	beq.n	8003192 <mf_get_string_width+0x4e>
 800316a:	9b01      	ldr	r3, [sp, #4]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00f      	beq.n	8003192 <mf_get_string_width+0x4e>
    {
        c2 = mf_getchar(&text);
 8003172:	a801      	add	r0, sp, #4
 8003174:	f001 fefe 	bl	8004f74 <mf_getchar>
 8003178:	1e01      	subs	r1, r0, #0

        if (c2 == '\t')
 800317a:	2909      	cmp	r1, #9
 800317c:	d1ec      	bne.n	8003158 <mf_get_string_width+0x14>
        {
#if MF_USE_TABS
            result = mf_round_to_tab(font, 0, result);
 800317e:	b22a      	sxth	r2, r5
 8003180:	1c30      	adds	r0, r6, #0
 8003182:	2100      	movs	r1, #0
 8003184:	f7ff ff94 	bl	80030b0 <mf_round_to_tab>
 8003188:	3c01      	subs	r4, #1
 800318a:	b2a4      	uxth	r4, r4
 800318c:	1c05      	adds	r5, r0, #0
    uint16_t c1 = 0, c2;
    
    if (!count)
        count = 0xFFFF;
    
    while (count-- && *text)
 800318e:	2c00      	cmp	r4, #0
 8003190:	d1eb      	bne.n	800316a <mf_get_string_width+0x26>

        result += mf_character_width(font, c2);
        c1 = c2;
    }
    
    return result;
 8003192:	b228      	sxth	r0, r5
}
 8003194:	b002      	add	sp, #8
 8003196:	bd70      	pop	{r4, r5, r6, pc}
 8003198:	0000ffff 	.word	0x0000ffff

0800319c <mf_render_aligned>:
                       int16_t x0, int16_t y0,
                       enum mf_align_t align,
                       mf_str text, uint16_t count,
                       mf_character_callback_t callback,
                       void *state)
{
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319e:	464d      	mov	r5, r9
 80031a0:	465f      	mov	r7, fp
 80031a2:	4656      	mov	r6, sl
 80031a4:	4644      	mov	r4, r8
 80031a6:	b4f0      	push	{r4, r5, r6, r7}
 80031a8:	b08b      	sub	sp, #44	; 0x2c
 80031aa:	4699      	mov	r9, r3
 80031ac:	ab14      	add	r3, sp, #80	; 0x50
 80031ae:	4692      	mov	sl, r2
 80031b0:	cb04      	ldmia	r3!, {r2}
 80031b2:	4680      	mov	r8, r0
 80031b4:	881d      	ldrh	r5, [r3, #0]
 80031b6:	9105      	str	r1, [sp, #20]
 80031b8:	4693      	mov	fp, r2
 80031ba:	9207      	str	r2, [sp, #28]
static uint16_t strip_spaces(mf_str text, uint16_t count, mf_char *last_char)
{
    uint16_t i = 0, result = 0;
    mf_char tmp = 0;
    
    if (!count)
 80031bc:	2d00      	cmp	r5, #0
 80031be:	d100      	bne.n	80031c2 <mf_render_aligned+0x26>
        count = 0xFFFF;
 80031c0:	4d4b      	ldr	r5, [pc, #300]	; (80032f0 <mf_render_aligned+0x154>)
        i++;
        tmp = mf_getchar(&text);
        if (tmp != ' ' && tmp != (mf_char)0xA0 && tmp != '\n' &&
            tmp != '\r' && tmp != '\t')
        {
            result = i;
 80031c2:	2700      	movs	r7, #0
 80031c4:	2400      	movs	r4, #0
    
    while (count-- && *text)
    {
        i++;
        tmp = mf_getchar(&text);
        if (tmp != ' ' && tmp != (mf_char)0xA0 && tmp != '\n' &&
 80031c6:	267f      	movs	r6, #127	; 0x7f
    mf_char tmp = 0;
    
    if (!count)
        count = 0xFFFF;
    
    while (count-- && *text)
 80031c8:	9b07      	ldr	r3, [sp, #28]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d011      	beq.n	80031f4 <mf_render_aligned+0x58>
    {
        i++;
        tmp = mf_getchar(&text);
 80031d0:	a807      	add	r0, sp, #28
 80031d2:	f001 fecf 	bl	8004f74 <mf_getchar>
        if (tmp != ' ' && tmp != (mf_char)0xA0 && tmp != '\n' &&
 80031d6:	1c33      	adds	r3, r6, #0
    if (!count)
        count = 0xFFFF;
    
    while (count-- && *text)
    {
        i++;
 80031d8:	3401      	adds	r4, #1
 80031da:	b2a4      	uxth	r4, r4
        tmp = mf_getchar(&text);
        if (tmp != ' ' && tmp != (mf_char)0xA0 && tmp != '\n' &&
 80031dc:	4003      	ands	r3, r0
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d006      	beq.n	80031f0 <mf_render_aligned+0x54>
 80031e2:	280d      	cmp	r0, #13
 80031e4:	d004      	beq.n	80031f0 <mf_render_aligned+0x54>
            tmp != '\r' && tmp != '\t')
 80031e6:	3809      	subs	r0, #9
 80031e8:	b2c0      	uxtb	r0, r0
 80031ea:	2801      	cmp	r0, #1
 80031ec:	d900      	bls.n	80031f0 <mf_render_aligned+0x54>
        {
            result = i;
 80031ee:	1c27      	adds	r7, r4, #0
    mf_char tmp = 0;
    
    if (!count)
        count = 0xFFFF;
    
    while (count-- && *text)
 80031f0:	42ac      	cmp	r4, r5
 80031f2:	d1e9      	bne.n	80031c8 <mf_render_aligned+0x2c>
                       void *state)
{
    int16_t string_width;
    count = strip_spaces(text, count, 0);
    
    if (align == MF_ALIGN_LEFT)
 80031f4:	464b      	mov	r3, r9
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <mf_render_aligned+0x78>
    {
        render_left(font, x0, y0, text, count, callback, state);
    }
    if (align == MF_ALIGN_CENTER)
 80031fa:	464b      	mov	r3, r9
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d05f      	beq.n	80032c0 <mf_render_aligned+0x124>
    {
        string_width = mf_get_string_width(font, text, count, false);
        x0 -= string_width / 2;
        render_left(font, x0, y0, text, count, callback, state);
    }
    else if (align == MF_ALIGN_RIGHT)
 8003200:	464b      	mov	r3, r9
 8003202:	2b02      	cmp	r3, #2
 8003204:	d012      	beq.n	800322c <mf_render_aligned+0x90>
    {
        render_right(font, x0, y0, text, count, callback, state);
    }
}
 8003206:	b00b      	add	sp, #44	; 0x2c
 8003208:	bc3c      	pop	{r2, r3, r4, r5}
 800320a:	4690      	mov	r8, r2
 800320c:	4699      	mov	r9, r3
 800320e:	46a2      	mov	sl, r4
 8003210:	46ab      	mov	fp, r5
 8003212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int16_t string_width;
    count = strip_spaces(text, count, 0);
    
    if (align == MF_ALIGN_LEFT)
    {
        render_left(font, x0, y0, text, count, callback, state);
 8003214:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003216:	9700      	str	r7, [sp, #0]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800321c:	4640      	mov	r0, r8
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	9905      	ldr	r1, [sp, #20]
 8003222:	4652      	mov	r2, sl
 8003224:	465b      	mov	r3, fp
 8003226:	f7ff ff5f 	bl	80030e8 <render_left>
 800322a:	e7ec      	b.n	8003206 <mf_render_aligned+0x6a>
 800322c:	465b      	mov	r3, fp
    uint16_t i;
    mf_char c1, c2 = 0;
    mf_str tmp;
    
    /* Go to the end of the line. */
    for (i = 0; i < count; i++)
 800322e:	2400      	movs	r4, #0
 8003230:	9308      	str	r3, [sp, #32]
 8003232:	2f00      	cmp	r7, #0
 8003234:	d0e7      	beq.n	8003206 <mf_render_aligned+0x6a>
 8003236:	3401      	adds	r4, #1
        mf_getchar(&text);
 8003238:	a808      	add	r0, sp, #32
    uint16_t i;
    mf_char c1, c2 = 0;
    mf_str tmp;
    
    /* Go to the end of the line. */
    for (i = 0; i < count; i++)
 800323a:	b2a4      	uxth	r4, r4
        mf_getchar(&text);
 800323c:	f001 fe9a 	bl	8004f74 <mf_getchar>
    uint16_t i;
    mf_char c1, c2 = 0;
    mf_str tmp;
    
    /* Go to the end of the line. */
    for (i = 0; i < count; i++)
 8003240:	42bc      	cmp	r4, r7
 8003242:	d1f8      	bne.n	8003236 <mf_render_aligned+0x9a>
        mf_getchar(&text);
    
    x = x0 - font->baseline_x;
 8003244:	466b      	mov	r3, sp
 8003246:	8a9b      	ldrh	r3, [r3, #20]
 8003248:	250c      	movs	r5, #12
 800324a:	4699      	mov	r9, r3
 800324c:	4643      	mov	r3, r8
 800324e:	575d      	ldrsb	r5, [r3, r5]
 8003250:	464b      	mov	r3, r9
 8003252:	1b5d      	subs	r5, r3, r5
 8003254:	b2ad      	uxth	r5, r5
 8003256:	2400      	movs	r4, #0
 8003258:	e00e      	b.n	8003278 <mf_render_aligned+0xdc>
            c1 = ' ';
#endif
        }
        
        /* Apply the nominal character width */
        x -= mf_character_width(font, c1);
 800325a:	1c31      	adds	r1, r6, #0
 800325c:	f7ff feec 	bl	8003038 <mf_character_width>
 8003260:	1a2d      	subs	r5, r5, r0
 8003262:	b2ad      	uxth	r5, r5
        
        /* Apply kerning */
        if (c2 != 0)
            x -= mf_compute_kerning(font, c1, c2);
        
        callback(x, y0, c1, state);
 8003264:	1c32      	adds	r2, r6, #0
 8003266:	b228      	sxth	r0, r5
 8003268:	4651      	mov	r1, sl
 800326a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800326c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800326e:	47b0      	blx	r6
    /* Go to the end of the line. */
    for (i = 0; i < count; i++)
        mf_getchar(&text);
    
    x = x0 - font->baseline_x;
    for (i = 0; i < count; i++)
 8003270:	3401      	adds	r4, #1
 8003272:	b2a4      	uxth	r4, r4
 8003274:	42bc      	cmp	r4, r7
 8003276:	d0c6      	beq.n	8003206 <mf_render_aligned+0x6a>
    {
        mf_rewind(&text);
 8003278:	a808      	add	r0, sp, #32
 800327a:	f001 fe85 	bl	8004f88 <mf_rewind>
        tmp = text;
 800327e:	9b08      	ldr	r3, [sp, #32]
        c1 = mf_getchar(&tmp);
 8003280:	a809      	add	r0, sp, #36	; 0x24
    
    x = x0 - font->baseline_x;
    for (i = 0; i < count; i++)
    {
        mf_rewind(&text);
        tmp = text;
 8003282:	9309      	str	r3, [sp, #36]	; 0x24
        c1 = mf_getchar(&tmp);
 8003284:	f001 fe76 	bl	8004f74 <mf_getchar>
 8003288:	1e06      	subs	r6, r0, #0
static int16_t mf_round_to_prev_tab(const struct mf_font_s *font,
                                    int16_t x0, int16_t x)
{
    int16_t tabw, dx;
    
    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
 800328a:	4640      	mov	r0, r8
        mf_rewind(&text);
        tmp = text;
        c1 = mf_getchar(&tmp);
        
        /* Perform tab alignment */
        if (c1 == '\t')
 800328c:	2e09      	cmp	r6, #9
 800328e:	d1e4      	bne.n	800325a <mf_render_aligned+0xbe>
static int16_t mf_round_to_prev_tab(const struct mf_font_s *font,
                                    int16_t x0, int16_t x)
{
    int16_t tabw, dx;
    
    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
 8003290:	216d      	movs	r1, #109	; 0x6d
 8003292:	f7ff fed1 	bl	8003038 <mf_character_width>
 8003296:	00c0      	lsls	r0, r0, #3
 8003298:	b286      	uxth	r6, r0
    
    /* Always atleast 1 space */
    x -= mf_character_width(font, ' ');
 800329a:	2120      	movs	r1, #32
 800329c:	4640      	mov	r0, r8
 800329e:	f7ff fecb 	bl	8003038 <mf_character_width>
    
    /* Round to previous tab stop */
    dx = x0 - x + font->baseline_x;
 80032a2:	4643      	mov	r3, r8
 80032a4:	7b1b      	ldrb	r3, [r3, #12]
    int16_t tabw, dx;
    
    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
    
    /* Always atleast 1 space */
    x -= mf_character_width(font, ' ');
 80032a6:	1a28      	subs	r0, r5, r0
    
    /* Round to previous tab stop */
    dx = x0 - x + font->baseline_x;
 80032a8:	b25b      	sxtb	r3, r3
    int16_t tabw, dx;
    
    tabw = mf_character_width(font, 'm') * MF_TABSIZE;
    
    /* Always atleast 1 space */
    x -= mf_character_width(font, ' ');
 80032aa:	b280      	uxth	r0, r0
 80032ac:	444b      	add	r3, r9
 80032ae:	1b85      	subs	r5, r0, r6
    
    /* Round to previous tab stop */
    dx = x0 - x + font->baseline_x;
 80032b0:	1a18      	subs	r0, r3, r0
    x -= tabw - (dx % tabw);
 80032b2:	b200      	sxth	r0, r0
 80032b4:	1c31      	adds	r1, r6, #0
 80032b6:	f001 ffe1 	bl	800527c <__aeabi_idivmod>
 80032ba:	186d      	adds	r5, r5, r1
 80032bc:	b2ad      	uxth	r5, r5
 80032be:	e7d7      	b.n	8003270 <mf_render_aligned+0xd4>
    {
        render_left(font, x0, y0, text, count, callback, state);
    }
    if (align == MF_ALIGN_CENTER)
    {
        string_width = mf_get_string_width(font, text, count, false);
 80032c0:	4659      	mov	r1, fp
 80032c2:	1c3a      	adds	r2, r7, #0
 80032c4:	4640      	mov	r0, r8
 80032c6:	2300      	movs	r3, #0
 80032c8:	f7ff ff3c 	bl	8003144 <mf_get_string_width>
        x0 -= string_width / 2;
 80032cc:	0fc1      	lsrs	r1, r0, #31
 80032ce:	9b05      	ldr	r3, [sp, #20]
 80032d0:	1809      	adds	r1, r1, r0
 80032d2:	1049      	asrs	r1, r1, #1
 80032d4:	1a59      	subs	r1, r3, r1
        render_left(font, x0, y0, text, count, callback, state);
 80032d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80032d8:	b209      	sxth	r1, r1
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80032de:	9700      	str	r7, [sp, #0]
 80032e0:	9302      	str	r3, [sp, #8]
 80032e2:	4640      	mov	r0, r8
 80032e4:	4652      	mov	r2, sl
 80032e6:	465b      	mov	r3, fp
 80032e8:	f7ff fefe 	bl	80030e8 <render_left>
 80032ec:	e78b      	b.n	8003206 <mf_render_aligned+0x6a>
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	0000ffff 	.word	0x0000ffff

080032f4 <mf_render_justified>:
void mf_render_justified(const struct mf_font_s *font,
                         int16_t x0, int16_t y0, int16_t width,
                         mf_str text, uint16_t count,
                         mf_character_callback_t callback,
                         void *state)
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	ab06      	add	r3, sp, #24
 80032fa:	cb10      	ldmia	r3!, {r4}
 80032fc:	881b      	ldrh	r3, [r3, #0]
	(void) width;
    mf_render_aligned(font, x0, y0, MF_ALIGN_LEFT, text, count, callback, state);
 80032fe:	9400      	str	r4, [sp, #0]
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9b08      	ldr	r3, [sp, #32]
 8003304:	9302      	str	r3, [sp, #8]
 8003306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	2300      	movs	r3, #0
 800330c:	f7ff ff46 	bl	800319c <mf_render_aligned>
}
 8003310:	b004      	add	sp, #16
 8003312:	bd10      	pop	{r4, pc}

08003314 <mf_bwfont_render_character>:
uint8_t mf_bwfont_render_character(const struct mf_font_s *font,
                                   int16_t x0, int16_t y0,
                                   uint16_t character,
                                   mf_pixel_callback_t callback,
                                   void *state)
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	464d      	mov	r5, r9
 8003318:	465f      	mov	r7, fp
 800331a:	4656      	mov	r6, sl
 800331c:	4644      	mov	r4, r8
 800331e:	b4f0      	push	{r4, r5, r6, r7}
static const struct mf_bwfont_char_range_s *find_char_range(
    const struct mf_bwfont_s *font, uint16_t character, uint16_t *index_ret)
{
    unsigned i, index;
    const struct mf_bwfont_char_range_s *range;
    for (i = 0; i < font->char_range_count; i++)
 8003320:	8bc5      	ldrh	r5, [r0, #30]
uint8_t mf_bwfont_render_character(const struct mf_font_s *font,
                                   int16_t x0, int16_t y0,
                                   uint16_t character,
                                   mf_pixel_callback_t callback,
                                   void *state)
{
 8003322:	b08d      	sub	sp, #52	; 0x34
static const struct mf_bwfont_char_range_s *find_char_range(
    const struct mf_bwfont_s *font, uint16_t character, uint16_t *index_ret)
{
    unsigned i, index;
    const struct mf_bwfont_char_range_s *range;
    for (i = 0; i < font->char_range_count; i++)
 8003324:	2d00      	cmp	r5, #0
 8003326:	d00d      	beq.n	8003344 <mf_bwfont_render_character+0x30>
 8003328:	6a00      	ldr	r0, [r0, #32]
 800332a:	2400      	movs	r4, #0
 800332c:	1c06      	adds	r6, r0, #0
    {
        range = &font->char_ranges[i];
        index = character - range->first_char;
 800332e:	8830      	ldrh	r0, [r6, #0]
        if (character >= range->first_char && index < range->char_count)
 8003330:	4283      	cmp	r3, r0
 8003332:	d303      	bcc.n	800333c <mf_bwfont_render_character+0x28>
 8003334:	8877      	ldrh	r7, [r6, #2]
    unsigned i, index;
    const struct mf_bwfont_char_range_s *range;
    for (i = 0; i < font->char_range_count; i++)
    {
        range = &font->char_ranges[i];
        index = character - range->first_char;
 8003336:	1a18      	subs	r0, r3, r0
        if (character >= range->first_char && index < range->char_count)
 8003338:	42b8      	cmp	r0, r7
 800333a:	d30b      	bcc.n	8003354 <mf_bwfont_render_character+0x40>
static const struct mf_bwfont_char_range_s *find_char_range(
    const struct mf_bwfont_s *font, uint16_t character, uint16_t *index_ret)
{
    unsigned i, index;
    const struct mf_bwfont_char_range_s *range;
    for (i = 0; i < font->char_range_count; i++)
 800333c:	3401      	adds	r4, #1
 800333e:	3618      	adds	r6, #24
 8003340:	42ac      	cmp	r4, r5
 8003342:	d3f4      	bcc.n	800332e <mf_bwfont_render_character+0x1a>
    const struct mf_bwfont_char_range_s *range;
    uint16_t index;
    
    range = find_char_range(bwfont, character, &index);
    if (!range)
        return 0;
 8003344:	2000      	movs	r0, #0
    
    return render_char(range, x0, y0, index, callback, state);
}
 8003346:	b00d      	add	sp, #52	; 0x34
 8003348:	bc3c      	pop	{r2, r3, r4, r5}
 800334a:	4690      	mov	r8, r2
 800334c:	4699      	mov	r9, r3
 800334e:	46a2      	mov	sl, r4
 8003350:	46ab      	mov	fp, r5
 8003352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t stride, runlen;
    uint8_t x, y, height, num_cols;
    uint8_t bit, byte, mask;
    bool oldstate, newstate;
    
    if (r->width)
 8003354:	7a34      	ldrb	r4, [r6, #8]
 8003356:	46b2      	mov	sl, r6
 8003358:	2c00      	cmp	r4, #0
 800335a:	d000      	beq.n	800335e <mf_bwfont_render_character+0x4a>
 800335c:	e091      	b.n	8003482 <mf_bwfont_render_character+0x16e>
        data = r->glyph_data + r->width * index * r->height_bytes;
        num_cols = r->width;
    }
    else
    {
        data = r->glyph_data + r->glyph_offsets[index] * r->height_bytes;
 800335e:	4655      	mov	r5, sl
 8003360:	6933      	ldr	r3, [r6, #16]
 8003362:	0400      	lsls	r0, r0, #16
 8003364:	900b      	str	r0, [sp, #44]	; 0x2c
 8003366:	0bc0      	lsrs	r0, r0, #15
 8003368:	9303      	str	r3, [sp, #12]
 800336a:	5a1e      	ldrh	r6, [r3, r0]
 800336c:	4653      	mov	r3, sl
 800336e:	79ad      	ldrb	r5, [r5, #6]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	1c2f      	adds	r7, r5, #0
 8003374:	469c      	mov	ip, r3
        num_cols = r->glyph_offsets[index + 1] - r->glyph_offsets[index];
 8003376:	46a9      	mov	r9, r5
 8003378:	9b03      	ldr	r3, [sp, #12]
        data = r->glyph_data + r->width * index * r->height_bytes;
        num_cols = r->width;
    }
    else
    {
        data = r->glyph_data + r->glyph_offsets[index] * r->height_bytes;
 800337a:	4377      	muls	r7, r6
        num_cols = r->glyph_offsets[index + 1] - r->glyph_offsets[index];
 800337c:	181b      	adds	r3, r3, r0
 800337e:	885b      	ldrh	r3, [r3, #2]
        data = r->glyph_data + r->width * index * r->height_bytes;
        num_cols = r->width;
    }
    else
    {
        data = r->glyph_data + r->glyph_offsets[index] * r->height_bytes;
 8003380:	4467      	add	r7, ip
        num_cols = r->glyph_offsets[index + 1] - r->glyph_offsets[index];
 8003382:	1b9b      	subs	r3, r3, r6
 8003384:	b2db      	uxtb	r3, r3
        data = r->glyph_data + r->width * index * r->height_bytes;
        num_cols = r->width;
    }
    else
    {
        data = r->glyph_data + r->glyph_offsets[index] * r->height_bytes;
 8003386:	9708      	str	r7, [sp, #32]
        num_cols = r->glyph_offsets[index + 1] - r->glyph_offsets[index];
 8003388:	9306      	str	r3, [sp, #24]
    }
    
    stride = r->height_bytes;
    height = r->height_pixels;
    y0 += r->offset_y;
 800338a:	4650      	mov	r0, sl
 800338c:	7940      	ldrb	r0, [r0, #5]
        data = r->glyph_data + r->glyph_offsets[index] * r->height_bytes;
        num_cols = r->glyph_offsets[index + 1] - r->glyph_offsets[index];
    }
    
    stride = r->height_bytes;
    height = r->height_pixels;
 800338e:	4653      	mov	r3, sl
    y0 += r->offset_y;
 8003390:	1882      	adds	r2, r0, r2
 8003392:	b292      	uxth	r2, r2
 8003394:	1c10      	adds	r0, r2, #0
    x0 += r->offset_x;
 8003396:	4652      	mov	r2, sl
 8003398:	7912      	ldrb	r2, [r2, #4]
        data = r->glyph_data + r->glyph_offsets[index] * r->height_bytes;
        num_cols = r->glyph_offsets[index + 1] - r->glyph_offsets[index];
    }
    
    stride = r->height_bytes;
    height = r->height_pixels;
 800339a:	79db      	ldrb	r3, [r3, #7]
    y0 += r->offset_y;
    x0 += r->offset_x;
 800339c:	1889      	adds	r1, r1, r2
 800339e:	b289      	uxth	r1, r1
 80033a0:	1c0d      	adds	r5, r1, #0
 80033a2:	9107      	str	r1, [sp, #28]
    bit = 0;
    byte = 0;
    
    for (y = 0; y < height; y++)
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d100      	bne.n	80033aa <mf_bwfont_render_character+0x96>
 80033a8:	e08c      	b.n	80034c4 <mf_bwfont_render_character+0x1b0>
 80033aa:	4684      	mov	ip, r0
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	4463      	add	r3, ip
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	9309      	str	r3, [sp, #36]	; 0x24
 80033b8:	2300      	movs	r3, #0
 80033ba:	9a06      	ldr	r2, [sp, #24]
 80033bc:	9304      	str	r3, [sp, #16]
 80033be:	3a01      	subs	r2, #1
 80033c0:	469b      	mov	fp, r3
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	1c6b      	adds	r3, r5, #1
 80033c6:	18d3      	adds	r3, r2, r3
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	4698      	mov	r8, r3
 80033cc:	4653      	mov	r3, sl
 80033ce:	4682      	mov	sl, r0
 80033d0:	930a      	str	r3, [sp, #40]	; 0x28
    {
        mask = (1 << bit);
 80033d2:	465b      	mov	r3, fp
 80033d4:	2701      	movs	r7, #1
        
        oldstate = false;
        runlen = 0;
        p = data + byte;
 80033d6:	9a04      	ldr	r2, [sp, #16]
    bit = 0;
    byte = 0;
    
    for (y = 0; y < height; y++)
    {
        mask = (1 << bit);
 80033d8:	409f      	lsls	r7, r3
        
        oldstate = false;
        runlen = 0;
        p = data + byte;
 80033da:	4694      	mov	ip, r2
 80033dc:	9b08      	ldr	r3, [sp, #32]
    bit = 0;
    byte = 0;
    
    for (y = 0; y < height; y++)
    {
        mask = (1 << bit);
 80033de:	b2ff      	uxtb	r7, r7
        
        oldstate = false;
        runlen = 0;
        p = data + byte;
 80033e0:	4463      	add	r3, ip
 80033e2:	1c1e      	adds	r6, r3, #0
        for (x = 0; x < num_cols; x++, p += stride)
 80033e4:	9b06      	ldr	r3, [sp, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d022      	beq.n	8003430 <mf_bwfont_render_character+0x11c>
            newstate = *p & mask;
            if (newstate != oldstate)
            {
                if (oldstate && runlen)
                {
                    callback(x0 + x - runlen, y0 + y, runlen, 255, state);
 80033ea:	4651      	mov	r1, sl
 80033ec:	4648      	mov	r0, r9
        mask = (1 << bit);
        
        oldstate = false;
        runlen = 0;
        p = data + byte;
        for (x = 0; x < num_cols; x++, p += stride)
 80033ee:	2200      	movs	r2, #0
 80033f0:	2300      	movs	r3, #0
            newstate = *p & mask;
            if (newstate != oldstate)
            {
                if (oldstate && runlen)
                {
                    callback(x0 + x - runlen, y0 + y, runlen, 255, state);
 80033f2:	46b9      	mov	r9, r7
 80033f4:	b209      	sxth	r1, r1
        mask = (1 << bit);
        
        oldstate = false;
        runlen = 0;
        p = data + byte;
        for (x = 0; x < num_cols; x++, p += stride)
 80033f6:	9d07      	ldr	r5, [sp, #28]
            newstate = *p & mask;
            if (newstate != oldstate)
            {
                if (oldstate && runlen)
                {
                    callback(x0 + x - runlen, y0 + y, runlen, 255, state);
 80033f8:	9105      	str	r1, [sp, #20]
 80033fa:	9003      	str	r0, [sp, #12]
        oldstate = false;
        runlen = 0;
        p = data + byte;
        for (x = 0; x < num_cols; x++, p += stride)
        {
            newstate = *p & mask;
 80033fc:	4649      	mov	r1, r9
 80033fe:	7834      	ldrb	r4, [r6, #0]
 8003400:	400c      	ands	r4, r1
 8003402:	1e61      	subs	r1, r4, #1
 8003404:	418c      	sbcs	r4, r1
 8003406:	b2e4      	uxtb	r4, r4
            if (newstate != oldstate)
 8003408:	429c      	cmp	r4, r3
 800340a:	d047      	beq.n	800349c <mf_bwfont_render_character+0x188>
            {
                if (oldstate && runlen)
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <mf_bwfont_render_character+0x100>
 8003410:	2a00      	cmp	r2, #0
 8003412:	d12c      	bne.n	800346e <mf_bwfont_render_character+0x15a>
 8003414:	2201      	movs	r2, #1
        mask = (1 << bit);
        
        oldstate = false;
        runlen = 0;
        p = data + byte;
        for (x = 0; x < num_cols; x++, p += stride)
 8003416:	9b03      	ldr	r3, [sp, #12]
 8003418:	3501      	adds	r5, #1
 800341a:	469c      	mov	ip, r3
 800341c:	b2ad      	uxth	r5, r5
 800341e:	4466      	add	r6, ip
        {
            newstate = *p & mask;
 8003420:	1c23      	adds	r3, r4, #0
        mask = (1 << bit);
        
        oldstate = false;
        runlen = 0;
        p = data + byte;
        for (x = 0; x < num_cols; x++, p += stride)
 8003422:	4545      	cmp	r5, r8
 8003424:	d1ea      	bne.n	80033fc <mf_bwfont_render_character+0xe8>
 8003426:	46e1      	mov	r9, ip
            }
            
            runlen++;
        }
        
        if (oldstate && runlen)
 8003428:	2c00      	cmp	r4, #0
 800342a:	d001      	beq.n	8003430 <mf_bwfont_render_character+0x11c>
 800342c:	2a00      	cmp	r2, #0
 800342e:	d138      	bne.n	80034a2 <mf_bwfont_render_character+0x18e>
        {
            callback(x0 + x - runlen, y0 + y, runlen, 255, state);
        }
        
        bit++;
 8003430:	465b      	mov	r3, fp
 8003432:	3301      	adds	r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	469b      	mov	fp, r3
        if (bit > 7)
 8003438:	2b07      	cmp	r3, #7
 800343a:	d905      	bls.n	8003448 <mf_bwfont_render_character+0x134>
        {
            bit = 0;
            byte++;
 800343c:	9b04      	ldr	r3, [sp, #16]
 800343e:	3301      	adds	r3, #1
 8003440:	b2db      	uxtb	r3, r3
 8003442:	9304      	str	r3, [sp, #16]
        }
        
        bit++;
        if (bit > 7)
        {
            bit = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	469b      	mov	fp, r3
 8003448:	4653      	mov	r3, sl
 800344a:	3301      	adds	r3, #1
 800344c:	b29b      	uxth	r3, r3
 800344e:	469a      	mov	sl, r3
    y0 += r->offset_y;
    x0 += r->offset_x;
    bit = 0;
    byte = 0;
    
    for (y = 0; y < height; y++)
 8003450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003452:	459a      	cmp	sl, r3
 8003454:	d1bd      	bne.n	80033d2 <mf_bwfont_render_character+0xbe>
 8003456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003458:	469a      	mov	sl, r3
 800345a:	7918      	ldrb	r0, [r3, #4]
 800345c:	7a1c      	ldrb	r4, [r3, #8]
    return 0;
}

static uint8_t get_width(const struct mf_bwfont_char_range_s *r, uint16_t index)
{
    if (r->width)
 800345e:	2c00      	cmp	r4, #0
 8003460:	d12d      	bne.n	80034be <mf_bwfont_render_character+0x1aa>
    {
        return r->width + r->offset_x;
    }
    else
    {
        return r->glyph_widths[index];
 8003462:	4652      	mov	r2, sl
 8003464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003466:	68d2      	ldr	r2, [r2, #12]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	5cd0      	ldrb	r0, [r2, r3]
 800346c:	e76b      	b.n	8003346 <mf_bwfont_render_character+0x32>
            newstate = *p & mask;
            if (newstate != oldstate)
            {
                if (oldstate && runlen)
                {
                    callback(x0 + x - runlen, y0 + y, runlen, 255, state);
 800346e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003470:	1aa8      	subs	r0, r5, r2
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	b200      	sxth	r0, r0
 8003476:	9905      	ldr	r1, [sp, #20]
 8003478:	23ff      	movs	r3, #255	; 0xff
 800347a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800347c:	47b8      	blx	r7
 800347e:	2201      	movs	r2, #1
 8003480:	e7c9      	b.n	8003416 <mf_bwfont_render_character+0x102>
    uint8_t bit, byte, mask;
    bool oldstate, newstate;
    
    if (r->width)
    {
        data = r->glyph_data + r->width * index * r->height_bytes;
 8003482:	0403      	lsls	r3, r0, #16
 8003484:	6970      	ldr	r0, [r6, #20]
 8003486:	79b5      	ldrb	r5, [r6, #6]
 8003488:	4684      	mov	ip, r0
 800348a:	930b      	str	r3, [sp, #44]	; 0x2c
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	4363      	muls	r3, r4
 8003490:	436b      	muls	r3, r5
 8003492:	4463      	add	r3, ip
 8003494:	9308      	str	r3, [sp, #32]
 8003496:	46a9      	mov	r9, r5
 8003498:	9406      	str	r4, [sp, #24]
 800349a:	e776      	b.n	800338a <mf_bwfont_render_character+0x76>
 800349c:	3201      	adds	r2, #1
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	e7b9      	b.n	8003416 <mf_bwfont_render_character+0x102>
            runlen++;
        }
        
        if (oldstate && runlen)
        {
            callback(x0 + x - runlen, y0 + y, runlen, 255, state);
 80034a2:	9906      	ldr	r1, [sp, #24]
 80034a4:	9b07      	ldr	r3, [sp, #28]
 80034a6:	468c      	mov	ip, r1
 80034a8:	4463      	add	r3, ip
 80034aa:	1a98      	subs	r0, r3, r2
 80034ac:	4653      	mov	r3, sl
 80034ae:	b219      	sxth	r1, r3
 80034b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80034b2:	b200      	sxth	r0, r0
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80034b8:	23ff      	movs	r3, #255	; 0xff
 80034ba:	47a0      	blx	r4
 80034bc:	e7b8      	b.n	8003430 <mf_bwfont_render_character+0x11c>

static uint8_t get_width(const struct mf_bwfont_char_range_s *r, uint16_t index)
{
    if (r->width)
    {
        return r->width + r->offset_x;
 80034be:	1904      	adds	r4, r0, r4
 80034c0:	b2e0      	uxtb	r0, r4
 80034c2:	e740      	b.n	8003346 <mf_bwfont_render_character+0x32>
    y0 += r->offset_y;
    x0 += r->offset_x;
    bit = 0;
    byte = 0;
    
    for (y = 0; y < height; y++)
 80034c4:	1c10      	adds	r0, r2, #0
 80034c6:	e7ca      	b.n	800345e <mf_bwfont_render_character+0x14a>

080034c8 <mf_bwfont_character_width>:
    return render_char(range, x0, y0, index, callback, state);
}

uint8_t mf_bwfont_character_width(const struct mf_font_s *font,
                                  uint16_t character)
{
 80034c8:	b530      	push	{r4, r5, lr}
static const struct mf_bwfont_char_range_s *find_char_range(
    const struct mf_bwfont_s *font, uint16_t character, uint16_t *index_ret)
{
    unsigned i, index;
    const struct mf_bwfont_char_range_s *range;
    for (i = 0; i < font->char_range_count; i++)
 80034ca:	8bc4      	ldrh	r4, [r0, #30]
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	d00c      	beq.n	80034ea <mf_bwfont_character_width+0x22>
 80034d0:	6a02      	ldr	r2, [r0, #32]
 80034d2:	2000      	movs	r0, #0
    {
        range = &font->char_ranges[i];
        index = character - range->first_char;
 80034d4:	8813      	ldrh	r3, [r2, #0]
        if (character >= range->first_char && index < range->char_count)
 80034d6:	4299      	cmp	r1, r3
 80034d8:	d303      	bcc.n	80034e2 <mf_bwfont_character_width+0x1a>
 80034da:	8855      	ldrh	r5, [r2, #2]
    unsigned i, index;
    const struct mf_bwfont_char_range_s *range;
    for (i = 0; i < font->char_range_count; i++)
    {
        range = &font->char_ranges[i];
        index = character - range->first_char;
 80034dc:	1acb      	subs	r3, r1, r3
        if (character >= range->first_char && index < range->char_count)
 80034de:	42ab      	cmp	r3, r5
 80034e0:	d305      	bcc.n	80034ee <mf_bwfont_character_width+0x26>
static const struct mf_bwfont_char_range_s *find_char_range(
    const struct mf_bwfont_s *font, uint16_t character, uint16_t *index_ret)
{
    unsigned i, index;
    const struct mf_bwfont_char_range_s *range;
    for (i = 0; i < font->char_range_count; i++)
 80034e2:	3001      	adds	r0, #1
 80034e4:	3218      	adds	r2, #24
 80034e6:	42a0      	cmp	r0, r4
 80034e8:	d3f4      	bcc.n	80034d4 <mf_bwfont_character_width+0xc>
    const struct mf_bwfont_char_range_s *range;
    uint16_t index;
    
    range = find_char_range(bwfont, character, &index);
    if (!range)
        return 0;
 80034ea:	2000      	movs	r0, #0
    
    return get_width(range, index);
}
 80034ec:	bd30      	pop	{r4, r5, pc}
 80034ee:	7a10      	ldrb	r0, [r2, #8]
 80034f0:	7911      	ldrb	r1, [r2, #4]
    return 0;
}

static uint8_t get_width(const struct mf_bwfont_char_range_s *r, uint16_t index)
{
    if (r->width)
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d002      	beq.n	80034fc <mf_bwfont_character_width+0x34>
    {
        return r->width + r->offset_x;
 80034f6:	1840      	adds	r0, r0, r1
 80034f8:	b2c0      	uxtb	r0, r0
 80034fa:	e7f7      	b.n	80034ec <mf_bwfont_character_width+0x24>
 80034fc:	041b      	lsls	r3, r3, #16
    }
    else
    {
        return r->glyph_widths[index];
 80034fe:	68d2      	ldr	r2, [r2, #12]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	5cd0      	ldrb	r0, [r2, r3]
 8003504:	e7f2      	b.n	80034ec <mf_bwfont_character_width+0x24>
 8003506:	46c0      	nop			; (mov r8, r8)

08003508 <scaled_pixel_callback>:
    int16_t y0;
};

static void scaled_pixel_callback(int16_t x, int16_t y, uint8_t count,
                                  uint8_t alpha, void *state)
{
 8003508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350a:	4657      	mov	r7, sl
 800350c:	464e      	mov	r6, r9
 800350e:	4645      	mov	r5, r8
 8003510:	b4e0      	push	{r5, r6, r7}
 8003512:	b082      	sub	sp, #8
 8003514:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003516:	4699      	mov	r9, r3
    struct scaled_renderstate *rstate = state;
    uint8_t dy;
    
    count *= rstate->x_scale;
 8003518:	7a2f      	ldrb	r7, [r5, #8]
    x = rstate->x0 + x * rstate->x_scale;
    y = rstate->y0 + y * rstate->y_scale;
    
    for (dy = 0; dy < rstate->y_scale; dy++)
 800351a:	2400      	movs	r4, #0
                                  uint8_t alpha, void *state)
{
    struct scaled_renderstate *rstate = state;
    uint8_t dy;
    
    count *= rstate->x_scale;
 800351c:	437a      	muls	r2, r7
    x = rstate->x0 + x * rstate->x_scale;
 800351e:	4378      	muls	r0, r7
                                  uint8_t alpha, void *state)
{
    struct scaled_renderstate *rstate = state;
    uint8_t dy;
    
    count *= rstate->x_scale;
 8003520:	b2d3      	uxtb	r3, r2
    x = rstate->x0 + x * rstate->x_scale;
    y = rstate->y0 + y * rstate->y_scale;
 8003522:	7a6a      	ldrb	r2, [r5, #9]
                                  uint8_t alpha, void *state)
{
    struct scaled_renderstate *rstate = state;
    uint8_t dy;
    
    count *= rstate->x_scale;
 8003524:	4698      	mov	r8, r3
    x = rstate->x0 + x * rstate->x_scale;
    y = rstate->y0 + y * rstate->y_scale;
 8003526:	4351      	muls	r1, r2
{
    struct scaled_renderstate *rstate = state;
    uint8_t dy;
    
    count *= rstate->x_scale;
    x = rstate->x0 + x * rstate->x_scale;
 8003528:	896b      	ldrh	r3, [r5, #10]
 800352a:	18c7      	adds	r7, r0, r3
    y = rstate->y0 + y * rstate->y_scale;
 800352c:	89ab      	ldrh	r3, [r5, #12]
{
    struct scaled_renderstate *rstate = state;
    uint8_t dy;
    
    count *= rstate->x_scale;
    x = rstate->x0 + x * rstate->x_scale;
 800352e:	b23f      	sxth	r7, r7
    y = rstate->y0 + y * rstate->y_scale;
 8003530:	18ce      	adds	r6, r1, r3
 8003532:	b2b3      	uxth	r3, r6
 8003534:	469a      	mov	sl, r3
    
    for (dy = 0; dy < rstate->y_scale; dy++)
 8003536:	2a00      	cmp	r2, #0
 8003538:	d00e      	beq.n	8003558 <scaled_pixel_callback+0x50>
    {
        rstate->orig_callback(x, y + dy, count, alpha, rstate->orig_state);
 800353a:	4653      	mov	r3, sl
 800353c:	1919      	adds	r1, r3, r4
 800353e:	686b      	ldr	r3, [r5, #4]
 8003540:	b209      	sxth	r1, r1
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	1c38      	adds	r0, r7, #0
 8003546:	464b      	mov	r3, r9
 8003548:	4642      	mov	r2, r8
 800354a:	682e      	ldr	r6, [r5, #0]
 800354c:	47b0      	blx	r6
    
    count *= rstate->x_scale;
    x = rstate->x0 + x * rstate->x_scale;
    y = rstate->y0 + y * rstate->y_scale;
    
    for (dy = 0; dy < rstate->y_scale; dy++)
 800354e:	3401      	adds	r4, #1
 8003550:	7a6b      	ldrb	r3, [r5, #9]
 8003552:	b2e4      	uxtb	r4, r4
 8003554:	42a3      	cmp	r3, r4
 8003556:	d8f0      	bhi.n	800353a <scaled_pixel_callback+0x32>
    {
        rstate->orig_callback(x, y + dy, count, alpha, rstate->orig_state);
    }
}
 8003558:	b002      	add	sp, #8
 800355a:	bc1c      	pop	{r2, r3, r4}
 800355c:	4690      	mov	r8, r2
 800355e:	4699      	mov	r9, r3
 8003560:	46a2      	mov	sl, r4
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003564 <mf_scaled_character_width>:
    
uint8_t mf_scaled_character_width(const struct mf_font_s *font,
                                      uint16_t character)
{
 8003564:	b510      	push	{r4, lr}
 8003566:	1c04      	adds	r4, r0, #0
    struct mf_scaledfont_s *sfont = (struct mf_scaledfont_s*)font;
    uint8_t basewidth;
    
    basewidth = sfont->basefont->character_width(sfont->basefont, character);
 8003568:	69c0      	ldr	r0, [r0, #28]
 800356a:	6943      	ldr	r3, [r0, #20]
 800356c:	4798      	blx	r3
    
    return sfont->x_scale * basewidth;
 800356e:	2320      	movs	r3, #32
 8003570:	5ce3      	ldrb	r3, [r4, r3]
 8003572:	4358      	muls	r0, r3
 8003574:	b2c0      	uxtb	r0, r0
}
 8003576:	bd10      	pop	{r4, pc}

08003578 <mf_scaled_render_character>:
uint8_t mf_scaled_render_character(const struct mf_font_s *font,
                                       int16_t x0, int16_t y0,
                                       uint16_t character,
                                       mf_pixel_callback_t callback,
                                       void *state)
{
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	1c05      	adds	r5, r0, #0
    struct scaled_renderstate rstate;
    uint8_t basewidth;
    
    rstate.orig_callback = callback;
    rstate.orig_state = state;
    rstate.x_scale = sfont->x_scale;
 800357c:	2620      	movs	r6, #32
uint8_t mf_scaled_render_character(const struct mf_font_s *font,
                                       int16_t x0, int16_t y0,
                                       uint16_t character,
                                       mf_pixel_callback_t callback,
                                       void *state)
{
 800357e:	b086      	sub	sp, #24
    struct mf_scaledfont_s *sfont = (struct mf_scaledfont_s*)font;
    struct scaled_renderstate rstate;
    uint8_t basewidth;
    
    rstate.orig_callback = callback;
 8003580:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003582:	ac02      	add	r4, sp, #8
 8003584:	9002      	str	r0, [sp, #8]
    rstate.orig_state = state;
 8003586:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003588:	9003      	str	r0, [sp, #12]
    rstate.x_scale = sfont->x_scale;
 800358a:	5da8      	ldrb	r0, [r5, r6]
 800358c:	7220      	strb	r0, [r4, #8]
    rstate.y_scale = sfont->y_scale;
 800358e:	2021      	movs	r0, #33	; 0x21
 8003590:	5c28      	ldrb	r0, [r5, r0]
    rstate.x0 = x0;
    rstate.y0 = y0;
 8003592:	81a2      	strh	r2, [r4, #12]
    
    basewidth = sfont->basefont->render_character(sfont->basefont, 0, 0,
 8003594:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <mf_scaled_render_character+0x3c>)
    uint8_t basewidth;
    
    rstate.orig_callback = callback;
    rstate.orig_state = state;
    rstate.x_scale = sfont->x_scale;
    rstate.y_scale = sfont->y_scale;
 8003596:	7260      	strb	r0, [r4, #9]
    rstate.x0 = x0;
    rstate.y0 = y0;
    
    basewidth = sfont->basefont->render_character(sfont->basefont, 0, 0,
 8003598:	69e8      	ldr	r0, [r5, #28]
    
    rstate.orig_callback = callback;
    rstate.orig_state = state;
    rstate.x_scale = sfont->x_scale;
    rstate.y_scale = sfont->y_scale;
    rstate.x0 = x0;
 800359a:	8161      	strh	r1, [r4, #10]
    rstate.y0 = y0;
    
    basewidth = sfont->basefont->render_character(sfont->basefont, 0, 0,
 800359c:	9200      	str	r2, [sp, #0]
 800359e:	9401      	str	r4, [sp, #4]
 80035a0:	6984      	ldr	r4, [r0, #24]
 80035a2:	2100      	movs	r1, #0
 80035a4:	2200      	movs	r2, #0
 80035a6:	47a0      	blx	r4
                            character, scaled_pixel_callback, &rstate);
    
    return sfont->x_scale * basewidth;
 80035a8:	5dab      	ldrb	r3, [r5, r6]
 80035aa:	4358      	muls	r0, r3
 80035ac:	b2c0      	uxtb	r0, r0
}
 80035ae:	b006      	add	sp, #24
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	08003509 	.word	0x08003509

080035b8 <mf_scale_font>:

void mf_scale_font(struct mf_scaledfont_s *newfont,
                   const struct mf_font_s *basefont,
                   uint8_t x_scale, uint8_t y_scale)
{
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    newfont->font = *basefont;
 80035ba:	1c0d      	adds	r5, r1, #0
 80035bc:	1c04      	adds	r4, r0, #0
}

void mf_scale_font(struct mf_scaledfont_s *newfont,
                   const struct mf_font_s *basefont,
                   uint8_t x_scale, uint8_t y_scale)
{
 80035be:	468c      	mov	ip, r1
    newfont->font = *basefont;
 80035c0:	cdc2      	ldmia	r5!, {r1, r6, r7}
 80035c2:	c4c2      	stmia	r4!, {r1, r6, r7}
 80035c4:	cdc2      	ldmia	r5!, {r1, r6, r7}
 80035c6:	c4c2      	stmia	r4!, {r1, r6, r7}
    newfont->basefont = basefont;
 80035c8:	4661      	mov	r1, ip
 80035ca:	61c1      	str	r1, [r0, #28]
    
    newfont->font.width *= x_scale;
 80035cc:	7a01      	ldrb	r1, [r0, #8]
 80035ce:	4351      	muls	r1, r2
 80035d0:	7201      	strb	r1, [r0, #8]
    newfont->font.height *= y_scale;
 80035d2:	7a41      	ldrb	r1, [r0, #9]
 80035d4:	4359      	muls	r1, r3
 80035d6:	7241      	strb	r1, [r0, #9]
    newfont->font.baseline_x *= x_scale;
 80035d8:	7b01      	ldrb	r1, [r0, #12]
 80035da:	4351      	muls	r1, r2
 80035dc:	7301      	strb	r1, [r0, #12]
    newfont->font.baseline_y *= y_scale;
 80035de:	7b41      	ldrb	r1, [r0, #13]
 80035e0:	4359      	muls	r1, r3
 80035e2:	7341      	strb	r1, [r0, #13]
    newfont->font.min_x_advance *= x_scale;
 80035e4:	7a81      	ldrb	r1, [r0, #10]
 80035e6:	4351      	muls	r1, r2
 80035e8:	7281      	strb	r1, [r0, #10]
    newfont->font.max_x_advance *= x_scale;
 80035ea:	7ac1      	ldrb	r1, [r0, #11]
 80035ec:	4351      	muls	r1, r2
 80035ee:	72c1      	strb	r1, [r0, #11]
    newfont->font.line_height *= y_scale;
 80035f0:	7b81      	ldrb	r1, [r0, #14]
 80035f2:	4359      	muls	r1, r3
 80035f4:	7381      	strb	r1, [r0, #14]
    newfont->font.character_width = &mf_scaled_character_width;
 80035f6:	4904      	ldr	r1, [pc, #16]	; (8003608 <mf_scale_font+0x50>)
 80035f8:	6141      	str	r1, [r0, #20]
    newfont->font.render_character = &mf_scaled_render_character;
 80035fa:	4904      	ldr	r1, [pc, #16]	; (800360c <mf_scale_font+0x54>)
 80035fc:	6181      	str	r1, [r0, #24]
    
    newfont->x_scale = x_scale;
 80035fe:	2120      	movs	r1, #32
 8003600:	5442      	strb	r2, [r0, r1]
    newfont->y_scale = y_scale;
 8003602:	2221      	movs	r2, #33	; 0x21
 8003604:	5483      	strb	r3, [r0, r2]
}
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003608:	08003565 	.word	0x08003565
 800360c:	08003579 	.word	0x08003579

08003610 <gdisp_lld_fill_area>:
		g->flags &= ~GDISP_FLG_NEEDFLUSH;
	}
#endif

#if GDISP_HARDWARE_FILLS
	LLDSPEC void gdisp_lld_fill_area(GDisplay *g) {
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	464d      	mov	r5, r9
 8003614:	465f      	mov	r7, fp
 8003616:	4656      	mov	r6, sl
 8003618:	4644      	mov	r4, r8
 800361a:	b4f0      	push	{r4, r5, r6, r7}
		coord_t		col;
		unsigned	spage, zpages;
		uint8_t *	base;
		uint8_t		mask;

		switch(g->g.Orientation) {
 800361c:	8983      	ldrh	r3, [r0, #12]
		g->flags &= ~GDISP_FLG_NEEDFLUSH;
	}
#endif

#if GDISP_HARDWARE_FILLS
	LLDSPEC void gdisp_lld_fill_area(GDisplay *g) {
 800361e:	b083      	sub	sp, #12
 8003620:	4681      	mov	r9, r0
		coord_t		col;
		unsigned	spage, zpages;
		uint8_t *	base;
		uint8_t		mask;

		switch(g->g.Orientation) {
 8003622:	2bb4      	cmp	r3, #180	; 0xb4
 8003624:	d100      	bne.n	8003628 <gdisp_lld_fill_area+0x18>
 8003626:	e0d2      	b.n	80037ce <gdisp_lld_fill_area+0x1be>
 8003628:	2287      	movs	r2, #135	; 0x87
 800362a:	0052      	lsls	r2, r2, #1
 800362c:	4293      	cmp	r3, r2
 800362e:	d100      	bne.n	8003632 <gdisp_lld_fill_area+0x22>
 8003630:	e0bc      	b.n	80037ac <gdisp_lld_fill_area+0x19c>
 8003632:	2b5a      	cmp	r3, #90	; 0x5a
 8003634:	d100      	bne.n	8003638 <gdisp_lld_fill_area+0x28>
 8003636:	e06b      	b.n	8003710 <gdisp_lld_fill_area+0x100>
		default:
		case GDISP_ROTATE_0:
			sx = g->p.x;
			ex = g->p.x + g->p.cx - 1;
			sy = g->p.y;
 8003638:	8c42      	ldrh	r2, [r0, #34]	; 0x22
			ey = sy + g->p.cy - 1;
 800363a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
		uint8_t		mask;

		switch(g->g.Orientation) {
		default:
		case GDISP_ROTATE_0:
			sx = g->p.x;
 800363c:	8c07      	ldrh	r7, [r0, #32]
			ex = g->p.x + g->p.cx - 1;
 800363e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
			sy = g->p.y;
			ey = sy + g->p.cy - 1;
 8003640:	b291      	uxth	r1, r2
 8003642:	18cb      	adds	r3, r1, r3

		switch(g->g.Orientation) {
		default:
		case GDISP_ROTATE_0:
			sx = g->p.x;
			ex = g->p.x + g->p.cx - 1;
 8003644:	197d      	adds	r5, r7, r5
			sy = g->p.y;
			ey = sy + g->p.cy - 1;
 8003646:	3b01      	subs	r3, #1

		switch(g->g.Orientation) {
		default:
		case GDISP_ROTATE_0:
			sx = g->p.x;
			ex = g->p.x + g->p.cx - 1;
 8003648:	3d01      	subs	r5, #1
			sy = g->p.y;
			ey = sy + g->p.cy - 1;
 800364a:	b29b      	uxth	r3, r3

		switch(g->g.Orientation) {
		default:
		case GDISP_ROTATE_0:
			sx = g->p.x;
			ex = g->p.x + g->p.cx - 1;
 800364c:	b2ad      	uxth	r5, r5
			sy = g->p.y;
			ey = sy + g->p.cy - 1;
 800364e:	9301      	str	r3, [sp, #4]
			ey = g->p.x + g->p.cx - 1;
			break;
		}

		spage = sy / 8;
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
 8003650:	4648      	mov	r0, r9
 8003652:	6940      	ldr	r0, [r0, #20]
			sy = g->p.x;
			ey = g->p.x + g->p.cx - 1;
			break;
		}

		spage = sy / 8;
 8003654:	b212      	sxth	r2, r2
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
 8003656:	4684      	mov	ip, r0
			sy = g->p.x;
			ey = g->p.x + g->p.cx - 1;
			break;
		}

		spage = sy / 8;
 8003658:	17d3      	asrs	r3, r2, #31
 800365a:	0f5b      	lsrs	r3, r3, #29
 800365c:	189b      	adds	r3, r3, r2
 800365e:	10db      	asrs	r3, r3, #3
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
 8003660:	01da      	lsls	r2, r3, #7
		mask = 0xff << (sy&7);
 8003662:	2407      	movs	r4, #7
			ey = g->p.x + g->p.cx - 1;
			break;
		}

		spage = sy / 8;
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
 8003664:	4494      	add	ip, r2
		mask = 0xff << (sy&7);
		zpages = (ey / 8) - spage;
 8003666:	466a      	mov	r2, sp
			break;
		}

		spage = sy / 8;
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
		mask = 0xff << (sy&7);
 8003668:	4021      	ands	r1, r4
 800366a:	34f8      	adds	r4, #248	; 0xf8
 800366c:	408c      	lsls	r4, r1
		zpages = (ey / 8) - spage;
 800366e:	2104      	movs	r1, #4
 8003670:	5e52      	ldrsh	r2, [r2, r1]
			break;
		}

		spage = sy / 8;
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
		mask = 0xff << (sy&7);
 8003672:	b2e4      	uxtb	r4, r4
		zpages = (ey / 8) - spage;
 8003674:	17d1      	asrs	r1, r2, #31
 8003676:	0f49      	lsrs	r1, r1, #29
 8003678:	188a      	adds	r2, r1, r2
 800367a:	10d2      	asrs	r2, r2, #3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	4698      	mov	r8, r3

		if (gdispColor2Native(g->p.color) == gdispColor2Native(GFX_BLACK)) {
 8003680:	464a      	mov	r2, r9
 8003682:	2330      	movs	r3, #48	; 0x30
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d054      	beq.n	8003734 <gdisp_lld_fill_area+0x124>
			}
			mask &= (0xff >> (7 - (ey&7)));
			for (col = sx; col <= ex; col++)
				base[col] &= ~mask;
		} else {
			while (zpages--) {
 800368a:	2301      	movs	r3, #1
 800368c:	425b      	negs	r3, r3
 800368e:	4443      	add	r3, r8
 8003690:	469a      	mov	sl, r3
 8003692:	4643      	mov	r3, r8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d100      	bne.n	800369a <gdisp_lld_fill_area+0x8a>
 8003698:	e0a6      	b.n	80037e8 <gdisp_lld_fill_area+0x1d8>
 800369a:	b23e      	sxth	r6, r7
 800369c:	4651      	mov	r1, sl
 800369e:	4660      	mov	r0, ip
 80036a0:	46b3      	mov	fp, r6
 80036a2:	46b2      	mov	sl, r6
 80036a4:	b22d      	sxth	r5, r5
				for (col = sx; col <= ex; col++)
 80036a6:	1c3a      	adds	r2, r7, #0
 80036a8:	465b      	mov	r3, fp
 80036aa:	45aa      	cmp	sl, r5
 80036ac:	dc08      	bgt.n	80036c0 <gdisp_lld_fill_area+0xb0>
					base[col] |= mask;
 80036ae:	18c3      	adds	r3, r0, r3
 80036b0:	781e      	ldrb	r6, [r3, #0]
 80036b2:	3201      	adds	r2, #1
 80036b4:	4326      	orrs	r6, r4
 80036b6:	b292      	uxth	r2, r2
 80036b8:	701e      	strb	r6, [r3, #0]
			mask &= (0xff >> (7 - (ey&7)));
			for (col = sx; col <= ex; col++)
				base[col] &= ~mask;
		} else {
			while (zpages--) {
				for (col = sx; col <= ex; col++)
 80036ba:	b213      	sxth	r3, r2
 80036bc:	429d      	cmp	r5, r3
 80036be:	daf6      	bge.n	80036ae <gdisp_lld_fill_area+0x9e>
					base[col] |= mask;
				mask = 0xff;
				base += SSD1306_PAGE_WIDTH;
 80036c0:	3080      	adds	r0, #128	; 0x80
				base[col] &= ~mask;
		} else {
			while (zpages--) {
				for (col = sx; col <= ex; col++)
					base[col] |= mask;
				mask = 0xff;
 80036c2:	24ff      	movs	r4, #255	; 0xff
			}
			mask &= (0xff >> (7 - (ey&7)));
			for (col = sx; col <= ex; col++)
				base[col] &= ~mask;
		} else {
			while (zpages--) {
 80036c4:	3901      	subs	r1, #1
 80036c6:	d2ee      	bcs.n	80036a6 <gdisp_lld_fill_area+0x96>
 80036c8:	4643      	mov	r3, r8
 80036ca:	4656      	mov	r6, sl
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	449c      	add	ip, r3
				for (col = sx; col <= ex; col++)
					base[col] |= mask;
				mask = 0xff;
				base += SSD1306_PAGE_WIDTH;
			}
			mask &= (0xff >> (7 - (ey&7)));
 80036d0:	2307      	movs	r3, #7
 80036d2:	9a01      	ldr	r2, [sp, #4]
 80036d4:	4393      	bics	r3, r2
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	411a      	asrs	r2, r3
 80036da:	4014      	ands	r4, r2
 80036dc:	b2e3      	uxtb	r3, r4
			for (col = sx; col <= ex; col++)
 80036de:	42ae      	cmp	r6, r5
 80036e0:	dc09      	bgt.n	80036f6 <gdisp_lld_fill_area+0xe6>
 80036e2:	4661      	mov	r1, ip
				base[col] |= mask;
 80036e4:	198e      	adds	r6, r1, r6
 80036e6:	7832      	ldrb	r2, [r6, #0]
 80036e8:	3701      	adds	r7, #1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	b2bf      	uxth	r7, r7
 80036ee:	7032      	strb	r2, [r6, #0]
					base[col] |= mask;
				mask = 0xff;
				base += SSD1306_PAGE_WIDTH;
			}
			mask &= (0xff >> (7 - (ey&7)));
			for (col = sx; col <= ex; col++)
 80036f0:	b23e      	sxth	r6, r7
 80036f2:	42b5      	cmp	r5, r6
 80036f4:	daf6      	bge.n	80036e4 <gdisp_lld_fill_area+0xd4>
				base[col] |= mask;
		}
		g->flags |= GDISP_FLG_NEEDFLUSH;
 80036f6:	464b      	mov	r3, r9
 80036f8:	8bda      	ldrh	r2, [r3, #30]
 80036fa:	2304      	movs	r3, #4
 80036fc:	4313      	orrs	r3, r2
 80036fe:	464a      	mov	r2, r9
 8003700:	83d3      	strh	r3, [r2, #30]
	}
 8003702:	b003      	add	sp, #12
 8003704:	bc3c      	pop	{r2, r3, r4, r5}
 8003706:	4690      	mov	r8, r2
 8003708:	4699      	mov	r9, r3
 800370a:	46a2      	mov	sl, r4
 800370c:	46ab      	mov	fp, r5
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ex = g->p.x + g->p.cx - 1;
			sy = g->p.y;
			ey = sy + g->p.cy - 1;
			break;
		case GDISP_ROTATE_90:
			sx = g->p.y;
 8003710:	1c03      	adds	r3, r0, #0
 8003712:	8c47      	ldrh	r7, [r0, #34]	; 0x22
			ex = g->p.y + g->p.cy - 1;
 8003714:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
 8003716:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8003718:	197d      	adds	r5, r7, r5
 800371a:	3d01      	subs	r5, #1
			sy = GDISP_SCREEN_HEIGHT - g->p.x - g->p.cx;
 800371c:	8c00      	ldrh	r0, [r0, #32]
			sy = g->p.y;
			ey = sy + g->p.cy - 1;
			break;
		case GDISP_ROTATE_90:
			sx = g->p.y;
			ex = g->p.y + g->p.cy - 1;
 800371e:	b2ad      	uxth	r5, r5
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			sx = GDISP_SCREEN_WIDTH - g->p.x - g->p.cx;
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
 8003720:	2240      	movs	r2, #64	; 0x40
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 8003722:	233f      	movs	r3, #63	; 0x3f
 8003724:	1841      	adds	r1, r0, r1
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			sx = GDISP_SCREEN_WIDTH - g->p.x - g->p.cx;
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
 8003726:	1a51      	subs	r1, r2, r1
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 8003728:	1a1b      	subs	r3, r3, r0
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			sx = GDISP_SCREEN_WIDTH - g->p.x - g->p.cx;
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
 800372a:	b289      	uxth	r1, r1
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 800372c:	b29b      	uxth	r3, r3
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			sx = GDISP_SCREEN_WIDTH - g->p.x - g->p.cx;
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
 800372e:	b28a      	uxth	r2, r1
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 8003730:	9301      	str	r3, [sp, #4]
			break;
 8003732:	e78d      	b.n	8003650 <gdisp_lld_fill_area+0x40>
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
		mask = 0xff << (sy&7);
		zpages = (ey / 8) - spage;

		if (gdispColor2Native(g->p.color) == gdispColor2Native(GFX_BLACK)) {
			while (zpages--) {
 8003734:	2301      	movs	r3, #1
 8003736:	425b      	negs	r3, r3
 8003738:	4443      	add	r3, r8
 800373a:	469a      	mov	sl, r3
 800373c:	4643      	mov	r3, r8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d055      	beq.n	80037ee <gdisp_lld_fill_area+0x1de>
 8003742:	b23e      	sxth	r6, r7
 8003744:	1c21      	adds	r1, r4, #0
 8003746:	4660      	mov	r0, ip
 8003748:	4654      	mov	r4, sl
 800374a:	46b3      	mov	fp, r6
 800374c:	46ba      	mov	sl, r7
 800374e:	b22d      	sxth	r5, r5
				for (col = sx; col <= ex; col++)
 8003750:	42ae      	cmp	r6, r5
 8003752:	dc0c      	bgt.n	800376e <gdisp_lld_fill_area+0x15e>
 8003754:	43c9      	mvns	r1, r1
 8003756:	4652      	mov	r2, sl
 8003758:	465b      	mov	r3, fp
 800375a:	b2c9      	uxtb	r1, r1
					base[col] &= ~mask;
 800375c:	18c3      	adds	r3, r0, r3
 800375e:	781f      	ldrb	r7, [r3, #0]
 8003760:	3201      	adds	r2, #1
 8003762:	400f      	ands	r7, r1
 8003764:	b292      	uxth	r2, r2
 8003766:	701f      	strb	r7, [r3, #0]
		mask = 0xff << (sy&7);
		zpages = (ey / 8) - spage;

		if (gdispColor2Native(g->p.color) == gdispColor2Native(GFX_BLACK)) {
			while (zpages--) {
				for (col = sx; col <= ex; col++)
 8003768:	b213      	sxth	r3, r2
 800376a:	429d      	cmp	r5, r3
 800376c:	daf6      	bge.n	800375c <gdisp_lld_fill_area+0x14c>
					base[col] &= ~mask;
				mask = 0xff;
				base += SSD1306_PAGE_WIDTH;
 800376e:	3080      	adds	r0, #128	; 0x80

		if (gdispColor2Native(g->p.color) == gdispColor2Native(GFX_BLACK)) {
			while (zpages--) {
				for (col = sx; col <= ex; col++)
					base[col] &= ~mask;
				mask = 0xff;
 8003770:	21ff      	movs	r1, #255	; 0xff
		base = RAM(g) + SSD1306_PAGE_OFFSET + SSD1306_PAGE_WIDTH * spage;
		mask = 0xff << (sy&7);
		zpages = (ey / 8) - spage;

		if (gdispColor2Native(g->p.color) == gdispColor2Native(GFX_BLACK)) {
			while (zpages--) {
 8003772:	3c01      	subs	r4, #1
 8003774:	d2ec      	bcs.n	8003750 <gdisp_lld_fill_area+0x140>
 8003776:	4643      	mov	r3, r8
 8003778:	4657      	mov	r7, sl
 800377a:	24ff      	movs	r4, #255	; 0xff
 800377c:	01db      	lsls	r3, r3, #7
 800377e:	449c      	add	ip, r3
				for (col = sx; col <= ex; col++)
					base[col] &= ~mask;
				mask = 0xff;
				base += SSD1306_PAGE_WIDTH;
			}
			mask &= (0xff >> (7 - (ey&7)));
 8003780:	2207      	movs	r2, #7
 8003782:	9b01      	ldr	r3, [sp, #4]
 8003784:	439a      	bics	r2, r3
 8003786:	23ff      	movs	r3, #255	; 0xff
 8003788:	4113      	asrs	r3, r2
 800378a:	401c      	ands	r4, r3
 800378c:	b2e2      	uxtb	r2, r4
			for (col = sx; col <= ex; col++)
 800378e:	42ae      	cmp	r6, r5
 8003790:	dcb1      	bgt.n	80036f6 <gdisp_lld_fill_area+0xe6>
 8003792:	43d2      	mvns	r2, r2
 8003794:	4661      	mov	r1, ip
 8003796:	b2d2      	uxtb	r2, r2
				base[col] &= ~mask;
 8003798:	198e      	adds	r6, r1, r6
 800379a:	7833      	ldrb	r3, [r6, #0]
 800379c:	3701      	adds	r7, #1
 800379e:	4013      	ands	r3, r2
 80037a0:	b2bf      	uxth	r7, r7
 80037a2:	7033      	strb	r3, [r6, #0]
					base[col] &= ~mask;
				mask = 0xff;
				base += SSD1306_PAGE_WIDTH;
			}
			mask &= (0xff >> (7 - (ey&7)));
			for (col = sx; col <= ex; col++)
 80037a4:	b23e      	sxth	r6, r7
 80037a6:	42b5      	cmp	r5, r6
 80037a8:	daf6      	bge.n	8003798 <gdisp_lld_fill_area+0x188>
 80037aa:	e7a4      	b.n	80036f6 <gdisp_lld_fill_area+0xe6>
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.y;
			break;
		case GDISP_ROTATE_270:
			sx = GDISP_SCREEN_WIDTH - g->p.y - g->p.cy;
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	8c45      	ldrh	r5, [r0, #34]	; 0x22
 80037b0:	8cc7      	ldrh	r7, [r0, #38]	; 0x26
			ex = GDISP_SCREEN_WIDTH-1 - g->p.y;
			sy = g->p.x;
 80037b2:	8c02      	ldrh	r2, [r0, #32]
 80037b4:	19ef      	adds	r7, r5, r7
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.y;
			break;
		case GDISP_ROTATE_270:
			sx = GDISP_SCREEN_WIDTH - g->p.y - g->p.cy;
 80037b6:	1bdf      	subs	r7, r3, r7
			ex = GDISP_SCREEN_WIDTH-1 - g->p.y;
 80037b8:	237f      	movs	r3, #127	; 0x7f
 80037ba:	1b5d      	subs	r5, r3, r5
			sy = g->p.x;
			ey = g->p.x + g->p.cx - 1;
 80037bc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80037be:	b291      	uxth	r1, r2
 80037c0:	18cb      	adds	r3, r1, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29b      	uxth	r3, r3
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.y;
			break;
		case GDISP_ROTATE_270:
			sx = GDISP_SCREEN_WIDTH - g->p.y - g->p.cy;
 80037c6:	b2bf      	uxth	r7, r7
			ex = GDISP_SCREEN_WIDTH-1 - g->p.y;
 80037c8:	b2ad      	uxth	r5, r5
			sy = g->p.x;
			ey = g->p.x + g->p.cx - 1;
 80037ca:	9301      	str	r3, [sp, #4]
			break;
 80037cc:	e740      	b.n	8003650 <gdisp_lld_fill_area+0x40>
			ex = g->p.y + g->p.cy - 1;
			sy = GDISP_SCREEN_HEIGHT - g->p.x - g->p.cx;
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			sx = GDISP_SCREEN_WIDTH - g->p.x - g->p.cx;
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	8c05      	ldrh	r5, [r0, #32]
 80037d2:	8c87      	ldrh	r7, [r0, #36]	; 0x24
 80037d4:	19ef      	adds	r7, r5, r7
 80037d6:	1bdf      	subs	r7, r3, r7
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
 80037d8:	237f      	movs	r3, #127	; 0x7f
 80037da:	1b5d      	subs	r5, r3, r5
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
 80037dc:	1c03      	adds	r3, r0, #0
			ex = g->p.y + g->p.cy - 1;
			sy = GDISP_SCREEN_HEIGHT - g->p.x - g->p.cx;
			ey = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			sx = GDISP_SCREEN_WIDTH - g->p.x - g->p.cx;
 80037de:	b2bf      	uxth	r7, r7
			ex = GDISP_SCREEN_WIDTH-1 - g->p.x;
 80037e0:	b2ad      	uxth	r5, r5
			sy = GDISP_SCREEN_HEIGHT - g->p.y - g->p.cy;
 80037e2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80037e4:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
 80037e6:	e79b      	b.n	8003720 <gdisp_lld_fill_area+0x110>
 80037e8:	b22d      	sxth	r5, r5
 80037ea:	b23e      	sxth	r6, r7
 80037ec:	e770      	b.n	80036d0 <gdisp_lld_fill_area+0xc0>
 80037ee:	b22d      	sxth	r5, r5
 80037f0:	b23e      	sxth	r6, r7
 80037f2:	e7c5      	b.n	8003780 <gdisp_lld_fill_area+0x170>

080037f4 <gdisp_lld_draw_pixel>:

#if GDISP_HARDWARE_DRAWPIXEL
	LLDSPEC void gdisp_lld_draw_pixel(GDisplay *g) {
		coord_t		x, y;

		switch(g->g.Orientation) {
 80037f4:	8983      	ldrh	r3, [r0, #12]
 80037f6:	2bb4      	cmp	r3, #180	; 0xb4
 80037f8:	d03f      	beq.n	800387a <gdisp_lld_draw_pixel+0x86>
 80037fa:	2287      	movs	r2, #135	; 0x87
 80037fc:	0052      	lsls	r2, r2, #1
 80037fe:	4293      	cmp	r3, r2
 8003800:	d035      	beq.n	800386e <gdisp_lld_draw_pixel+0x7a>
 8003802:	2b5a      	cmp	r3, #90	; 0x5a
 8003804:	d019      	beq.n	800383a <gdisp_lld_draw_pixel+0x46>
		default:
		case GDISP_ROTATE_0:
			x = g->p.x;
 8003806:	8c03      	ldrh	r3, [r0, #32]
			y = g->p.y;
 8003808:	8c42      	ldrh	r2, [r0, #34]	; 0x22
		case GDISP_ROTATE_270:
			x = GDISP_SCREEN_WIDTH-1 - g->p.y;
			y = g->p.x;
			break;
		}
		if (gdispColor2Native(g->p.color) != gdispColor2Native(GFX_BLACK))
 800380a:	2130      	movs	r1, #48	; 0x30
 800380c:	5c41      	ldrb	r1, [r0, r1]
 800380e:	2900      	cmp	r1, #0
 8003810:	d11c      	bne.n	800384c <gdisp_lld_draw_pixel+0x58>
			RAM(g)[xyaddr(x, y)] |= xybit(y);
		else
			RAM(g)[xyaddr(x, y)] &= ~xybit(y);
 8003812:	b219      	sxth	r1, r3
 8003814:	b213      	sxth	r3, r2
 8003816:	10db      	asrs	r3, r3, #3
 8003818:	01db      	lsls	r3, r3, #7
 800381a:	18cb      	adds	r3, r1, r3
 800381c:	6941      	ldr	r1, [r0, #20]
 800381e:	468c      	mov	ip, r1
 8003820:	2107      	movs	r1, #7
 8003822:	400a      	ands	r2, r1
 8003824:	3906      	subs	r1, #6
 8003826:	4091      	lsls	r1, r2
 8003828:	4463      	add	r3, ip
 800382a:	781a      	ldrb	r2, [r3, #0]
 800382c:	438a      	bics	r2, r1
 800382e:	701a      	strb	r2, [r3, #0]
		g->flags |= GDISP_FLG_NEEDFLUSH;
 8003830:	2304      	movs	r3, #4
 8003832:	8bc2      	ldrh	r2, [r0, #30]
 8003834:	4313      	orrs	r3, r2
 8003836:	83c3      	strh	r3, [r0, #30]
	}
 8003838:	4770      	bx	lr
			x = g->p.x;
			y = g->p.y;
			break;
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
 800383a:	223f      	movs	r2, #63	; 0x3f
 800383c:	8c01      	ldrh	r1, [r0, #32]
		case GDISP_ROTATE_0:
			x = g->p.x;
			y = g->p.y;
			break;
		case GDISP_ROTATE_90:
			x = g->p.y;
 800383e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
 8003840:	1a52      	subs	r2, r2, r1
		case GDISP_ROTATE_270:
			x = GDISP_SCREEN_WIDTH-1 - g->p.y;
			y = g->p.x;
			break;
		}
		if (gdispColor2Native(g->p.color) != gdispColor2Native(GFX_BLACK))
 8003842:	2130      	movs	r1, #48	; 0x30
 8003844:	5c41      	ldrb	r1, [r0, r1]
			x = g->p.x;
			y = g->p.y;
			break;
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
 8003846:	b292      	uxth	r2, r2
		case GDISP_ROTATE_270:
			x = GDISP_SCREEN_WIDTH-1 - g->p.y;
			y = g->p.x;
			break;
		}
		if (gdispColor2Native(g->p.color) != gdispColor2Native(GFX_BLACK))
 8003848:	2900      	cmp	r1, #0
 800384a:	d0e2      	beq.n	8003812 <gdisp_lld_draw_pixel+0x1e>
			RAM(g)[xyaddr(x, y)] |= xybit(y);
 800384c:	b211      	sxth	r1, r2
 800384e:	10c9      	asrs	r1, r1, #3
 8003850:	01c9      	lsls	r1, r1, #7
 8003852:	b21b      	sxth	r3, r3
 8003854:	185b      	adds	r3, r3, r1
 8003856:	6941      	ldr	r1, [r0, #20]
 8003858:	468c      	mov	ip, r1
 800385a:	2107      	movs	r1, #7
 800385c:	400a      	ands	r2, r1
 800385e:	3906      	subs	r1, #6
 8003860:	4091      	lsls	r1, r2
 8003862:	1c0a      	adds	r2, r1, #0
 8003864:	4463      	add	r3, ip
 8003866:	7819      	ldrb	r1, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e7e0      	b.n	8003830 <gdisp_lld_draw_pixel+0x3c>
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
			break;
		case GDISP_ROTATE_270:
			x = GDISP_SCREEN_WIDTH-1 - g->p.y;
 800386e:	237f      	movs	r3, #127	; 0x7f
 8003870:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	b29b      	uxth	r3, r3
			y = g->p.x;
 8003876:	8c02      	ldrh	r2, [r0, #32]
			break;
 8003878:	e7c7      	b.n	800380a <gdisp_lld_draw_pixel+0x16>
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
 800387a:	237f      	movs	r3, #127	; 0x7f
 800387c:	8c02      	ldrh	r2, [r0, #32]
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 800387e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
 8003880:	1a9b      	subs	r3, r3, r2
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 8003882:	223f      	movs	r2, #63	; 0x3f
 8003884:	1a52      	subs	r2, r2, r1
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
 8003886:	b29b      	uxth	r3, r3
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 8003888:	b292      	uxth	r2, r2
			break;
 800388a:	e7be      	b.n	800380a <gdisp_lld_draw_pixel+0x16>

0800388c <gdisp_lld_get_pixel_color>:

#if GDISP_HARDWARE_PIXELREAD
	LLDSPEC color_t gdisp_lld_get_pixel_color(GDisplay *g) {
		coord_t		x, y;

		switch(g->g.Orientation) {
 800388c:	8983      	ldrh	r3, [r0, #12]
 800388e:	2bb4      	cmp	r3, #180	; 0xb4
 8003890:	d021      	beq.n	80038d6 <gdisp_lld_get_pixel_color+0x4a>
 8003892:	2287      	movs	r2, #135	; 0x87
 8003894:	0052      	lsls	r2, r2, #1
 8003896:	4293      	cmp	r3, r2
 8003898:	d017      	beq.n	80038ca <gdisp_lld_get_pixel_color+0x3e>
 800389a:	2b5a      	cmp	r3, #90	; 0x5a
 800389c:	d00f      	beq.n	80038be <gdisp_lld_get_pixel_color+0x32>
		default:
		case GDISP_ROTATE_0:
			x = g->p.x;
 800389e:	8c03      	ldrh	r3, [r0, #32]
			y = g->p.y;
 80038a0:	8c41      	ldrh	r1, [r0, #34]	; 0x22
		case GDISP_ROTATE_270:
			x = GDISP_SCREEN_WIDTH-1 - g->p.y;
			y = g->p.x;
			break;
		}
		return (RAM(g)[xyaddr(x, y)] & xybit(y)) ? GFX_WHITE : GFX_BLACK;
 80038a2:	b21a      	sxth	r2, r3
 80038a4:	b20b      	sxth	r3, r1
 80038a6:	10db      	asrs	r3, r3, #3
 80038a8:	6940      	ldr	r0, [r0, #20]
 80038aa:	01db      	lsls	r3, r3, #7
 80038ac:	189b      	adds	r3, r3, r2
 80038ae:	5c18      	ldrb	r0, [r3, r0]
 80038b0:	2307      	movs	r3, #7
 80038b2:	4019      	ands	r1, r3
 80038b4:	4108      	asrs	r0, r1
 80038b6:	1c01      	adds	r1, r0, #0
 80038b8:	2001      	movs	r0, #1
 80038ba:	4008      	ands	r0, r1
	}
 80038bc:	4770      	bx	lr
			x = g->p.x;
			y = g->p.y;
			break;
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
 80038be:	223f      	movs	r2, #63	; 0x3f
 80038c0:	8c01      	ldrh	r1, [r0, #32]
		case GDISP_ROTATE_0:
			x = g->p.x;
			y = g->p.y;
			break;
		case GDISP_ROTATE_90:
			x = g->p.y;
 80038c2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
 80038c4:	1a51      	subs	r1, r2, r1
 80038c6:	b289      	uxth	r1, r1
			break;
 80038c8:	e7eb      	b.n	80038a2 <gdisp_lld_get_pixel_color+0x16>
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
			break;
		case GDISP_ROTATE_270:
			x = GDISP_SCREEN_WIDTH-1 - g->p.y;
 80038ca:	237f      	movs	r3, #127	; 0x7f
 80038cc:	8c42      	ldrh	r2, [r0, #34]	; 0x22
			y = g->p.x;
 80038ce:	8c01      	ldrh	r1, [r0, #32]
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
			break;
		case GDISP_ROTATE_270:
			x = GDISP_SCREEN_WIDTH-1 - g->p.y;
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	b29b      	uxth	r3, r3
			y = g->p.x;
			break;
 80038d4:	e7e5      	b.n	80038a2 <gdisp_lld_get_pixel_color+0x16>
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
 80038d6:	237f      	movs	r3, #127	; 0x7f
 80038d8:	8c02      	ldrh	r2, [r0, #32]
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 80038da:	8c41      	ldrh	r1, [r0, #34]	; 0x22
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
 80038dc:	1a9b      	subs	r3, r3, r2
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 80038de:	223f      	movs	r2, #63	; 0x3f
 80038e0:	1a51      	subs	r1, r2, r1
		case GDISP_ROTATE_90:
			x = g->p.y;
			y = GDISP_SCREEN_HEIGHT-1 - g->p.x;
			break;
		case GDISP_ROTATE_180:
			x = GDISP_SCREEN_WIDTH-1 - g->p.x;
 80038e2:	b29b      	uxth	r3, r3
			y = GDISP_SCREEN_HEIGHT-1 - g->p.y;
 80038e4:	b289      	uxth	r1, r1
			break;
 80038e6:	e7dc      	b.n	80038a2 <gdisp_lld_get_pixel_color+0x16>

080038e8 <gdisp_lld_flush>:
	g->g.Contrast = GDISP_INITIAL_CONTRAST;
	return TRUE;
}

#if GDISP_HARDWARE_FLUSH
	LLDSPEC void gdisp_lld_flush(GDisplay *g) {
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		uint8_t * ram;
		unsigned pages;

		// Don't flush if we don't need it.
		if (!(g->flags & GDISP_FLG_NEEDFLUSH))
 80038ea:	8bc3      	ldrh	r3, [r0, #30]
 80038ec:	075b      	lsls	r3, r3, #29
 80038ee:	d400      	bmi.n	80038f2 <gdisp_lld_flush+0xa>
			ram += SSD1306_PAGE_WIDTH;
		}
		release_bus(g);

		g->flags &= ~GDISP_FLG_NEEDFLUSH;
	}
 80038f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned pages;

		// Don't flush if we don't need it.
		if (!(g->flags & GDISP_FLG_NEEDFLUSH))
			return;
		ram = RAM(g);
 80038f2:	6945      	ldr	r5, [r0, #20]
 80038f4:	1c07      	adds	r7, r0, #0
        CLR_RST
}

static GFXINLINE void acquire_bus(GDisplay *g) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_RESET);
 80038f6:	2090      	movs	r0, #144	; 0x90
 80038f8:	2108      	movs	r1, #8
 80038fa:	05c0      	lsls	r0, r0, #23
 80038fc:	2200      	movs	r2, #0
 80038fe:	f7fc fccd 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003902:	2090      	movs	r0, #144	; 0x90
 8003904:	2102      	movs	r1, #2
 8003906:	05c0      	lsls	r0, r0, #23
 8003908:	2200      	movs	r2, #0
 800390a:	f7fc fcc7 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 800390e:	481a      	ldr	r0, [pc, #104]	; (8003978 <gdisp_lld_flush+0x90>)
 8003910:	2102      	movs	r1, #2
 8003912:	f001 fb0f 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003916:	2800      	cmp	r0, #0
 8003918:	d0f9      	beq.n	800390e <gdisp_lld_flush+0x26>
    SPI_SendData8(SPI1, cmd); //send command
 800391a:	4817      	ldr	r0, [pc, #92]	; (8003978 <gdisp_lld_flush+0x90>)
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	f001 faa3 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003922:	2090      	movs	r0, #144	; 0x90
 8003924:	2102      	movs	r1, #2
 8003926:	05c0      	lsls	r0, r0, #23
 8003928:	2201      	movs	r2, #1
 800392a:	f7fc fcb7 	bl	800029c <GPIO_WriteBit>
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	18ee      	adds	r6, r5, r3
static GFXINLINE void write_data(GDisplay *g, uint8_t* data, uint16_t length) {
	(void) g;
	//(void) data;
	//(void) length;
    int i=0;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET); //set data
 8003934:	2090      	movs	r0, #144	; 0x90
 8003936:	2102      	movs	r1, #2
 8003938:	05c0      	lsls	r0, r0, #23
 800393a:	2201      	movs	r2, #1
 800393c:	f7fc fcae 	bl	800029c <GPIO_WriteBit>
 8003940:	1c2c      	adds	r4, r5, #0
 8003942:	3580      	adds	r5, #128	; 0x80
    for(i=0; i<length; i++){
        while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8003944:	480c      	ldr	r0, [pc, #48]	; (8003978 <gdisp_lld_flush+0x90>)
 8003946:	2102      	movs	r1, #2
 8003948:	f001 faf4 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 800394c:	2800      	cmp	r0, #0
 800394e:	d0f9      	beq.n	8003944 <gdisp_lld_flush+0x5c>
        SPI_SendData8(SPI1, data[i]);
 8003950:	7821      	ldrb	r1, [r4, #0]
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <gdisp_lld_flush+0x90>)
 8003954:	3401      	adds	r4, #1
 8003956:	f001 fa87 	bl	8004e68 <SPI_SendData8>
	(void) g;
	//(void) data;
	//(void) length;
    int i=0;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET); //set data
    for(i=0; i<length; i++){
 800395a:	42a5      	cmp	r5, r4
 800395c:	d1f2      	bne.n	8003944 <gdisp_lld_flush+0x5c>
		pages = GDISP_SCREEN_HEIGHT/8;

		acquire_bus(g);
		write_cmd(g, SSD1306_SETSTARTLINE | 0);

		while (pages--) {
 800395e:	42b5      	cmp	r5, r6
 8003960:	d1e8      	bne.n	8003934 <gdisp_lld_flush+0x4c>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_RESET);
}

static GFXINLINE void release_bus(GDisplay *g) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
 8003962:	2090      	movs	r0, #144	; 0x90
 8003964:	2201      	movs	r2, #1
 8003966:	05c0      	lsls	r0, r0, #23
 8003968:	2108      	movs	r1, #8
 800396a:	f7fc fc97 	bl	800029c <GPIO_WriteBit>
			write_data(g, ram, SSD1306_PAGE_WIDTH);
			ram += SSD1306_PAGE_WIDTH;
		}
		release_bus(g);

		g->flags &= ~GDISP_FLG_NEEDFLUSH;
 800396e:	2204      	movs	r2, #4
 8003970:	8bfb      	ldrh	r3, [r7, #30]
 8003972:	4393      	bics	r3, r2
 8003974:	83fb      	strh	r3, [r7, #30]
 8003976:	e7bb      	b.n	80038f0 <gdisp_lld_flush+0x8>
 8003978:	40013000 	.word	0x40013000

0800397c <gdisp_lld_init>:
 * the entire display surface in memory so that we can do the necessary bit
 * operations. Fortunately it is a small display in monochrome.
 * 64 * 128 / 8 = 1024 bytes.
 */

LLDSPEC bool_t gdisp_lld_init(GDisplay *g) {
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	4647      	mov	r7, r8
 8003980:	1c04      	adds	r4, r0, #0
	// The private area is the display surface.
	g->priv = gfxAlloc(GDISP_SCREEN_HEIGHT/8 * SSD1306_PAGE_WIDTH);
 8003982:	2080      	movs	r0, #128	; 0x80
 * the entire display surface in memory so that we can do the necessary bit
 * operations. Fortunately it is a small display in monochrome.
 * 64 * 128 / 8 = 1024 bytes.
 */

LLDSPEC bool_t gdisp_lld_init(GDisplay *g) {
 8003984:	b480      	push	{r7}
	// The private area is the display surface.
	g->priv = gfxAlloc(GDISP_SCREEN_HEIGHT/8 * SSD1306_PAGE_WIDTH);
 8003986:	00c0      	lsls	r0, r0, #3
 * the entire display surface in memory so that we can do the necessary bit
 * operations. Fortunately it is a small display in monochrome.
 * 64 * 128 / 8 = 1024 bytes.
 */

LLDSPEC bool_t gdisp_lld_init(GDisplay *g) {
 8003988:	b088      	sub	sp, #32
	// The private area is the display surface.
	g->priv = gfxAlloc(GDISP_SCREEN_HEIGHT/8 * SSD1306_PAGE_WIDTH);
 800398a:	f000 fd9f 	bl	80044cc <gfxAlloc>



static GFXINLINE void init_board(GDisplay *g) {
	//(void) g;
    g->board = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	7f66      	ldrb	r6, [r4, #29]
 8003992:	6160      	str	r0, [r4, #20]
 8003994:	61a3      	str	r3, [r4, #24]
    GPIO_InitTypeDef  GPIO_InitStructure;
    SPI_InitTypeDef   SPI_InitTypeDefStruct;


	switch(g->controllerdisplay) {
 8003996:	2e00      	cmp	r6, #0
 8003998:	d168      	bne.n	8003a6c <gdisp_lld_init+0xf0>
		 *		2. initialise the reset pin (initial state not-in-reset)
		 *		3. initialise the chip select pin (initial state not-active)
		 *		4. initialise the backlight pin (initial state back-light off)
		 */
                /* GPIO Periph clock enable */
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800399a:	2080      	movs	r0, #128	; 0x80
 800399c:	2101      	movs	r1, #1
 800399e:	0280      	lsls	r0, r0, #10
 80039a0:	f7fc fe98 	bl	80006d4 <RCC_AHBPeriphClockCmd>

        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80039a4:	2080      	movs	r0, #128	; 0x80
 80039a6:	2101      	movs	r1, #1
 80039a8:	0140      	lsls	r0, r0, #5
 80039aa:	f7fc fe9f 	bl	80006ec <RCC_APB2PeriphClockCmd>

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
 80039ae:	23e0      	movs	r3, #224	; 0xe0
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039b0:	2090      	movs	r0, #144	; 0x90
        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039b2:	2703      	movs	r7, #3

        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
 80039b4:	ad01      	add	r5, sp, #4
 80039b6:	9301      	str	r3, [sp, #4]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039b8:	05c0      	lsls	r0, r0, #23
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80039ba:	3bde      	subs	r3, #222	; 0xde
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039bc:	1c29      	adds	r1, r5, #0
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80039be:	4698      	mov	r8, r3
        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039c0:	716f      	strb	r7, [r5, #5]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80039c2:	712b      	strb	r3, [r5, #4]
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80039c4:	71ae      	strb	r6, [r5, #6]
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80039c6:	71ee      	strb	r6, [r5, #7]
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039c8:	f7fc fbce 	bl	8000168 <GPIO_Init>
        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039cc:	2090      	movs	r0, #144	; 0x90
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
   
        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
 80039ce:	231e      	movs	r3, #30
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039d0:	716f      	strb	r7, [r5, #5]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039d2:	05c0      	lsls	r0, r0, #23
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
   
        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80039d4:	3f02      	subs	r7, #2
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039d6:	1c29      	adds	r1, r5, #0
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
   
        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
 80039d8:	9301      	str	r3, [sp, #4]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80039da:	712f      	strb	r7, [r5, #4]
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80039dc:	71ae      	strb	r6, [r5, #6]
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 80039de:	71ef      	strb	r7, [r5, #7]
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 80039e0:	f7fc fbc2 	bl	8000168 <GPIO_Init>
 
        /* Connect SPI pins to AF */
        GPIO_PinAFConfig(SPI1_PORT, GPIO_PinSource5, GPIO_AF_0);
 80039e4:	2090      	movs	r0, #144	; 0x90
 80039e6:	2105      	movs	r1, #5
 80039e8:	05c0      	lsls	r0, r0, #23
 80039ea:	2200      	movs	r2, #0
 80039ec:	f7fc fc5e 	bl	80002ac <GPIO_PinAFConfig>
        GPIO_PinAFConfig(SPI1_PORT, GPIO_PinSource6, GPIO_AF_0);
 80039f0:	2090      	movs	r0, #144	; 0x90
 80039f2:	2106      	movs	r1, #6
 80039f4:	05c0      	lsls	r0, r0, #23
 80039f6:	2200      	movs	r2, #0
 80039f8:	f7fc fc58 	bl	80002ac <GPIO_PinAFConfig>
        GPIO_PinAFConfig(SPI1_PORT, GPIO_PinSource7, GPIO_AF_0);
 80039fc:	2090      	movs	r0, #144	; 0x90
 80039fe:	2200      	movs	r2, #0
 8003a00:	05c0      	lsls	r0, r0, #23
 8003a02:	2107      	movs	r1, #7
 8003a04:	f7fc fc52 	bl	80002ac <GPIO_PinAFConfig>

        /*SPI init */        
        SPI_InitTypeDefStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8003a08:	4bec      	ldr	r3, [pc, #944]	; (8003dbc <gdisp_lld_init+0x440>)
 8003a0a:	a903      	add	r1, sp, #12
 8003a0c:	800b      	strh	r3, [r1, #0]
        SPI_InitTypeDefStruct.SPI_Mode = SPI_Mode_Master;
 8003a0e:	2382      	movs	r3, #130	; 0x82
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	804b      	strh	r3, [r1, #2]
        SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
 8003a14:	23e0      	movs	r3, #224	; 0xe0
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	808b      	strh	r3, [r1, #4]
        SPI_InitTypeDefStruct.SPI_CPOL = SPI_CPOL_High;
 8003a1a:	4643      	mov	r3, r8
 8003a1c:	80cb      	strh	r3, [r1, #6]
        SPI_InitTypeDefStruct.SPI_CPHA = SPI_CPHA_2Edge;
        SPI_InitTypeDefStruct.SPI_NSS = SPI_NSS_Soft;
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	814b      	strh	r3, [r1, #10]
        SPI_InitTypeDefStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
 8003a24:	3bd9      	subs	r3, #217	; 0xd9
 8003a26:	3bff      	subs	r3, #255	; 0xff
        SPI_InitTypeDefStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 
        SPI_Init(SPI1, &SPI_InitTypeDefStruct);
 8003a28:	48e5      	ldr	r0, [pc, #916]	; (8003dc0 <gdisp_lld_init+0x444>)
        SPI_InitTypeDefStruct.SPI_Mode = SPI_Mode_Master;
        SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
        SPI_InitTypeDefStruct.SPI_CPOL = SPI_CPOL_High;
        SPI_InitTypeDefStruct.SPI_CPHA = SPI_CPHA_2Edge;
        SPI_InitTypeDefStruct.SPI_NSS = SPI_NSS_Soft;
        SPI_InitTypeDefStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
 8003a2a:	818b      	strh	r3, [r1, #12]
        /*SPI init */        
        SPI_InitTypeDefStruct.SPI_Direction = SPI_Direction_1Line_Tx;
        SPI_InitTypeDefStruct.SPI_Mode = SPI_Mode_Master;
        SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
        SPI_InitTypeDefStruct.SPI_CPOL = SPI_CPOL_High;
        SPI_InitTypeDefStruct.SPI_CPHA = SPI_CPHA_2Edge;
 8003a2c:	810f      	strh	r7, [r1, #8]
        SPI_InitTypeDefStruct.SPI_NSS = SPI_NSS_Soft;
        SPI_InitTypeDefStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
        SPI_InitTypeDefStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 8003a2e:	81ce      	strh	r6, [r1, #14]
 
        SPI_Init(SPI1, &SPI_InitTypeDefStruct);
 8003a30:	f001 f91e 	bl	8004c70 <SPI_Init>

        SPI_Cmd(SPI1, ENABLE);
 8003a34:	48e2      	ldr	r0, [pc, #904]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003a36:	2101      	movs	r1, #1
 8003a38:	f001 f9a2 	bl	8004d80 <SPI_Cmd>

        //reset low
        GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_RESET); //RESET DISPLAY
 8003a3c:	2090      	movs	r0, #144	; 0x90
 8003a3e:	2104      	movs	r1, #4
 8003a40:	05c0      	lsls	r0, r0, #23
 8003a42:	2200      	movs	r2, #0
 8003a44:	f7fc fc2a 	bl	800029c <GPIO_WriteBit>
        GPIO_WriteBit(SPI1_PORT, SPI1_NSS, Bit_RESET); //?
 8003a48:	2090      	movs	r0, #144	; 0x90
 8003a4a:	2110      	movs	r1, #16
 8003a4c:	05c0      	lsls	r0, r0, #23
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f7fc fc24 	bl	800029c <GPIO_WriteBit>
        GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_RESET); //SELECT DISPLAY
 8003a54:	2090      	movs	r0, #144	; 0x90
 8003a56:	2108      	movs	r1, #8
 8003a58:	05c0      	lsls	r0, r0, #23
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f7fc fc1e 	bl	800029c <GPIO_WriteBit>
        GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_SET); //RESET DISPLAY
 8003a60:	2090      	movs	r0, #144	; 0x90
 8003a62:	2104      	movs	r1, #4
 8003a64:	05c0      	lsls	r0, r0, #23
 8003a66:	2201      	movs	r2, #1
 8003a68:	f7fc fc18 	bl	800029c <GPIO_WriteBit>

static GFXINLINE void setpin_reset(GDisplay *g, bool_t state) {
	(void) g;
	//(void) state;
    if(state)
        SET_RST
 8003a6c:	2090      	movs	r0, #144	; 0x90
 8003a6e:	2104      	movs	r1, #4
 8003a70:	2200      	movs	r2, #0
 8003a72:	05c0      	lsls	r0, r0, #23
 8003a74:	f7fc fc12 	bl	800029c <GPIO_WriteBit>
	// Initialise the board interface
	init_board(g);

	// Hardware reset
	setpin_reset(g, TRUE);
	gfxSleepMilliseconds(20);
 8003a78:	2014      	movs	r0, #20
 8003a7a:	f000 fc99 	bl	80043b0 <gfxSleepMilliseconds>
    else
        CLR_RST
 8003a7e:	2090      	movs	r0, #144	; 0x90
 8003a80:	2104      	movs	r1, #4
 8003a82:	2201      	movs	r2, #1
 8003a84:	05c0      	lsls	r0, r0, #23
 8003a86:	f7fc fc09 	bl	800029c <GPIO_WriteBit>
	setpin_reset(g, FALSE);
	gfxSleepMilliseconds(20);
 8003a8a:	2014      	movs	r0, #20
 8003a8c:	f000 fc90 	bl	80043b0 <gfxSleepMilliseconds>
}

static GFXINLINE void acquire_bus(GDisplay *g) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_RESET);
 8003a90:	2090      	movs	r0, #144	; 0x90
 8003a92:	2108      	movs	r1, #8
 8003a94:	05c0      	lsls	r0, r0, #23
 8003a96:	2200      	movs	r2, #0
 8003a98:	f7fc fc00 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003a9c:	2090      	movs	r0, #144	; 0x90
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	05c0      	lsls	r0, r0, #23
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f7fc fbfa 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003aa8:	48c5      	ldr	r0, [pc, #788]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003aaa:	2102      	movs	r1, #2
 8003aac:	f001 fa42 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d0f9      	beq.n	8003aa8 <gdisp_lld_init+0x12c>
    SPI_SendData8(SPI1, cmd); //send command
 8003ab4:	48c2      	ldr	r0, [pc, #776]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003ab6:	21ae      	movs	r1, #174	; 0xae
 8003ab8:	f001 f9d6 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003abc:	2090      	movs	r0, #144	; 0x90
 8003abe:	2102      	movs	r1, #2
 8003ac0:	05c0      	lsls	r0, r0, #23
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f7fc fbea 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003ac8:	2090      	movs	r0, #144	; 0x90
 8003aca:	2102      	movs	r1, #2
 8003acc:	05c0      	lsls	r0, r0, #23
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f7fc fbe4 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003ad4:	48ba      	ldr	r0, [pc, #744]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	f001 fa2c 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d0f9      	beq.n	8003ad4 <gdisp_lld_init+0x158>
    SPI_SendData8(SPI1, cmd); //send command
 8003ae0:	48b7      	ldr	r0, [pc, #732]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003ae2:	21d5      	movs	r1, #213	; 0xd5
 8003ae4:	f001 f9c0 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003ae8:	2090      	movs	r0, #144	; 0x90
 8003aea:	2102      	movs	r1, #2
 8003aec:	05c0      	lsls	r0, r0, #23
 8003aee:	2201      	movs	r2, #1
 8003af0:	f7fc fbd4 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003af4:	2090      	movs	r0, #144	; 0x90
 8003af6:	2102      	movs	r1, #2
 8003af8:	05c0      	lsls	r0, r0, #23
 8003afa:	2200      	movs	r2, #0
 8003afc:	f7fc fbce 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003b00:	48af      	ldr	r0, [pc, #700]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b02:	2102      	movs	r1, #2
 8003b04:	f001 fa16 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d0f9      	beq.n	8003b00 <gdisp_lld_init+0x184>
    SPI_SendData8(SPI1, cmd); //send command
 8003b0c:	48ac      	ldr	r0, [pc, #688]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b0e:	2180      	movs	r1, #128	; 0x80
 8003b10:	f001 f9aa 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003b14:	2090      	movs	r0, #144	; 0x90
 8003b16:	2102      	movs	r1, #2
 8003b18:	05c0      	lsls	r0, r0, #23
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f7fc fbbe 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003b20:	2090      	movs	r0, #144	; 0x90
 8003b22:	2102      	movs	r1, #2
 8003b24:	05c0      	lsls	r0, r0, #23
 8003b26:	2200      	movs	r2, #0
 8003b28:	f7fc fbb8 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003b2c:	48a4      	ldr	r0, [pc, #656]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b2e:	2102      	movs	r1, #2
 8003b30:	f001 fa00 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d0f9      	beq.n	8003b2c <gdisp_lld_init+0x1b0>
    SPI_SendData8(SPI1, cmd); //send command
 8003b38:	48a1      	ldr	r0, [pc, #644]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b3a:	21a8      	movs	r1, #168	; 0xa8
 8003b3c:	f001 f994 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003b40:	2090      	movs	r0, #144	; 0x90
 8003b42:	2102      	movs	r1, #2
 8003b44:	05c0      	lsls	r0, r0, #23
 8003b46:	2201      	movs	r2, #1
 8003b48:	f7fc fba8 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003b4c:	2090      	movs	r0, #144	; 0x90
 8003b4e:	2102      	movs	r1, #2
 8003b50:	05c0      	lsls	r0, r0, #23
 8003b52:	2200      	movs	r2, #0
 8003b54:	f7fc fba2 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003b58:	4899      	ldr	r0, [pc, #612]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	f001 f9ea 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0f9      	beq.n	8003b58 <gdisp_lld_init+0x1dc>
    SPI_SendData8(SPI1, cmd); //send command
 8003b64:	4896      	ldr	r0, [pc, #600]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b66:	213f      	movs	r1, #63	; 0x3f
 8003b68:	f001 f97e 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003b6c:	2090      	movs	r0, #144	; 0x90
 8003b6e:	2102      	movs	r1, #2
 8003b70:	05c0      	lsls	r0, r0, #23
 8003b72:	2201      	movs	r2, #1
 8003b74:	f7fc fb92 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003b78:	2090      	movs	r0, #144	; 0x90
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	05c0      	lsls	r0, r0, #23
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f7fc fb8c 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003b84:	488e      	ldr	r0, [pc, #568]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b86:	2102      	movs	r1, #2
 8003b88:	f001 f9d4 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d0f9      	beq.n	8003b84 <gdisp_lld_init+0x208>
    SPI_SendData8(SPI1, cmd); //send command
 8003b90:	488b      	ldr	r0, [pc, #556]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003b92:	21d9      	movs	r1, #217	; 0xd9
 8003b94:	f001 f968 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003b98:	2090      	movs	r0, #144	; 0x90
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	05c0      	lsls	r0, r0, #23
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f7fc fb7c 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003ba4:	2090      	movs	r0, #144	; 0x90
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	05c0      	lsls	r0, r0, #23
 8003baa:	2200      	movs	r2, #0
 8003bac:	f7fc fb76 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003bb0:	4883      	ldr	r0, [pc, #524]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	f001 f9be 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d0f9      	beq.n	8003bb0 <gdisp_lld_init+0x234>
    SPI_SendData8(SPI1, cmd); //send command
 8003bbc:	4880      	ldr	r0, [pc, #512]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003bbe:	211f      	movs	r1, #31
 8003bc0:	f001 f952 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003bc4:	2090      	movs	r0, #144	; 0x90
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	05c0      	lsls	r0, r0, #23
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f7fc fb66 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003bd0:	2090      	movs	r0, #144	; 0x90
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	05c0      	lsls	r0, r0, #23
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f7fc fb60 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003bdc:	4878      	ldr	r0, [pc, #480]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003bde:	2102      	movs	r1, #2
 8003be0:	f001 f9a8 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d0f9      	beq.n	8003bdc <gdisp_lld_init+0x260>
    SPI_SendData8(SPI1, cmd); //send command
 8003be8:	4875      	ldr	r0, [pc, #468]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003bea:	21d3      	movs	r1, #211	; 0xd3
 8003bec:	f001 f93c 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003bf0:	2090      	movs	r0, #144	; 0x90
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	05c0      	lsls	r0, r0, #23
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f7fc fb50 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003bfc:	2090      	movs	r0, #144	; 0x90
 8003bfe:	2102      	movs	r1, #2
 8003c00:	05c0      	lsls	r0, r0, #23
 8003c02:	2200      	movs	r2, #0
 8003c04:	f7fc fb4a 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003c08:	486d      	ldr	r0, [pc, #436]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f001 f992 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d0f9      	beq.n	8003c08 <gdisp_lld_init+0x28c>
    SPI_SendData8(SPI1, cmd); //send command
 8003c14:	486a      	ldr	r0, [pc, #424]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c16:	2100      	movs	r1, #0
 8003c18:	f001 f926 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003c1c:	2090      	movs	r0, #144	; 0x90
 8003c1e:	2102      	movs	r1, #2
 8003c20:	05c0      	lsls	r0, r0, #23
 8003c22:	2201      	movs	r2, #1
 8003c24:	f7fc fb3a 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003c28:	2090      	movs	r0, #144	; 0x90
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	05c0      	lsls	r0, r0, #23
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f7fc fb34 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003c34:	4862      	ldr	r0, [pc, #392]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c36:	2102      	movs	r1, #2
 8003c38:	f001 f97c 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d0f9      	beq.n	8003c34 <gdisp_lld_init+0x2b8>
    SPI_SendData8(SPI1, cmd); //send command
 8003c40:	485f      	ldr	r0, [pc, #380]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	f001 f910 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003c48:	2090      	movs	r0, #144	; 0x90
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	05c0      	lsls	r0, r0, #23
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f7fc fb24 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003c54:	2090      	movs	r0, #144	; 0x90
 8003c56:	2102      	movs	r1, #2
 8003c58:	05c0      	lsls	r0, r0, #23
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f7fc fb1e 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003c60:	4857      	ldr	r0, [pc, #348]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c62:	2102      	movs	r1, #2
 8003c64:	f001 f966 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d0f9      	beq.n	8003c60 <gdisp_lld_init+0x2e4>
    SPI_SendData8(SPI1, cmd); //send command
 8003c6c:	4854      	ldr	r0, [pc, #336]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c6e:	218d      	movs	r1, #141	; 0x8d
 8003c70:	f001 f8fa 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003c74:	2090      	movs	r0, #144	; 0x90
 8003c76:	2102      	movs	r1, #2
 8003c78:	05c0      	lsls	r0, r0, #23
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f7fc fb0e 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003c80:	2090      	movs	r0, #144	; 0x90
 8003c82:	2102      	movs	r1, #2
 8003c84:	05c0      	lsls	r0, r0, #23
 8003c86:	2200      	movs	r2, #0
 8003c88:	f7fc fb08 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003c8c:	484c      	ldr	r0, [pc, #304]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c8e:	2102      	movs	r1, #2
 8003c90:	f001 f950 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d0f9      	beq.n	8003c8c <gdisp_lld_init+0x310>
    SPI_SendData8(SPI1, cmd); //send command
 8003c98:	4849      	ldr	r0, [pc, #292]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003c9a:	2114      	movs	r1, #20
 8003c9c:	f001 f8e4 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003ca0:	2090      	movs	r0, #144	; 0x90
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	05c0      	lsls	r0, r0, #23
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f7fc faf8 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003cac:	2090      	movs	r0, #144	; 0x90
 8003cae:	2102      	movs	r1, #2
 8003cb0:	05c0      	lsls	r0, r0, #23
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f7fc faf2 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003cb8:	4841      	ldr	r0, [pc, #260]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003cba:	2102      	movs	r1, #2
 8003cbc:	f001 f93a 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0f9      	beq.n	8003cb8 <gdisp_lld_init+0x33c>
    SPI_SendData8(SPI1, cmd); //send command
 8003cc4:	483e      	ldr	r0, [pc, #248]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003cc6:	2120      	movs	r1, #32
 8003cc8:	f001 f8ce 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003ccc:	2090      	movs	r0, #144	; 0x90
 8003cce:	2102      	movs	r1, #2
 8003cd0:	05c0      	lsls	r0, r0, #23
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f7fc fae2 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003cd8:	2090      	movs	r0, #144	; 0x90
 8003cda:	2102      	movs	r1, #2
 8003cdc:	05c0      	lsls	r0, r0, #23
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f7fc fadc 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003ce4:	4836      	ldr	r0, [pc, #216]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	f001 f924 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d0f9      	beq.n	8003ce4 <gdisp_lld_init+0x368>
    SPI_SendData8(SPI1, cmd); //send command
 8003cf0:	4833      	ldr	r0, [pc, #204]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f001 f8b8 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003cf8:	2090      	movs	r0, #144	; 0x90
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	05c0      	lsls	r0, r0, #23
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f7fc facc 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003d04:	2090      	movs	r0, #144	; 0x90
 8003d06:	2102      	movs	r1, #2
 8003d08:	05c0      	lsls	r0, r0, #23
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f7fc fac6 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003d10:	482b      	ldr	r0, [pc, #172]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003d12:	2102      	movs	r1, #2
 8003d14:	f001 f90e 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d0f9      	beq.n	8003d10 <gdisp_lld_init+0x394>
    SPI_SendData8(SPI1, cmd); //send command
 8003d1c:	4828      	ldr	r0, [pc, #160]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003d1e:	21a1      	movs	r1, #161	; 0xa1
 8003d20:	f001 f8a2 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003d24:	2090      	movs	r0, #144	; 0x90
 8003d26:	2102      	movs	r1, #2
 8003d28:	05c0      	lsls	r0, r0, #23
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f7fc fab6 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003d30:	2090      	movs	r0, #144	; 0x90
 8003d32:	2102      	movs	r1, #2
 8003d34:	05c0      	lsls	r0, r0, #23
 8003d36:	2200      	movs	r2, #0
 8003d38:	f7fc fab0 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003d3c:	4820      	ldr	r0, [pc, #128]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003d3e:	2102      	movs	r1, #2
 8003d40:	f001 f8f8 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d0f9      	beq.n	8003d3c <gdisp_lld_init+0x3c0>
    SPI_SendData8(SPI1, cmd); //send command
 8003d48:	481d      	ldr	r0, [pc, #116]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003d4a:	21c8      	movs	r1, #200	; 0xc8
 8003d4c:	f001 f88c 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003d50:	2090      	movs	r0, #144	; 0x90
 8003d52:	2102      	movs	r1, #2
 8003d54:	05c0      	lsls	r0, r0, #23
 8003d56:	2201      	movs	r2, #1
 8003d58:	f7fc faa0 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003d5c:	2090      	movs	r0, #144	; 0x90
 8003d5e:	2102      	movs	r1, #2
 8003d60:	05c0      	lsls	r0, r0, #23
 8003d62:	2200      	movs	r2, #0
 8003d64:	f7fc fa9a 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003d68:	4815      	ldr	r0, [pc, #84]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	f001 f8e2 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0f9      	beq.n	8003d68 <gdisp_lld_init+0x3ec>
    SPI_SendData8(SPI1, cmd); //send command
 8003d74:	4812      	ldr	r0, [pc, #72]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003d76:	21da      	movs	r1, #218	; 0xda
 8003d78:	f001 f876 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003d7c:	2090      	movs	r0, #144	; 0x90
 8003d7e:	2102      	movs	r1, #2
 8003d80:	05c0      	lsls	r0, r0, #23
 8003d82:	2201      	movs	r2, #1
 8003d84:	f7fc fa8a 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003d88:	2090      	movs	r0, #144	; 0x90
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	05c0      	lsls	r0, r0, #23
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f7fc fa84 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003d94:	480a      	ldr	r0, [pc, #40]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003d96:	2102      	movs	r1, #2
 8003d98:	f001 f8cc 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d0f9      	beq.n	8003d94 <gdisp_lld_init+0x418>
    SPI_SendData8(SPI1, cmd); //send command
 8003da0:	4807      	ldr	r0, [pc, #28]	; (8003dc0 <gdisp_lld_init+0x444>)
 8003da2:	2112      	movs	r1, #18
 8003da4:	f001 f860 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003da8:	2090      	movs	r0, #144	; 0x90
 8003daa:	2102      	movs	r1, #2
 8003dac:	05c0      	lsls	r0, r0, #23
 8003dae:	2201      	movs	r2, #1
 8003db0:	f7fc fa74 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003db4:	2090      	movs	r0, #144	; 0x90
 8003db6:	2102      	movs	r1, #2
 8003db8:	e004      	b.n	8003dc4 <gdisp_lld_init+0x448>
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	ffffc000 	.word	0xffffc000
 8003dc0:	40013000 	.word	0x40013000
 8003dc4:	05c0      	lsls	r0, r0, #23
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f7fc fa68 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003dcc:	488b      	ldr	r0, [pc, #556]	; (8003ffc <gdisp_lld_init+0x680>)
 8003dce:	2102      	movs	r1, #2
 8003dd0:	f001 f8b0 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d0f9      	beq.n	8003dcc <gdisp_lld_init+0x450>
    SPI_SendData8(SPI1, cmd); //send command
 8003dd8:	4888      	ldr	r0, [pc, #544]	; (8003ffc <gdisp_lld_init+0x680>)
 8003dda:	2181      	movs	r1, #129	; 0x81
 8003ddc:	f001 f844 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003de0:	2090      	movs	r0, #144	; 0x90
 8003de2:	2102      	movs	r1, #2
 8003de4:	05c0      	lsls	r0, r0, #23
 8003de6:	2201      	movs	r2, #1
 8003de8:	f7fc fa58 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003dec:	2090      	movs	r0, #144	; 0x90
 8003dee:	2102      	movs	r1, #2
 8003df0:	05c0      	lsls	r0, r0, #23
 8003df2:	2200      	movs	r2, #0
 8003df4:	f7fc fa52 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003df8:	4880      	ldr	r0, [pc, #512]	; (8003ffc <gdisp_lld_init+0x680>)
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	f001 f89a 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d0f9      	beq.n	8003df8 <gdisp_lld_init+0x47c>
    SPI_SendData8(SPI1, cmd); //send command
 8003e04:	487d      	ldr	r0, [pc, #500]	; (8003ffc <gdisp_lld_init+0x680>)
 8003e06:	21fd      	movs	r1, #253	; 0xfd
 8003e08:	f001 f82e 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003e0c:	2090      	movs	r0, #144	; 0x90
 8003e0e:	2102      	movs	r1, #2
 8003e10:	05c0      	lsls	r0, r0, #23
 8003e12:	2201      	movs	r2, #1
 8003e14:	f7fc fa42 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003e18:	2090      	movs	r0, #144	; 0x90
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	05c0      	lsls	r0, r0, #23
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f7fc fa3c 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003e24:	4875      	ldr	r0, [pc, #468]	; (8003ffc <gdisp_lld_init+0x680>)
 8003e26:	2102      	movs	r1, #2
 8003e28:	f001 f884 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d0f9      	beq.n	8003e24 <gdisp_lld_init+0x4a8>
    SPI_SendData8(SPI1, cmd); //send command
 8003e30:	4872      	ldr	r0, [pc, #456]	; (8003ffc <gdisp_lld_init+0x680>)
 8003e32:	21db      	movs	r1, #219	; 0xdb
 8003e34:	f001 f818 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003e38:	2090      	movs	r0, #144	; 0x90
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	05c0      	lsls	r0, r0, #23
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f7fc fa2c 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003e44:	2090      	movs	r0, #144	; 0x90
 8003e46:	2102      	movs	r1, #2
 8003e48:	05c0      	lsls	r0, r0, #23
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f7fc fa26 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003e50:	486a      	ldr	r0, [pc, #424]	; (8003ffc <gdisp_lld_init+0x680>)
 8003e52:	2102      	movs	r1, #2
 8003e54:	f001 f86e 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d0f9      	beq.n	8003e50 <gdisp_lld_init+0x4d4>
    SPI_SendData8(SPI1, cmd); //send command
 8003e5c:	4867      	ldr	r0, [pc, #412]	; (8003ffc <gdisp_lld_init+0x680>)
 8003e5e:	2110      	movs	r1, #16
 8003e60:	f001 f802 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003e64:	2090      	movs	r0, #144	; 0x90
 8003e66:	2102      	movs	r1, #2
 8003e68:	05c0      	lsls	r0, r0, #23
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f7fc fa16 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003e70:	2090      	movs	r0, #144	; 0x90
 8003e72:	2102      	movs	r1, #2
 8003e74:	05c0      	lsls	r0, r0, #23
 8003e76:	2200      	movs	r2, #0
 8003e78:	f7fc fa10 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003e7c:	485f      	ldr	r0, [pc, #380]	; (8003ffc <gdisp_lld_init+0x680>)
 8003e7e:	2102      	movs	r1, #2
 8003e80:	f001 f858 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d0f9      	beq.n	8003e7c <gdisp_lld_init+0x500>
    SPI_SendData8(SPI1, cmd); //send command
 8003e88:	485c      	ldr	r0, [pc, #368]	; (8003ffc <gdisp_lld_init+0x680>)
 8003e8a:	21af      	movs	r1, #175	; 0xaf
 8003e8c:	f000 ffec 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003e90:	2090      	movs	r0, #144	; 0x90
 8003e92:	2102      	movs	r1, #2
 8003e94:	05c0      	lsls	r0, r0, #23
 8003e96:	2201      	movs	r2, #1
 8003e98:	f7fc fa00 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003e9c:	2090      	movs	r0, #144	; 0x90
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	05c0      	lsls	r0, r0, #23
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f7fc f9fa 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003ea8:	4854      	ldr	r0, [pc, #336]	; (8003ffc <gdisp_lld_init+0x680>)
 8003eaa:	2102      	movs	r1, #2
 8003eac:	f001 f842 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d0f9      	beq.n	8003ea8 <gdisp_lld_init+0x52c>
    SPI_SendData8(SPI1, cmd); //send command
 8003eb4:	4851      	ldr	r0, [pc, #324]	; (8003ffc <gdisp_lld_init+0x680>)
 8003eb6:	21a6      	movs	r1, #166	; 0xa6
 8003eb8:	f000 ffd6 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003ebc:	2090      	movs	r0, #144	; 0x90
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	05c0      	lsls	r0, r0, #23
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f7fc f9ea 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003ec8:	2090      	movs	r0, #144	; 0x90
 8003eca:	2102      	movs	r1, #2
 8003ecc:	05c0      	lsls	r0, r0, #23
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f7fc f9e4 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003ed4:	4849      	ldr	r0, [pc, #292]	; (8003ffc <gdisp_lld_init+0x680>)
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	f001 f82c 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d0f9      	beq.n	8003ed4 <gdisp_lld_init+0x558>
    SPI_SendData8(SPI1, cmd); //send command
 8003ee0:	4846      	ldr	r0, [pc, #280]	; (8003ffc <gdisp_lld_init+0x680>)
 8003ee2:	2121      	movs	r1, #33	; 0x21
 8003ee4:	f000 ffc0 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003ee8:	2090      	movs	r0, #144	; 0x90
 8003eea:	2102      	movs	r1, #2
 8003eec:	05c0      	lsls	r0, r0, #23
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f7fc f9d4 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003ef4:	2090      	movs	r0, #144	; 0x90
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	05c0      	lsls	r0, r0, #23
 8003efa:	2200      	movs	r2, #0
 8003efc:	f7fc f9ce 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003f00:	483e      	ldr	r0, [pc, #248]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f02:	2102      	movs	r1, #2
 8003f04:	f001 f816 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d0f9      	beq.n	8003f00 <gdisp_lld_init+0x584>
    SPI_SendData8(SPI1, cmd); //send command
 8003f0c:	483b      	ldr	r0, [pc, #236]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f000 ffaa 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003f14:	2090      	movs	r0, #144	; 0x90
 8003f16:	2102      	movs	r1, #2
 8003f18:	05c0      	lsls	r0, r0, #23
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f7fc f9be 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003f20:	2090      	movs	r0, #144	; 0x90
 8003f22:	2102      	movs	r1, #2
 8003f24:	05c0      	lsls	r0, r0, #23
 8003f26:	2200      	movs	r2, #0
 8003f28:	f7fc f9b8 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003f2c:	4833      	ldr	r0, [pc, #204]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f2e:	2102      	movs	r1, #2
 8003f30:	f001 f800 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d0f9      	beq.n	8003f2c <gdisp_lld_init+0x5b0>
    SPI_SendData8(SPI1, cmd); //send command
 8003f38:	4830      	ldr	r0, [pc, #192]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f3a:	217f      	movs	r1, #127	; 0x7f
 8003f3c:	f000 ff94 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003f40:	2090      	movs	r0, #144	; 0x90
 8003f42:	2102      	movs	r1, #2
 8003f44:	05c0      	lsls	r0, r0, #23
 8003f46:	2201      	movs	r2, #1
 8003f48:	f7fc f9a8 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003f4c:	2090      	movs	r0, #144	; 0x90
 8003f4e:	2102      	movs	r1, #2
 8003f50:	05c0      	lsls	r0, r0, #23
 8003f52:	2200      	movs	r2, #0
 8003f54:	f7fc f9a2 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003f58:	4828      	ldr	r0, [pc, #160]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	f000 ffea 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d0f9      	beq.n	8003f58 <gdisp_lld_init+0x5dc>
    SPI_SendData8(SPI1, cmd); //send command
 8003f64:	4825      	ldr	r0, [pc, #148]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f66:	2122      	movs	r1, #34	; 0x22
 8003f68:	f000 ff7e 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003f6c:	2090      	movs	r0, #144	; 0x90
 8003f6e:	2102      	movs	r1, #2
 8003f70:	05c0      	lsls	r0, r0, #23
 8003f72:	2201      	movs	r2, #1
 8003f74:	f7fc f992 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003f78:	2090      	movs	r0, #144	; 0x90
 8003f7a:	2102      	movs	r1, #2
 8003f7c:	05c0      	lsls	r0, r0, #23
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f7fc f98c 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003f84:	481d      	ldr	r0, [pc, #116]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f86:	2102      	movs	r1, #2
 8003f88:	f000 ffd4 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d0f9      	beq.n	8003f84 <gdisp_lld_init+0x608>
    SPI_SendData8(SPI1, cmd); //send command
 8003f90:	481a      	ldr	r0, [pc, #104]	; (8003ffc <gdisp_lld_init+0x680>)
 8003f92:	2100      	movs	r1, #0
 8003f94:	f000 ff68 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003f98:	2090      	movs	r0, #144	; 0x90
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	05c0      	lsls	r0, r0, #23
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f7fc f97c 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
}

static GFXINLINE void write_cmd(GDisplay *g, uint8_t cmd) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET); //set command
 8003fa4:	2090      	movs	r0, #144	; 0x90
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	05c0      	lsls	r0, r0, #23
 8003faa:	2200      	movs	r2, #0
 8003fac:	f7fc f976 	bl	800029c <GPIO_WriteBit>
    while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 8003fb0:	4812      	ldr	r0, [pc, #72]	; (8003ffc <gdisp_lld_init+0x680>)
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	f000 ffbe 	bl	8004f34 <SPI_I2S_GetFlagStatus>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d0f9      	beq.n	8003fb0 <gdisp_lld_init+0x634>
    SPI_SendData8(SPI1, cmd); //send command
 8003fbc:	480f      	ldr	r0, [pc, #60]	; (8003ffc <gdisp_lld_init+0x680>)
 8003fbe:	2107      	movs	r1, #7
 8003fc0:	f000 ff52 	bl	8004e68 <SPI_SendData8>
    GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003fc4:	2090      	movs	r0, #144	; 0x90
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	05c0      	lsls	r0, r0, #23
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f7fc f966 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_RESET);
}

static GFXINLINE void release_bus(GDisplay *g) {
	(void) g;
    GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
 8003fd0:	2090      	movs	r0, #144	; 0x90
 8003fd2:	2108      	movs	r1, #8
 8003fd4:	05c0      	lsls	r0, r0, #23
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f7fc f960 	bl	800029c <GPIO_WriteBit>

 	// Release the bus
	release_bus(g);

	/* Initialise the GDISP structure */
	g->g.Width = GDISP_SCREEN_WIDTH;
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	8123      	strh	r3, [r4, #8]
	g->g.Height = GDISP_SCREEN_HEIGHT;
 8003fe0:	3b40      	subs	r3, #64	; 0x40
 8003fe2:	8163      	strh	r3, [r4, #10]
	g->g.Orientation = GDISP_ROTATE_0;
 8003fe4:	2300      	movs	r3, #0
	g->g.Powermode = powerOn;
	g->g.Backlight = GDISP_INITIAL_BACKLIGHT;
	g->g.Contrast = GDISP_INITIAL_CONTRAST;
	return TRUE;
}
 8003fe6:	20ff      	movs	r0, #255	; 0xff
	release_bus(g);

	/* Initialise the GDISP structure */
	g->g.Width = GDISP_SCREEN_WIDTH;
	g->g.Height = GDISP_SCREEN_HEIGHT;
	g->g.Orientation = GDISP_ROTATE_0;
 8003fe8:	81a3      	strh	r3, [r4, #12]
	g->g.Powermode = powerOn;
 8003fea:	3303      	adds	r3, #3
 8003fec:	73a3      	strb	r3, [r4, #14]
	g->g.Backlight = GDISP_INITIAL_BACKLIGHT;
 8003fee:	3361      	adds	r3, #97	; 0x61
 8003ff0:	73e3      	strb	r3, [r4, #15]
	g->g.Contrast = GDISP_INITIAL_CONTRAST;
 8003ff2:	7423      	strb	r3, [r4, #16]
	return TRUE;
}
 8003ff4:	b008      	add	sp, #32
 8003ff6:	bc04      	pop	{r2}
 8003ff8:	4690      	mov	r8, r2
 8003ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffc:	40013000 	.word	0x40013000

08004000 <_gosInit>:
/*********************************************************
 * Initialise
 *********************************************************/

void _gosInit(void)
{
 8004000:	b508      	push	{r3, lr}
			COMPILER_WARNING("GOS: Raw32 - Make sure you initialize your hardware and the C runtime before calling gfxInit() in your application!")
		#endif
	#endif

	// Set up the heap allocator
	_gosHeapInit();
 8004002:	f000 fa61 	bl	80044c8 <_gosHeapInit>

	// Start the scheduler
	_gosThreadsInit();
 8004006:	f000 f857 	bl	80040b8 <_gosThreadsInit>
}
 800400a:	bd08      	pop	{r3, pc}

0800400c <_gosPostInit>:

void _gosPostInit(void)
{
}
 800400c:	4770      	bx	lr
 800400e:	46c0      	nop			; (mov r8, r8)

08004010 <_gosDeinit>:

void _gosDeinit(void)
{
	/* ToDo */
}
 8004010:	4770      	bx	lr
 8004012:	46c0      	nop			; (mov r8, r8)

08004014 <gfxHalt>:

/*********************************************************
 * Exit everything functions
 *********************************************************/

void gfxHalt(const char *msg) {
 8004014:	b082      	sub	sp, #8
	#else
		volatile uint32_t	dummy;
		(void)				msg;

		while(1)
			dummy++;
 8004016:	9b01      	ldr	r3, [sp, #4]
 8004018:	3301      	adds	r3, #1
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	e7fb      	b.n	8004016 <gfxHalt+0x2>
 800401e:	46c0      	nop			; (mov r8, r8)

08004020 <gfxExit>:
	#endif
}

void gfxExit(void) {
 8004020:	b082      	sub	sp, #8
		ExitProcess(0);
	#else
		volatile uint32_t	dummy;

		while(1)
			dummy++;
 8004022:	9b01      	ldr	r3, [sp, #4]
 8004024:	3301      	adds	r3, #1
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	e7fb      	b.n	8004022 <gfxExit+0x2>
 800402a:	46c0      	nop			; (mov r8, r8)

0800402c <gfxSystemLock>:
	#define INTERRUPTS_ON()
#endif

void gfxSystemLock(void) {
	INTERRUPTS_OFF();
}
 800402c:	4770      	bx	lr
 800402e:	46c0      	nop			; (mov r8, r8)

08004030 <gfxSystemUnlock>:

void gfxSystemUnlock(void) {
	INTERRUPTS_ON();
}
 8004030:	4770      	bx	lr
 8004032:	46c0      	nop			; (mov r8, r8)

08004034 <gfxMutexInit>:

void gfxMutexInit(gfxMutex *pmutex) {
	pmutex[0] = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	6003      	str	r3, [r0, #0]
}
 8004038:	4770      	bx	lr
 800403a:	46c0      	nop			; (mov r8, r8)

0800403c <gfxMutexExit>:
	pmutex[0] = 1;
	INTERRUPTS_ON();
}

void gfxMutexExit(gfxMutex *pmutex) {
	pmutex[0] = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	6003      	str	r3, [r0, #0]
}
 8004040:	4770      	bx	lr
 8004042:	46c0      	nop			; (mov r8, r8)

08004044 <gfxSemInit>:

void gfxSemInit(gfxSem *psem, semcount_t val, semcount_t limit) {
	psem->cnt = val;
 8004044:	8001      	strh	r1, [r0, #0]
	psem->limit = limit;
 8004046:	8042      	strh	r2, [r0, #2]
}
 8004048:	4770      	bx	lr
 800404a:	46c0      	nop			; (mov r8, r8)

0800404c <gfxSemWaitI>:
	INTERRUPTS_ON();
	return TRUE;
}

bool_t gfxSemWaitI(gfxSem *psem) {
	if (psem->cnt <= 0)
 800404c:	8803      	ldrh	r3, [r0, #0]
 800404e:	b21a      	sxth	r2, r3
 8004050:	2a00      	cmp	r2, #0
 8004052:	dd03      	ble.n	800405c <gfxSemWaitI+0x10>
		return FALSE;
	psem->cnt--;
 8004054:	3b01      	subs	r3, #1
 8004056:	8003      	strh	r3, [r0, #0]
	return TRUE;
 8004058:	20ff      	movs	r0, #255	; 0xff
}
 800405a:	4770      	bx	lr
	return TRUE;
}

bool_t gfxSemWaitI(gfxSem *psem) {
	if (psem->cnt <= 0)
		return FALSE;
 800405c:	2000      	movs	r0, #0
 800405e:	e7fc      	b.n	800405a <gfxSemWaitI+0xe>

08004060 <gfxSemSignal>:
	gfxSemSignalI(psem);
	INTERRUPTS_ON();
}

void gfxSemSignalI(gfxSem *psem) {
	if (psem->cnt < psem->limit)
 8004060:	8803      	ldrh	r3, [r0, #0]
 8004062:	2202      	movs	r2, #2
 8004064:	5e81      	ldrsh	r1, [r0, r2]
 8004066:	b21a      	sxth	r2, r3
 8004068:	4291      	cmp	r1, r2
 800406a:	dd01      	ble.n	8004070 <gfxSemSignal+0x10>
		psem->cnt++;
 800406c:	3301      	adds	r3, #1
 800406e:	8003      	strh	r3, [r0, #0]

void gfxSemSignal(gfxSem *psem) {
	INTERRUPTS_OFF();
	gfxSemSignalI(psem);
	INTERRUPTS_ON();
}
 8004070:	4770      	bx	lr
 8004072:	46c0      	nop			; (mov r8, r8)

08004074 <gfxSemSignalI>:

void gfxSemSignalI(gfxSem *psem) {
	if (psem->cnt < psem->limit)
 8004074:	8803      	ldrh	r3, [r0, #0]
 8004076:	2202      	movs	r2, #2
 8004078:	5e81      	ldrsh	r1, [r0, r2]
 800407a:	b21a      	sxth	r2, r3
 800407c:	4291      	cmp	r1, r2
 800407e:	dd01      	ble.n	8004084 <gfxSemSignalI+0x10>
		psem->cnt++;
 8004080:	3301      	adds	r3, #1
 8004082:	8003      	strh	r3, [r0, #0]
}
 8004084:	4770      	bx	lr
 8004086:	46c0      	nop			; (mov r8, r8)

08004088 <_gfxGetStackState>:
		static uint32_t		jmpmask2;
		static size_t		stackbase;
		static saveloc		*pframeinfo;

		// These two functions are not static to prevent the compiler removing them as functions
		void _gfxGetStackState(void) {
 8004088:	b500      	push	{lr}
			char *c;
			pframeinfo->localptr = (char *)&c;
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <_gfxGetStackState+0x14>)
		static uint32_t		jmpmask2;
		static size_t		stackbase;
		static saveloc		*pframeinfo;

		// These two functions are not static to prevent the compiler removing them as functions
		void _gfxGetStackState(void) {
 800408c:	b083      	sub	sp, #12
			char *c;
			pframeinfo->localptr = (char *)&c;
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	ab01      	add	r3, sp, #4
 8004092:	c008      	stmia	r0!, {r3}
			CXT_SAVE(pframeinfo->cxt);
 8004094:	f001 f8fe 	bl	8005294 <setjmp>
		}
 8004098:	b003      	add	sp, #12
 800409a:	bd00      	pop	{pc}
 800409c:	20000888 	.word	0x20000888

080040a0 <_gfxGetStackStateInFn>:
		void _gfxGetStackStateInFn(void) {
 80040a0:	b538      	push	{r3, r4, r5, lr}
			pframeinfo++;
 80040a2:	4c04      	ldr	r4, [pc, #16]	; (80040b4 <_gfxGetStackStateInFn+0x14>)
 80040a4:	6825      	ldr	r5, [r4, #0]
 80040a6:	1c2b      	adds	r3, r5, #0
 80040a8:	3360      	adds	r3, #96	; 0x60
 80040aa:	6023      	str	r3, [r4, #0]
			_gfxGetStackState();
 80040ac:	f7ff ffec 	bl	8004088 <_gfxGetStackState>
			pframeinfo--;
 80040b0:	6025      	str	r5, [r4, #0]
		}
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20000888 	.word	0x20000888

080040b8 <_gosThreadsInit>:
	#define _gfxStartThread(oldt, newt)		_gfxXSwitch(oldt, newt, TRUE)
#endif
#undef GFX_THREADS_DONE

static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
 80040b8:	2300      	movs	r3, #0
	t = q->head;
	q->head = t->next;
	return t;
}

void _gosThreadsInit(void) {
 80040ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040bc:	4656      	mov	r6, sl
 80040be:	464d      	mov	r5, r9
 80040c0:	4644      	mov	r4, r8
 80040c2:	465f      	mov	r7, fp
	#define _gfxStartThread(oldt, newt)		_gfxXSwitch(oldt, newt, TRUE)
#endif
#undef GFX_THREADS_DONE

static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
 80040c4:	4698      	mov	r8, r3
 80040c6:	4a32      	ldr	r2, [pc, #200]	; (8004190 <_gosThreadsInit+0xd8>)
	t = q->head;
	q->head = t->next;
	return t;
}

void _gosThreadsInit(void) {
 80040c8:	b4f0      	push	{r4, r5, r6, r7}
	#define _gfxStartThread(oldt, newt)		_gfxXSwitch(oldt, newt, TRUE)
#endif
#undef GFX_THREADS_DONE

static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
 80040ca:	6093      	str	r3, [r2, #8]
 80040cc:	6053      	str	r3, [r2, #4]
}

void _gosThreadsInit(void) {
	Qinit(&readyQ);

	mainthread.next = 0;
 80040ce:	60d3      	str	r3, [r2, #12]
	mainthread.size = sizeof(thread);
 80040d0:	3318      	adds	r3, #24
 80040d2:	6153      	str	r3, [r2, #20]
	mainthread.flags = FLG_THD_MAIN;
 80040d4:	3b16      	subs	r3, #22
 80040d6:	6113      	str	r3, [r2, #16]
	mainthread.fn = 0;
 80040d8:	4643      	mov	r3, r8
 80040da:	6193      	str	r3, [r2, #24]
	mainthread.param = 0;
 80040dc:	61d3      	str	r3, [r2, #28]
			size_t		diff;
			char *		framebase;
			saveloc		tmpsaveloc[2];

			// Create the main thread context
			mainthread.cxt = maincxt;
 80040de:	1c13      	adds	r3, r2, #0
	t = q->head;
	q->head = t->next;
	return t;
}

void _gosThreadsInit(void) {
 80040e0:	b0b3      	sub	sp, #204	; 0xcc
			size_t		diff;
			char *		framebase;
			saveloc		tmpsaveloc[2];

			// Create the main thread context
			mainthread.cxt = maincxt;
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	6213      	str	r3, [r2, #32]

			// Allocate a buffer to store our test data
			pframeinfo = tmpsaveloc;
 80040e6:	ab02      	add	r3, sp, #8
 80040e8:	6013      	str	r3, [r2, #0]

			// Get details of the stack frame from within a function
			_gfxGetStackStateInFn();
 80040ea:	f7ff ffd9 	bl	80040a0 <_gfxGetStackStateInFn>

			// Get details of the stack frame outside the function
			_gfxGetStackState();
 80040ee:	f7ff ffcb 	bl	8004088 <_gfxGetStackState>

			/* Work out the frame entries to relocate by treating the jump buffer as an array of pointers */
			stackdirup =  pframeinfo[1].localptr > pframeinfo[0].localptr;
 80040f2:	4b27      	ldr	r3, [pc, #156]	; (8004190 <_gosThreadsInit+0xd8>)
			pout = (char **)pframeinfo[0].cxt;
			pin =  (char **)pframeinfo[1].cxt;
			diff = pframeinfo[0].localptr - pframeinfo[1].localptr;
			framebase = pframeinfo[0].localptr;
			jmpmask1 = jmpmask2 = 0;
			for (i = 0; i < sizeof(jmp_buf)/sizeof(char *); i++, pout++, pin++) {
 80040f4:	2000      	movs	r0, #0

			// Get details of the stack frame outside the function
			_gfxGetStackState();

			/* Work out the frame entries to relocate by treating the jump buffer as an array of pointers */
			stackdirup =  pframeinfo[1].localptr > pframeinfo[0].localptr;
 80040f6:	681c      	ldr	r4, [r3, #0]
 80040f8:	1c26      	adds	r6, r4, #0
 80040fa:	ce08      	ldmia	r6!, {r3}
 80040fc:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80040fe:	469c      	mov	ip, r3
 8004100:	45ac      	cmp	ip, r5
 8004102:	419b      	sbcs	r3, r3
 8004104:	425b      	negs	r3, r3
 8004106:	4699      	mov	r9, r3
 8004108:	464a      	mov	r2, r9
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <_gosThreadsInit+0xdc>)
			pout = (char **)pframeinfo[0].cxt;
			pin =  (char **)pframeinfo[1].cxt;
 800410c:	3464      	adds	r4, #100	; 0x64

			// Get details of the stack frame outside the function
			_gfxGetStackState();

			/* Work out the frame entries to relocate by treating the jump buffer as an array of pointers */
			stackdirup =  pframeinfo[1].localptr > pframeinfo[0].localptr;
 800410e:	469b      	mov	fp, r3
 8004110:	701a      	strb	r2, [r3, #0]
			pout = (char **)pframeinfo[0].cxt;
			pin =  (char **)pframeinfo[1].cxt;
			diff = pframeinfo[0].localptr - pframeinfo[1].localptr;
 8004112:	4663      	mov	r3, ip
			framebase = pframeinfo[0].localptr;
			jmpmask1 = jmpmask2 = 0;
 8004114:	4642      	mov	r2, r8

			/* Work out the frame entries to relocate by treating the jump buffer as an array of pointers */
			stackdirup =  pframeinfo[1].localptr > pframeinfo[0].localptr;
			pout = (char **)pframeinfo[0].cxt;
			pin =  (char **)pframeinfo[1].cxt;
			diff = pframeinfo[0].localptr - pframeinfo[1].localptr;
 8004116:	9301      	str	r3, [sp, #4]
 8004118:	1b5d      	subs	r5, r3, r5
			framebase = pframeinfo[0].localptr;
			jmpmask1 = jmpmask2 = 0;
 800411a:	465b      	mov	r3, fp
 800411c:	605a      	str	r2, [r3, #4]
			for (i = 0; i < sizeof(jmp_buf)/sizeof(char *); i++, pout++, pin++) {
				if ((size_t)(*pout - *pin) == diff) {
					if (i < 32)
						jmpmask1 |= 1 << i;
 800411e:	3201      	adds	r2, #1
			stackdirup =  pframeinfo[1].localptr > pframeinfo[0].localptr;
			pout = (char **)pframeinfo[0].cxt;
			pin =  (char **)pframeinfo[1].cxt;
			diff = pframeinfo[0].localptr - pframeinfo[1].localptr;
			framebase = pframeinfo[0].localptr;
			jmpmask1 = jmpmask2 = 0;
 8004120:	2300      	movs	r3, #0
			for (i = 0; i < sizeof(jmp_buf)/sizeof(char *); i++, pout++, pin++) {
				if ((size_t)(*pout - *pin) == diff) {
					if (i < 32)
						jmpmask1 |= 1 << i;
 8004122:	4692      	mov	sl, r2
 8004124:	e003      	b.n	800412e <_gosThreadsInit+0x76>
 8004126:	3304      	adds	r3, #4
			pout = (char **)pframeinfo[0].cxt;
			pin =  (char **)pframeinfo[1].cxt;
			diff = pframeinfo[0].localptr - pframeinfo[1].localptr;
			framebase = pframeinfo[0].localptr;
			jmpmask1 = jmpmask2 = 0;
			for (i = 0; i < sizeof(jmp_buf)/sizeof(char *); i++, pout++, pin++) {
 8004128:	3001      	adds	r0, #1
 800412a:	2b5c      	cmp	r3, #92	; 0x5c
 800412c:	d013      	beq.n	8004156 <_gosThreadsInit+0x9e>
				if ((size_t)(*pout - *pin) == diff) {
 800412e:	58f1      	ldr	r1, [r6, r3]
 8004130:	58e2      	ldr	r2, [r4, r3]
 8004132:	1a8a      	subs	r2, r1, r2
 8004134:	4295      	cmp	r5, r2
 8004136:	d1f6      	bne.n	8004126 <_gosThreadsInit+0x6e>
					if (i < 32)
						jmpmask1 |= 1 << i;
 8004138:	4652      	mov	r2, sl
 800413a:	4647      	mov	r7, r8
 800413c:	4082      	lsls	r2, r0
 800413e:	4317      	orrs	r7, r2
					else
						jmpmask2 |= 1 << (i-32);

					if (stackdirup) {
 8004140:	464a      	mov	r2, r9
			framebase = pframeinfo[0].localptr;
			jmpmask1 = jmpmask2 = 0;
			for (i = 0; i < sizeof(jmp_buf)/sizeof(char *); i++, pout++, pin++) {
				if ((size_t)(*pout - *pin) == diff) {
					if (i < 32)
						jmpmask1 |= 1 << i;
 8004142:	46b8      	mov	r8, r7
					else
						jmpmask2 |= 1 << (i-32);

					if (stackdirup) {
 8004144:	2a00      	cmp	r2, #0
 8004146:	d01f      	beq.n	8004188 <_gosThreadsInit+0xd0>
 8004148:	458c      	cmp	ip, r1
 800414a:	d9ec      	bls.n	8004126 <_gosThreadsInit+0x6e>
 800414c:	468c      	mov	ip, r1
 800414e:	3304      	adds	r3, #4
			pout = (char **)pframeinfo[0].cxt;
			pin =  (char **)pframeinfo[1].cxt;
			diff = pframeinfo[0].localptr - pframeinfo[1].localptr;
			framebase = pframeinfo[0].localptr;
			jmpmask1 = jmpmask2 = 0;
			for (i = 0; i < sizeof(jmp_buf)/sizeof(char *); i++, pout++, pin++) {
 8004150:	3001      	adds	r0, #1
 8004152:	2b5c      	cmp	r3, #92	; 0x5c
 8004154:	d1eb      	bne.n	800412e <_gosThreadsInit+0x76>
 8004156:	465b      	mov	r3, fp
 8004158:	4642      	mov	r2, r8
 800415a:	609a      	str	r2, [r3, #8]
						if (framebase < *pout)
							framebase = *pout;
					}
				}
			}
			stackbase = stackdirup ? (pframeinfo[0].localptr - framebase) : (framebase - pframeinfo[0].localptr);
 800415c:	4663      	mov	r3, ip
 800415e:	9a01      	ldr	r2, [sp, #4]
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	464a      	mov	r2, r9
 8004164:	2a00      	cmp	r2, #0
 8004166:	d002      	beq.n	800416e <_gosThreadsInit+0xb6>
 8004168:	4662      	mov	r2, ip
 800416a:	9b01      	ldr	r3, [sp, #4]
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	465a      	mov	r2, fp
	mainthread.fn = 0;
	mainthread.param = 0;

	_gfxThreadsInit();

	_gfxCurrentThread = &mainthread;
 8004170:	4f07      	ldr	r7, [pc, #28]	; (8004190 <_gosThreadsInit+0xd8>)
						if (framebase < *pout)
							framebase = *pout;
					}
				}
			}
			stackbase = stackdirup ? (pframeinfo[0].localptr - framebase) : (framebase - pframeinfo[0].localptr);
 8004172:	60d3      	str	r3, [r2, #12]
	mainthread.fn = 0;
	mainthread.param = 0;

	_gfxThreadsInit();

	_gfxCurrentThread = &mainthread;
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <_gosThreadsInit+0xe0>)
 8004176:	370c      	adds	r7, #12
 8004178:	601f      	str	r7, [r3, #0]
}
 800417a:	b033      	add	sp, #204	; 0xcc
 800417c:	bc3c      	pop	{r2, r3, r4, r5}
 800417e:	4690      	mov	r8, r2
 8004180:	4699      	mov	r9, r3
 8004182:	46a2      	mov	sl, r4
 8004184:	46ab      	mov	fp, r5
 8004186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004188:	458c      	cmp	ip, r1
 800418a:	d2cc      	bcs.n	8004126 <_gosThreadsInit+0x6e>
 800418c:	468c      	mov	ip, r1
 800418e:	e7de      	b.n	800414e <_gosThreadsInit+0x96>
 8004190:	20000888 	.word	0x20000888
 8004194:	20000908 	.word	0x20000908
 8004198:	20000998 	.word	0x20000998

0800419c <gfxThreadMe>:

gfxThreadHandle gfxThreadMe(void) {
	return (gfxThreadHandle)_gfxCurrentThread;
 800419c:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <gfxThreadMe+0x8>)
 800419e:	6818      	ldr	r0, [r3, #0]
}
 80041a0:	4770      	bx	lr
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	20000998 	.word	0x20000998

080041a8 <gfxThreadExit>:
	thread	*me;

	// Save the results in case someone is waiting
	me = _gfxCurrentThread;
	me->param = (void *)ret;
	me->flags |= FLG_THD_DEAD;
 80041a8:	2204      	movs	r2, #4
	_gfxCurrentThread = Qpop(&readyQ);
	_gfxTaskSwitch(me, _gfxCurrentThread);
}

// This routine is not currently public - but it could be.
void gfxThreadExit(threadreturn_t ret) {
 80041aa:	b538      	push	{r3, r4, r5, lr}
	thread	*me;

	// Save the results in case someone is waiting
	me = _gfxCurrentThread;
 80041ac:	4d15      	ldr	r5, [pc, #84]	; (8004204 <gfxThreadExit+0x5c>)
 80041ae:	682c      	ldr	r4, [r5, #0]
	me->param = (void *)ret;
	me->flags |= FLG_THD_DEAD;
 80041b0:	6863      	ldr	r3, [r4, #4]
void gfxThreadExit(threadreturn_t ret) {
	thread	*me;

	// Save the results in case someone is waiting
	me = _gfxCurrentThread;
	me->param = (void *)ret;
 80041b2:	6120      	str	r0, [r4, #16]
	me->flags |= FLG_THD_DEAD;
 80041b4:	431a      	orrs	r2, r3
 80041b6:	6062      	str	r2, [r4, #4]

	// Add us to the dead list if we need deallocation as we can't free ourselves.
	// If someone is waiting on the thread they will do the cleanup.
	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
 80041b8:	2209      	movs	r2, #9
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d00b      	beq.n	80041d8 <gfxThreadExit+0x30>
}

static thread *Qpop(threadQ * q) {
	struct thread * t;

	if (!q->head)
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <gfxThreadExit+0x60>)
 80041c2:	6859      	ldr	r1, [r3, #4]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d014      	beq.n	80041f2 <gfxThreadExit+0x4a>
		return 0;
	t = q->head;
	q->head = t->next;
 80041c8:	680a      	ldr	r2, [r1, #0]
	// If someone is waiting on the thread they will do the cleanup.
	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
		Qadd(&deadQ, me);

	// Set the next thread. Exit if it was the last thread
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
 80041ca:	6029      	str	r1, [r5, #0]
	struct thread * t;

	if (!q->head)
		return 0;
	t = q->head;
	q->head = t->next;
 80041cc:	605a      	str	r2, [r3, #4]
	// Set the next thread. Exit if it was the last thread
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
		gfxExit();

	// Switch to the new thread
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80041ce:	6960      	ldr	r0, [r4, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f000 f81d 	bl	8004210 <_gfxXSwitch.isra.1>

	// We never get back here as we didn't re-queue ourselves
}
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
}

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	6023      	str	r3, [r4, #0]
	if (q->head) {
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <gfxThreadExit+0x64>)
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	d00b      	beq.n	80041fc <gfxThreadExit+0x54>
		q->tail->next = t;
 80041e4:	695a      	ldr	r2, [r3, #20]
		q->tail = t;
 80041e6:	615c      	str	r4, [r3, #20]
}

static thread *Qpop(threadQ * q) {
	struct thread * t;

	if (!q->head)
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <gfxThreadExit+0x60>)
}

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
	if (q->head) {
		q->tail->next = t;
 80041ea:	6014      	str	r4, [r2, #0]
}

static thread *Qpop(threadQ * q) {
	struct thread * t;

	if (!q->head)
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d1ea      	bne.n	80041c8 <gfxThreadExit+0x20>
	// If someone is waiting on the thread they will do the cleanup.
	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
		Qadd(&deadQ, me);

	// Set the next thread. Exit if it was the last thread
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
 80041f2:	6029      	str	r1, [r5, #0]
		gfxExit();
 80041f4:	f7ff ff14 	bl	8004020 <gfxExit>
 80041f8:	6829      	ldr	r1, [r5, #0]
 80041fa:	e7e8      	b.n	80041ce <gfxThreadExit+0x26>
	t->next = 0;
	if (q->head) {
		q->tail->next = t;
		q->tail = t;
	} else
		q->head = q->tail = t;
 80041fc:	615c      	str	r4, [r3, #20]
 80041fe:	611c      	str	r4, [r3, #16]
 8004200:	e7de      	b.n	80041c0 <gfxThreadExit+0x18>
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20000998 	.word	0x20000998
 8004208:	20000888 	.word	0x20000888
 800420c:	20000908 	.word	0x20000908

08004210 <_gfxXSwitch.isra.1>:
				if ((i & 1))
					*s += diff;
			}
		#endif
	}
	static void _gfxXSwitch(thread *oldt, thread *newt, bool_t doBuildFrame) {
 8004210:	b510      	push	{r4, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	9101      	str	r1, [sp, #4]
 8004216:	9202      	str	r2, [sp, #8]

		// Save the old context
		if (CXT_SAVE(oldt->cxt)) return;
 8004218:	f001 f83c 	bl	8005294 <setjmp>
 800421c:	2800      	cmp	r0, #0
 800421e:	d001      	beq.n	8004224 <_gfxXSwitch.isra.1+0x14>
			_gfxAdjustCxt(newt);
		}

		// Start the new context
		CXT_RESTORE(newt->cxt, 1);
	}
 8004220:	b008      	add	sp, #32
 8004222:	bd10      	pop	{r4, pc}

		// Save the old context
		if (CXT_SAVE(oldt->cxt)) return;

		// Do we need to build a new context?
		if (doBuildFrame) {
 8004224:	9b02      	ldr	r3, [sp, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d04a      	beq.n	80042c0 <_gfxXSwitch.isra.1+0xb0>

			// Save our existing context as a starting point for the new context
			newt->cxt = newt+1;
 800422a:	9b01      	ldr	r3, [sp, #4]
 800422c:	1c18      	adds	r0, r3, #0
 800422e:	3018      	adds	r0, #24
 8004230:	6158      	str	r0, [r3, #20]
			if (CXT_SAVE(newt->cxt)) {
 8004232:	f001 f82f 	bl	8005294 <setjmp>
 8004236:	2800      	cmp	r0, #0
 8004238:	d006      	beq.n	8004248 <_gfxXSwitch.isra.1+0x38>

				// We can't use any of the above function parameters here
				//	as we are on a different stack.

				// Run the users function.
				gfxThreadExit(_gfxCurrentThread->fn(_gfxCurrentThread->param));
 800423a:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <_gfxXSwitch.isra.1+0xd8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	6918      	ldr	r0, [r3, #16]
 8004242:	4790      	blx	r2
 8004244:	f7ff ffb0 	bl	80041a8 <gfxThreadExit>
		char *	nf;
		int		diff;
		uint32_t	i;

		// Copy the stack frame
		s = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	9307      	str	r3, [sp, #28]
		#if AUTO_DETECT_STACKFRAME
			if (STACK_DIR_UP) {					// Stack grows up
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <_gfxXSwitch.isra.1+0xdc>)
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	2a00      	cmp	r2, #0
 8004252:	d03a      	beq.n	80042ca <_gfxXSwitch.isra.1+0xba>
				nf = (char *)(t) + sizeof(thread) + sizeof(jmp_buf) + STACK_BASE;
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	9801      	ldr	r0, [sp, #4]
 8004258:	1c14      	adds	r4, r2, #0
 800425a:	4684      	mov	ip, r0
				memcpy(t+1, (char *)&s - STACK_BASE, STACK_BASE+sizeof(char *));
 800425c:	a907      	add	r1, sp, #28

		// Copy the stack frame
		s = 0;
		#if AUTO_DETECT_STACKFRAME
			if (STACK_DIR_UP) {					// Stack grows up
				nf = (char *)(t) + sizeof(thread) + sizeof(jmp_buf) + STACK_BASE;
 800425e:	3474      	adds	r4, #116	; 0x74
				memcpy(t+1, (char *)&s - STACK_BASE, STACK_BASE+sizeof(char *));
 8004260:	1a89      	subs	r1, r1, r2
 8004262:	3018      	adds	r0, #24
 8004264:	3204      	adds	r2, #4

		// Copy the stack frame
		s = 0;
		#if AUTO_DETECT_STACKFRAME
			if (STACK_DIR_UP) {					// Stack grows up
				nf = (char *)(t) + sizeof(thread) + sizeof(jmp_buf) + STACK_BASE;
 8004266:	4464      	add	r4, ip
				memcpy(t+1, (char *)&s - STACK_BASE, STACK_BASE+sizeof(char *));
 8004268:	f001 fedc 	bl	8006024 <memcpy>
			nf = (char *)(t) + t->size - (STACK_BASE + sizeof(char *));
			memcpy(nf, &s, STACK_BASE+sizeof(char *));
		#endif

		// Relocate the context data
		s = (char **)(t->cxt);
 800426c:	9b01      	ldr	r3, [sp, #4]
		diff = nf - (char *)&s;

		// Relocate the elements we know need to be relocated
		for (i = MASK1; i ; i >>= 1, s++) {
			if ((i & 1))
 800426e:	2001      	movs	r0, #1
			nf = (char *)(t) + t->size - (STACK_BASE + sizeof(char *));
			memcpy(nf, &s, STACK_BASE+sizeof(char *));
		#endif

		// Relocate the context data
		s = (char **)(t->cxt);
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	9307      	str	r3, [sp, #28]
		diff = nf - (char *)&s;
 8004276:	ab07      	add	r3, sp, #28
 8004278:	1ae4      	subs	r4, r4, r3

		// Relocate the elements we know need to be relocated
		for (i = MASK1; i ; i >>= 1, s++) {
 800427a:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <_gfxXSwitch.isra.1+0xdc>)
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	9b03      	ldr	r3, [sp, #12]
 8004280:	2a00      	cmp	r2, #0
 8004282:	d009      	beq.n	8004298 <_gfxXSwitch.isra.1+0x88>
			if ((i & 1))
 8004284:	4210      	tst	r0, r2
 8004286:	d003      	beq.n	8004290 <_gfxXSwitch.isra.1+0x80>
				*s += diff;
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	1909      	adds	r1, r1, r4
 800428c:	6019      	str	r1, [r3, #0]
 800428e:	9b07      	ldr	r3, [sp, #28]
		// Relocate the context data
		s = (char **)(t->cxt);
		diff = nf - (char *)&s;

		// Relocate the elements we know need to be relocated
		for (i = MASK1; i ; i >>= 1, s++) {
 8004290:	3304      	adds	r3, #4
 8004292:	0852      	lsrs	r2, r2, #1
 8004294:	9307      	str	r3, [sp, #28]
 8004296:	d1f5      	bne.n	8004284 <_gfxXSwitch.isra.1+0x74>
			if ((i & 1))
				*s += diff;
		}
		#ifdef MASK2
			s = (char **)(t->cxt)+32;
 8004298:	9b01      	ldr	r3, [sp, #4]
			for (i = MASK2; i ; i >>= 1, s++) {
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <_gfxXSwitch.isra.1+0xdc>)
		for (i = MASK1; i ; i >>= 1, s++) {
			if ((i & 1))
				*s += diff;
		}
		#ifdef MASK2
			s = (char **)(t->cxt)+32;
 800429c:	695b      	ldr	r3, [r3, #20]
			for (i = MASK2; i ; i >>= 1, s++) {
 800429e:	6852      	ldr	r2, [r2, #4]
		for (i = MASK1; i ; i >>= 1, s++) {
			if ((i & 1))
				*s += diff;
		}
		#ifdef MASK2
			s = (char **)(t->cxt)+32;
 80042a0:	9305      	str	r3, [sp, #20]
 80042a2:	3380      	adds	r3, #128	; 0x80
 80042a4:	9307      	str	r3, [sp, #28]
			for (i = MASK2; i ; i >>= 1, s++) {
				if ((i & 1))
 80042a6:	2001      	movs	r0, #1
			if ((i & 1))
				*s += diff;
		}
		#ifdef MASK2
			s = (char **)(t->cxt)+32;
			for (i = MASK2; i ; i >>= 1, s++) {
 80042a8:	2a00      	cmp	r2, #0
 80042aa:	d009      	beq.n	80042c0 <_gfxXSwitch.isra.1+0xb0>
				if ((i & 1))
 80042ac:	4210      	tst	r0, r2
 80042ae:	d003      	beq.n	80042b8 <_gfxXSwitch.isra.1+0xa8>
					*s += diff;
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	1909      	adds	r1, r1, r4
 80042b4:	6019      	str	r1, [r3, #0]
 80042b6:	9b07      	ldr	r3, [sp, #28]
			if ((i & 1))
				*s += diff;
		}
		#ifdef MASK2
			s = (char **)(t->cxt)+32;
			for (i = MASK2; i ; i >>= 1, s++) {
 80042b8:	3304      	adds	r3, #4
 80042ba:	0852      	lsrs	r2, r2, #1
 80042bc:	9307      	str	r3, [sp, #28]
 80042be:	d1f5      	bne.n	80042ac <_gfxXSwitch.isra.1+0x9c>
			// Adjust the new context so the stack references are correct
			_gfxAdjustCxt(newt);
		}

		// Start the new context
		CXT_RESTORE(newt->cxt, 1);
 80042c0:	9b01      	ldr	r3, [sp, #4]
 80042c2:	2101      	movs	r1, #1
 80042c4:	6958      	ldr	r0, [r3, #20]
 80042c6:	f000 fff1 	bl	80052ac <longjmp>
		#if AUTO_DETECT_STACKFRAME
			if (STACK_DIR_UP) {					// Stack grows up
				nf = (char *)(t) + sizeof(thread) + sizeof(jmp_buf) + STACK_BASE;
				memcpy(t+1, (char *)&s - STACK_BASE, STACK_BASE+sizeof(char *));
			} else {							// Stack grows down
				nf = (char *)(t) + t->size - (STACK_BASE + sizeof(char *));
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	9b01      	ldr	r3, [sp, #4]
 80042ce:	469c      	mov	ip, r3
 80042d0:	6899      	ldr	r1, [r3, #8]
 80042d2:	1f0c      	subs	r4, r1, #4
 80042d4:	1aa4      	subs	r4, r4, r2
 80042d6:	4464      	add	r4, ip
 80042d8:	9104      	str	r1, [sp, #16]
				memcpy(nf, &s, STACK_BASE+sizeof(char *));
 80042da:	3204      	adds	r2, #4
 80042dc:	1c20      	adds	r0, r4, #0
 80042de:	a907      	add	r1, sp, #28
 80042e0:	f001 fea0 	bl	8006024 <memcpy>
 80042e4:	e7c2      	b.n	800426c <_gfxXSwitch.isra.1+0x5c>
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	20000998 	.word	0x20000998
 80042ec:	20000908 	.word	0x20000908

080042f0 <gfxYield>:

	while ((p = Qpop(&deadQ)))
		gfxFree(p);
}

void gfxYield(void) {
 80042f0:	b510      	push	{r4, lr}
}

static thread *Qpop(threadQ * q) {
	struct thread * t;

	if (!q->head)
 80042f2:	4c0e      	ldr	r4, [pc, #56]	; (800432c <gfxYield+0x3c>)
 80042f4:	6920      	ldr	r0, [r4, #16]
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d006      	beq.n	8004308 <gfxYield+0x18>
		return 0;
	t = q->head;
	q->head = t->next;
 80042fa:	6803      	ldr	r3, [r0, #0]
 80042fc:	6123      	str	r3, [r4, #16]
// Check if there are dead processes to deallocate
static void cleanUpDeadThreads(void) {
	thread *p;

	while ((p = Qpop(&deadQ)))
		gfxFree(p);
 80042fe:	f000 f8ef 	bl	80044e0 <gfxFree>
}

static thread *Qpop(threadQ * q) {
	struct thread * t;

	if (!q->head)
 8004302:	6920      	ldr	r0, [r4, #16]
 8004304:	2800      	cmp	r0, #0
 8004306:	d1f8      	bne.n	80042fa <gfxYield+0xa>

	// Clean up zombies
	cleanUpDeadThreads();

	// Is there another thread to run?
	if (!readyQ.head)
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <gfxYield+0x40>)
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	2900      	cmp	r1, #0
 800430e:	d00c      	beq.n	800432a <gfxYield+0x3a>
		return;

	Qadd(&readyQ, me = _gfxCurrentThread);
 8004310:	4c08      	ldr	r4, [pc, #32]	; (8004334 <gfxYield+0x44>)
 8004312:	6822      	ldr	r2, [r4, #0]
static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
}

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
 8004314:	6010      	str	r0, [r2, #0]
	if (q->head) {
		q->tail->next = t;
 8004316:	6898      	ldr	r0, [r3, #8]
 8004318:	6002      	str	r2, [r0, #0]
	struct thread * t;

	if (!q->head)
		return 0;
	t = q->head;
	q->head = t->next;
 800431a:	6808      	ldr	r0, [r1, #0]

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
	if (q->head) {
		q->tail->next = t;
		q->tail = t;
 800431c:	609a      	str	r2, [r3, #8]
	struct thread * t;

	if (!q->head)
		return 0;
	t = q->head;
	q->head = t->next;
 800431e:	6058      	str	r0, [r3, #4]
	if (!readyQ.head)
		return;

	Qadd(&readyQ, me = _gfxCurrentThread);
	_gfxCurrentThread = Qpop(&readyQ);
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004320:	6950      	ldr	r0, [r2, #20]
 8004322:	2200      	movs	r2, #0
	// Is there another thread to run?
	if (!readyQ.head)
		return;

	Qadd(&readyQ, me = _gfxCurrentThread);
	_gfxCurrentThread = Qpop(&readyQ);
 8004324:	6021      	str	r1, [r4, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004326:	f7ff ff73 	bl	8004210 <_gfxXSwitch.isra.1>
}
 800432a:	bd10      	pop	{r4, pc}
 800432c:	20000908 	.word	0x20000908
 8004330:	20000888 	.word	0x20000888
 8004334:	20000998 	.word	0x20000998

08004338 <gfxMutexEnter>:
	pmutex[0] = 0;
}

void gfxMutexEnter(gfxMutex *pmutex) {
	INTERRUPTS_OFF();
	while (pmutex[0]) {
 8004338:	6803      	ldr	r3, [r0, #0]

void gfxMutexInit(gfxMutex *pmutex) {
	pmutex[0] = 0;
}

void gfxMutexEnter(gfxMutex *pmutex) {
 800433a:	b510      	push	{r4, lr}
 800433c:	1c04      	adds	r4, r0, #0
	INTERRUPTS_OFF();
	while (pmutex[0]) {
 800433e:	2b00      	cmp	r3, #0
 8004340:	d004      	beq.n	800434c <gfxMutexEnter+0x14>
		INTERRUPTS_ON();
		gfxYield();
 8004342:	f7ff ffd5 	bl	80042f0 <gfxYield>
	pmutex[0] = 0;
}

void gfxMutexEnter(gfxMutex *pmutex) {
	INTERRUPTS_OFF();
	while (pmutex[0]) {
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1fa      	bne.n	8004342 <gfxMutexEnter+0xa>
		INTERRUPTS_ON();
		gfxYield();
		INTERRUPTS_OFF();
	}
	pmutex[0] = 1;
 800434c:	2301      	movs	r3, #1
 800434e:	6023      	str	r3, [r4, #0]
	INTERRUPTS_ON();
}
 8004350:	bd10      	pop	{r4, pc}
 8004352:	46c0      	nop			; (mov r8, r8)

08004354 <gfxSemWait>:
void gfxSemInit(gfxSem *psem, semcount_t val, semcount_t limit) {
	psem->cnt = val;
	psem->limit = limit;
}

bool_t gfxSemWait(gfxSem *psem, delaytime_t ms) {
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	1c05      	adds	r5, r0, #0
	systemticks_t	starttm, delay;

	// Convert our delay to ticks
	starttm = 0;
	switch (ms) {
 8004358:	2900      	cmp	r1, #0
 800435a:	d026      	beq.n	80043aa <gfxSemWait+0x56>
 800435c:	1c4b      	adds	r3, r1, #1
 800435e:	d118      	bne.n	8004392 <gfxSemWait+0x3e>
	case TIME_IMMEDIATE:
		delay = TIME_IMMEDIATE;
		break;
	case TIME_INFINITE:
		delay = TIME_INFINITE;
 8004360:	1c0c      	adds	r4, r1, #0

bool_t gfxSemWait(gfxSem *psem, delaytime_t ms) {
	systemticks_t	starttm, delay;

	// Convert our delay to ticks
	starttm = 0;
 8004362:	2600      	movs	r6, #0
		if (!delay) delay = 1;
		starttm = gfxSystemTicks();
	}

	INTERRUPTS_OFF();
	while (psem->cnt <= 0) {
 8004364:	882b      	ldrh	r3, [r5, #0]
 8004366:	b21a      	sxth	r2, r3
 8004368:	2a00      	cmp	r2, #0
 800436a:	dc0e      	bgt.n	800438a <gfxSemWait+0x36>
		INTERRUPTS_ON();
		// Check if we have exceeded the defined delay
		switch (delay) {
 800436c:	2c00      	cmp	r4, #0
 800436e:	d01a      	beq.n	80043a6 <gfxSemWait+0x52>
 8004370:	1c63      	adds	r3, r4, #1
 8004372:	d004      	beq.n	800437e <gfxSemWait+0x2a>
		case TIME_IMMEDIATE:
			return FALSE;
		case TIME_INFINITE:
			break;
		default:
			if (gfxSystemTicks() - starttm >= delay)
 8004374:	f000 ffa8 	bl	80052c8 <gfxSystemTicks>
 8004378:	1b80      	subs	r0, r0, r6
 800437a:	42a0      	cmp	r0, r4
 800437c:	d213      	bcs.n	80043a6 <gfxSemWait+0x52>
				return FALSE;
			break;
		}
		gfxYield();
 800437e:	f7ff ffb7 	bl	80042f0 <gfxYield>
		if (!delay) delay = 1;
		starttm = gfxSystemTicks();
	}

	INTERRUPTS_OFF();
	while (psem->cnt <= 0) {
 8004382:	882b      	ldrh	r3, [r5, #0]
 8004384:	b21a      	sxth	r2, r3
 8004386:	2a00      	cmp	r2, #0
 8004388:	ddf0      	ble.n	800436c <gfxSemWait+0x18>
			break;
		}
		gfxYield();
		INTERRUPTS_OFF();
	}
	psem->cnt--;
 800438a:	3b01      	subs	r3, #1
 800438c:	802b      	strh	r3, [r5, #0]
	INTERRUPTS_ON();
	return TRUE;
 800438e:	20ff      	movs	r0, #255	; 0xff
 8004390:	e00a      	b.n	80043a8 <gfxSemWait+0x54>
		break;
	case TIME_INFINITE:
		delay = TIME_INFINITE;
		break;
	default:
		delay = gfxMillisecondsToTicks(ms);
 8004392:	1c08      	adds	r0, r1, #0
 8004394:	f000 ff9e 	bl	80052d4 <gfxMillisecondsToTicks>
 8004398:	1e04      	subs	r4, r0, #0
		if (!delay) delay = 1;
 800439a:	d100      	bne.n	800439e <gfxSemWait+0x4a>
 800439c:	3401      	adds	r4, #1
		starttm = gfxSystemTicks();
 800439e:	f000 ff93 	bl	80052c8 <gfxSystemTicks>
 80043a2:	1c06      	adds	r6, r0, #0
 80043a4:	e7de      	b.n	8004364 <gfxSemWait+0x10>
			return FALSE;
		case TIME_INFINITE:
			break;
		default:
			if (gfxSystemTicks() - starttm >= delay)
				return FALSE;
 80043a6:	2000      	movs	r0, #0
		INTERRUPTS_OFF();
	}
	psem->cnt--;
	INTERRUPTS_ON();
	return TRUE;
}
 80043a8:	bd70      	pop	{r4, r5, r6, pc}

	// Convert our delay to ticks
	starttm = 0;
	switch (ms) {
	case TIME_IMMEDIATE:
		delay = TIME_IMMEDIATE;
 80043aa:	2400      	movs	r4, #0

bool_t gfxSemWait(gfxSem *psem, delaytime_t ms) {
	systemticks_t	starttm, delay;

	// Convert our delay to ticks
	starttm = 0;
 80043ac:	2600      	movs	r6, #0
 80043ae:	e7d9      	b.n	8004364 <gfxSemWait+0x10>

080043b0 <gfxSleepMilliseconds>:

/*********************************************************
 * Sleep functions
 *********************************************************/

void gfxSleepMilliseconds(delaytime_t ms) {
 80043b0:	b538      	push	{r3, r4, r5, lr}
	systemticks_t	starttm, delay;

	// Safety first
	switch (ms) {
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d00e      	beq.n	80043d4 <gfxSleepMilliseconds+0x24>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d00d      	beq.n	80043d6 <gfxSleepMilliseconds+0x26>
			gfxYield();
		return;
	}

	// Convert our delay to ticks
	delay = gfxMillisecondsToTicks(ms);
 80043ba:	f000 ff8b 	bl	80052d4 <gfxMillisecondsToTicks>
 80043be:	1c05      	adds	r5, r0, #0
	starttm = gfxSystemTicks();
 80043c0:	f000 ff82 	bl	80052c8 <gfxSystemTicks>
 80043c4:	1c04      	adds	r4, r0, #0

	do {
		gfxYield();
 80043c6:	f7ff ff93 	bl	80042f0 <gfxYield>
	} while (gfxSystemTicks() - starttm < delay);
 80043ca:	f000 ff7d 	bl	80052c8 <gfxSystemTicks>
 80043ce:	1b00      	subs	r0, r0, r4
 80043d0:	4285      	cmp	r5, r0
 80043d2:	d8f8      	bhi.n	80043c6 <gfxSleepMilliseconds+0x16>
}
 80043d4:	bd38      	pop	{r3, r4, r5, pc}
	switch (ms) {
	case TIME_IMMEDIATE:
		return;
	case TIME_INFINITE:
		while(1)
			gfxYield();
 80043d6:	f7ff ff8b 	bl	80042f0 <gfxYield>
 80043da:	f7ff ff89 	bl	80042f0 <gfxYield>
 80043de:	e7fa      	b.n	80043d6 <gfxSleepMilliseconds+0x26>

080043e0 <gfxSleepMicroseconds>:
	do {
		gfxYield();
	} while (gfxSystemTicks() - starttm < delay);
}

void gfxSleepMicroseconds(delaytime_t ms) {
 80043e0:	b538      	push	{r3, r4, r5, lr}
	systemticks_t	starttm, delay;

	// Safety first
	switch (ms) {
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d012      	beq.n	800440c <gfxSleepMicroseconds+0x2c>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d011      	beq.n	800440e <gfxSleepMicroseconds+0x2e>
			gfxYield();
		return;
	}

	// Convert our delay to ticks
	delay = gfxMillisecondsToTicks(ms/1000);
 80043ea:	21fa      	movs	r1, #250	; 0xfa
 80043ec:	0089      	lsls	r1, r1, #2
 80043ee:	f000 fdcf 	bl	8004f90 <__aeabi_uidiv>
 80043f2:	f000 ff6f 	bl	80052d4 <gfxMillisecondsToTicks>
 80043f6:	1c05      	adds	r5, r0, #0
	starttm = gfxSystemTicks();
 80043f8:	f000 ff66 	bl	80052c8 <gfxSystemTicks>
 80043fc:	1c04      	adds	r4, r0, #0

	do {
		gfxYield();
 80043fe:	f7ff ff77 	bl	80042f0 <gfxYield>
	} while (gfxSystemTicks() - starttm < delay);
 8004402:	f000 ff61 	bl	80052c8 <gfxSystemTicks>
 8004406:	1b00      	subs	r0, r0, r4
 8004408:	4285      	cmp	r5, r0
 800440a:	d8f8      	bhi.n	80043fe <gfxSleepMicroseconds+0x1e>
}
 800440c:	bd38      	pop	{r3, r4, r5, pc}
	switch (ms) {
	case TIME_IMMEDIATE:
		return;
	case TIME_INFINITE:
		while(1)
			gfxYield();
 800440e:	f7ff ff6f 	bl	80042f0 <gfxYield>
 8004412:	f7ff ff6d 	bl	80042f0 <gfxYield>
 8004416:	e7fa      	b.n	800440e <gfxSleepMicroseconds+0x2e>

08004418 <gfxThreadCreate>:
	_gfxTaskSwitch(me, _gfxCurrentThread);

	// We never get back here as we didn't re-queue ourselves
}

gfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param) {
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	1c04      	adds	r4, r0, #0
 800441c:	1c0d      	adds	r5, r1, #0
 800441e:	1c1e      	adds	r6, r3, #0
	thread *	t;
	thread *	me;
	(void)		prio;

	// Ensure we have a minimum stack size
	if (stacksz < sizeof(thread)+64) {
 8004420:	2957      	cmp	r1, #87	; 0x57
 8004422:	d91a      	bls.n	800445a <gfxThreadCreate+0x42>
		stacksz = sizeof(thread)+64;
		stackarea = 0;
	}

	if (stackarea) {
 8004424:	2800      	cmp	r0, #0
 8004426:	d019      	beq.n	800445c <gfxThreadCreate+0x44>
		t = (thread *)stackarea;
		t->flags = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	6043      	str	r3, [r0, #4]
static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
}

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
 800442c:	2200      	movs	r2, #0
			return 0;
		t->flags = FLG_THD_ALLOC;
	}
	t->size = stacksz;
	t->fn = fn;
	t->param = param;
 800442e:	9b04      	ldr	r3, [sp, #16]

	// Add the current thread to the queue because we are starting a new thread.
	me = _gfxCurrentThread;
 8004430:	4911      	ldr	r1, [pc, #68]	; (8004478 <gfxThreadCreate+0x60>)
			return 0;
		t->flags = FLG_THD_ALLOC;
	}
	t->size = stacksz;
	t->fn = fn;
	t->param = param;
 8004432:	6123      	str	r3, [r4, #16]

	// Add the current thread to the queue because we are starting a new thread.
	me = _gfxCurrentThread;
 8004434:	680b      	ldr	r3, [r1, #0]
		t = (thread *)gfxAlloc(stacksz);
		if (!t)
			return 0;
		t->flags = FLG_THD_ALLOC;
	}
	t->size = stacksz;
 8004436:	60a5      	str	r5, [r4, #8]
	t->fn = fn;
 8004438:	60e6      	str	r6, [r4, #12]
static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
}

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
 800443a:	601a      	str	r2, [r3, #0]
	if (q->head) {
 800443c:	4a0f      	ldr	r2, [pc, #60]	; (800447c <gfxThreadCreate+0x64>)
 800443e:	6850      	ldr	r0, [r2, #4]
 8004440:	2800      	cmp	r0, #0
 8004442:	d013      	beq.n	800446c <gfxThreadCreate+0x54>
		q->tail->next = t;
 8004444:	6890      	ldr	r0, [r2, #8]
		q->tail = t;
 8004446:	6093      	str	r3, [r2, #8]
}

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
	if (q->head) {
		q->tail->next = t;
 8004448:	6003      	str	r3, [r0, #0]
	t->param = param;

	// Add the current thread to the queue because we are starting a new thread.
	me = _gfxCurrentThread;
	Qadd(&readyQ, me);
	_gfxCurrentThread = t;
 800444a:	600c      	str	r4, [r1, #0]

	_gfxStartThread(me, t);
 800444c:	6958      	ldr	r0, [r3, #20]
 800444e:	1c21      	adds	r1, r4, #0
 8004450:	22ff      	movs	r2, #255	; 0xff
 8004452:	f7ff fedd 	bl	8004210 <_gfxXSwitch.isra.1>

	// Return the new thread handle
	return t;
 8004456:	1c20      	adds	r0, r4, #0
}
 8004458:	bd70      	pop	{r4, r5, r6, pc}
	thread *	me;
	(void)		prio;

	// Ensure we have a minimum stack size
	if (stacksz < sizeof(thread)+64) {
		stacksz = sizeof(thread)+64;
 800445a:	2558      	movs	r5, #88	; 0x58

	if (stackarea) {
		t = (thread *)stackarea;
		t->flags = 0;
	} else {
		t = (thread *)gfxAlloc(stacksz);
 800445c:	1c28      	adds	r0, r5, #0
 800445e:	f000 f835 	bl	80044cc <gfxAlloc>
 8004462:	1e04      	subs	r4, r0, #0
		if (!t)
 8004464:	d005      	beq.n	8004472 <gfxThreadCreate+0x5a>
			return 0;
		t->flags = FLG_THD_ALLOC;
 8004466:	2301      	movs	r3, #1
 8004468:	6043      	str	r3, [r0, #4]
 800446a:	e7df      	b.n	800442c <gfxThreadCreate+0x14>
	t->next = 0;
	if (q->head) {
		q->tail->next = t;
		q->tail = t;
	} else
		q->head = q->tail = t;
 800446c:	6093      	str	r3, [r2, #8]
 800446e:	6053      	str	r3, [r2, #4]
 8004470:	e7eb      	b.n	800444a <gfxThreadCreate+0x32>
		t = (thread *)stackarea;
		t->flags = 0;
	} else {
		t = (thread *)gfxAlloc(stacksz);
		if (!t)
			return 0;
 8004472:	2000      	movs	r0, #0
 8004474:	e7f0      	b.n	8004458 <gfxThreadCreate+0x40>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000998 	.word	0x20000998
 800447c:	20000888 	.word	0x20000888

08004480 <gfxThreadWait>:

	// Return the new thread handle
	return t;
}

threadreturn_t gfxThreadWait(gfxThreadHandle th) {
 8004480:	b538      	push	{r3, r4, r5, lr}
	thread *		t;

	t = th;
	if (t == _gfxCurrentThread)
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <gfxThreadWait+0x44>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4298      	cmp	r0, r3
 8004488:	d018      	beq.n	80044bc <gfxThreadWait+0x3c>
		return -1;

	// Mark that we are waiting
	t->flags |= FLG_THD_WAIT;
 800448a:	2308      	movs	r3, #8
 800448c:	6842      	ldr	r2, [r0, #4]
 800448e:	1c04      	adds	r4, r0, #0
 8004490:	4313      	orrs	r3, r2
 8004492:	6043      	str	r3, [r0, #4]

	// Wait for the thread to die
	while(!(t->flags & FLG_THD_DEAD))
 8004494:	0752      	lsls	r2, r2, #29
 8004496:	d405      	bmi.n	80044a4 <gfxThreadWait+0x24>
 8004498:	2504      	movs	r5, #4
		gfxYield();
 800449a:	f7ff ff29 	bl	80042f0 <gfxYield>

	// Mark that we are waiting
	t->flags |= FLG_THD_WAIT;

	// Wait for the thread to die
	while(!(t->flags & FLG_THD_DEAD))
 800449e:	6863      	ldr	r3, [r4, #4]
 80044a0:	421d      	tst	r5, r3
 80044a2:	d0fa      	beq.n	800449a <gfxThreadWait+0x1a>
		gfxYield();

	// Unmark
	t->flags &= ~FLG_THD_WAIT;
 80044a4:	2208      	movs	r2, #8
 80044a6:	1c19      	adds	r1, r3, #0
 80044a8:	4391      	bics	r1, r2
 80044aa:	6061      	str	r1, [r4, #4]

	// Clean up resources if needed
	if (t->flags & FLG_THD_ALLOC)
 80044ac:	07db      	lsls	r3, r3, #31
 80044ae:	d401      	bmi.n	80044b4 <gfxThreadWait+0x34>
		gfxFree(t);

	// Return the status left by the dead process
	return (threadreturn_t)t->param;
 80044b0:	6920      	ldr	r0, [r4, #16]
}
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
	// Unmark
	t->flags &= ~FLG_THD_WAIT;

	// Clean up resources if needed
	if (t->flags & FLG_THD_ALLOC)
		gfxFree(t);
 80044b4:	1c20      	adds	r0, r4, #0
 80044b6:	f000 f813 	bl	80044e0 <gfxFree>
 80044ba:	e7f9      	b.n	80044b0 <gfxThreadWait+0x30>
threadreturn_t gfxThreadWait(gfxThreadHandle th) {
	thread *		t;

	t = th;
	if (t == _gfxCurrentThread)
		return -1;
 80044bc:	2001      	movs	r0, #1
 80044be:	4240      	negs	r0, r0
 80044c0:	e7f7      	b.n	80044b2 <gfxThreadWait+0x32>
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	20000998 	.word	0x20000998

080044c8 <_gosHeapInit>:

#if GFX_OS_HEAP_SIZE == 0
	#include <stdlib.h>				// Prototype for malloc(), realloc() and free()

	void _gosHeapInit(void) {
	}
 80044c8:	4770      	bx	lr
 80044ca:	46c0      	nop			; (mov r8, r8)

080044cc <gfxAlloc>:
	void *gfxAlloc(size_t sz) {
 80044cc:	b508      	push	{r3, lr}
		return malloc(sz);
 80044ce:	f001 faf7 	bl	8005ac0 <malloc>
	}
 80044d2:	bd08      	pop	{r3, pc}

080044d4 <gfxRealloc>:

	void *gfxRealloc(void *ptr, size_t oldsz, size_t newsz) {
 80044d4:	b508      	push	{r3, lr}
		(void) oldsz;
		return realloc(ptr, newsz);
 80044d6:	1c11      	adds	r1, r2, #0
 80044d8:	f001 fe2c 	bl	8006134 <realloc>
	}
 80044dc:	bd08      	pop	{r3, pc}
 80044de:	46c0      	nop			; (mov r8, r8)

080044e0 <gfxFree>:

	void gfxFree(void *ptr) {
 80044e0:	b508      	push	{r3, lr}
		free(ptr);
 80044e2:	f001 faf7 	bl	8005ad4 <free>
	}
 80044e6:	bd08      	pop	{r3, pc}

080044e8 <_gfileInit>:
void _gfileInit(void) {
	#if GFILE_NEED_NATIVEFS
		extern void _gfileNativeAssignStdio(void);
		_gfileNativeAssignStdio();
	#endif
}
 80044e8:	4770      	bx	lr
 80044ea:	46c0      	nop			; (mov r8, r8)

080044ec <_gfileFindSlot>:
 */
GFILE *_gfileFindSlot(const char *mode) {
	GFILE *			f;

	// First find an available GFILE slot.
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
 80044ec:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <_gfileFindSlot+0xcc>)
}

/**
 * Internal routine to find an empty GFILE slot and interpret flags.
 */
GFILE *_gfileFindSlot(const char *mode) {
 80044ee:	b530      	push	{r4, r5, lr}
	GFILE *			f;

	// First find an available GFILE slot.
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
 80044f0:	1c1c      	adds	r4, r3, #0
		if (!(f->flags & GFILEFLG_OPEN)) {
 80044f2:	2101      	movs	r1, #1
 */
GFILE *_gfileFindSlot(const char *mode) {
	GFILE *			f;

	// First find an available GFILE slot.
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
 80044f4:	3430      	adds	r4, #48	; 0x30
		if (!(f->flags & GFILEFLG_OPEN)) {
 80044f6:	889a      	ldrh	r2, [r3, #4]
 80044f8:	4211      	tst	r1, r2
 80044fa:	d004      	beq.n	8004506 <_gfileFindSlot+0x1a>
 */
GFILE *_gfileFindSlot(const char *mode) {
	GFILE *			f;

	// First find an available GFILE slot.
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
 80044fc:	3310      	adds	r3, #16
 80044fe:	42a3      	cmp	r3, r4
 8004500:	d3f9      	bcc.n	80044f6 <_gfileFindSlot+0xa>
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
					}
				}
				break;
			default:
				return 0;
 8004502:	2000      	movs	r0, #0
			}
			return f;
		}
	}
	return 0;
}
 8004504:	bd30      	pop	{r4, r5, pc}

	// First find an available GFILE slot.
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
		if (!(f->flags & GFILEFLG_OPEN)) {
			// Get the flags
			switch(mode[0]) {
 8004506:	7802      	ldrb	r2, [r0, #0]
 8004508:	2a72      	cmp	r2, #114	; 0x72
 800450a:	d017      	beq.n	800453c <_gfileFindSlot+0x50>
 800450c:	2a77      	cmp	r2, #119	; 0x77
 800450e:	d033      	beq.n	8004578 <_gfileFindSlot+0x8c>
 8004510:	2a61      	cmp	r2, #97	; 0x61
 8004512:	d1f6      	bne.n	8004502 <_gfileFindSlot+0x16>
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
					}
				}
				break;
			case 'a':
				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
 8004514:	220c      	movs	r2, #12
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
 8004516:	2480      	movs	r4, #128	; 0x80
			case 'a':
				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
 8004518:	2510      	movs	r5, #16
				break;
			case 'a':
				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
 800451a:	2102      	movs	r1, #2
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
					}
				}
				break;
			case 'a':
				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
 800451c:	809a      	strh	r2, [r3, #4]
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
 800451e:	00a4      	lsls	r4, r4, #2
					}
				}
				break;
			case 'a':
				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
				while (*++mode) {
 8004520:	3001      	adds	r0, #1
 8004522:	7802      	ldrb	r2, [r0, #0]
 8004524:	2a00      	cmp	r2, #0
 8004526:	d01d      	beq.n	8004564 <_gfileFindSlot+0x78>
					switch(mode[0]) {
 8004528:	2a62      	cmp	r2, #98	; 0x62
 800452a:	d021      	beq.n	8004570 <_gfileFindSlot+0x84>
 800452c:	2a78      	cmp	r2, #120	; 0x78
 800452e:	d01b      	beq.n	8004568 <_gfileFindSlot+0x7c>
 8004530:	2a2b      	cmp	r2, #43	; 0x2b
 8004532:	d1f5      	bne.n	8004520 <_gfileFindSlot+0x34>
					case '+':	f->flags |= GFILEFLG_READ;			break;
 8004534:	889a      	ldrh	r2, [r3, #4]
 8004536:	430a      	orrs	r2, r1
 8004538:	809a      	strh	r2, [r3, #4]
 800453a:	e7f1      	b.n	8004520 <_gfileFindSlot+0x34>
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
		if (!(f->flags & GFILEFLG_OPEN)) {
			// Get the flags
			switch(mode[0]) {
			case 'r':
				f->flags = GFILEFLG_READ|GFILEFLG_MUSTEXIST;
 800453c:	2281      	movs	r2, #129	; 0x81
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_WRITE;			break;
 800453e:	2404      	movs	r4, #4
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
 8004540:	2110      	movs	r1, #16
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
		if (!(f->flags & GFILEFLG_OPEN)) {
			// Get the flags
			switch(mode[0]) {
			case 'r':
				f->flags = GFILEFLG_READ|GFILEFLG_MUSTEXIST;
 8004542:	0052      	lsls	r2, r2, #1
 8004544:	809a      	strh	r2, [r3, #4]
				while (*++mode) {
 8004546:	3001      	adds	r0, #1
 8004548:	7802      	ldrb	r2, [r0, #0]
 800454a:	2a00      	cmp	r2, #0
 800454c:	d00a      	beq.n	8004564 <_gfileFindSlot+0x78>
					switch(mode[0]) {
 800454e:	2a2b      	cmp	r2, #43	; 0x2b
 8004550:	d02e      	beq.n	80045b0 <_gfileFindSlot+0xc4>
 8004552:	2a62      	cmp	r2, #98	; 0x62
 8004554:	d1f7      	bne.n	8004546 <_gfileFindSlot+0x5a>
					case '+':	f->flags |= GFILEFLG_WRITE;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
 8004556:	889a      	ldrh	r2, [r3, #4]
		if (!(f->flags & GFILEFLG_OPEN)) {
			// Get the flags
			switch(mode[0]) {
			case 'r':
				f->flags = GFILEFLG_READ|GFILEFLG_MUSTEXIST;
				while (*++mode) {
 8004558:	3001      	adds	r0, #1
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_WRITE;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
 800455a:	430a      	orrs	r2, r1
 800455c:	809a      	strh	r2, [r3, #4]
		if (!(f->flags & GFILEFLG_OPEN)) {
			// Get the flags
			switch(mode[0]) {
			case 'r':
				f->flags = GFILEFLG_READ|GFILEFLG_MUSTEXIST;
				while (*++mode) {
 800455e:	7802      	ldrb	r2, [r0, #0]
 8004560:	2a00      	cmp	r2, #0
 8004562:	d1f4      	bne.n	800454e <_gfileFindSlot+0x62>
				}
				break;
			default:
				return 0;
			}
			return f;
 8004564:	1c18      	adds	r0, r3, #0
 8004566:	e7cd      	b.n	8004504 <_gfileFindSlot+0x18>
				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
 8004568:	889a      	ldrh	r2, [r3, #4]
 800456a:	4322      	orrs	r2, r4
 800456c:	809a      	strh	r2, [r3, #4]
 800456e:	e7d7      	b.n	8004520 <_gfileFindSlot+0x34>
			case 'a':
				f->flags = GFILEFLG_WRITE|GFILEFLG_APPEND;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
 8004570:	889a      	ldrh	r2, [r3, #4]
 8004572:	432a      	orrs	r2, r5
 8004574:	809a      	strh	r2, [r3, #4]
 8004576:	e7d3      	b.n	8004520 <_gfileFindSlot+0x34>
				f->flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
 8004578:	2480      	movs	r4, #128	; 0x80
			case 'w':
				f->flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
 800457a:	2510      	movs	r5, #16
				break;
			case 'w':
				f->flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
 800457c:	2102      	movs	r1, #2
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					}
				}
				break;
			case 'w':
				f->flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <_gfileFindSlot+0xd0>)
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
 8004580:	00a4      	lsls	r4, r4, #2
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					}
				}
				break;
			case 'w':
				f->flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
 8004582:	809a      	strh	r2, [r3, #4]
				while (*++mode) {
 8004584:	3001      	adds	r0, #1
 8004586:	7802      	ldrb	r2, [r0, #0]
 8004588:	2a00      	cmp	r2, #0
 800458a:	d0eb      	beq.n	8004564 <_gfileFindSlot+0x78>
					switch(mode[0]) {
 800458c:	2a62      	cmp	r2, #98	; 0x62
 800458e:	d00b      	beq.n	80045a8 <_gfileFindSlot+0xbc>
 8004590:	2a78      	cmp	r2, #120	; 0x78
 8004592:	d005      	beq.n	80045a0 <_gfileFindSlot+0xb4>
 8004594:	2a2b      	cmp	r2, #43	; 0x2b
 8004596:	d1f5      	bne.n	8004584 <_gfileFindSlot+0x98>
					case '+':	f->flags |= GFILEFLG_READ;			break;
 8004598:	889a      	ldrh	r2, [r3, #4]
 800459a:	430a      	orrs	r2, r1
 800459c:	809a      	strh	r2, [r3, #4]
 800459e:	e7f1      	b.n	8004584 <_gfileFindSlot+0x98>
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
					case 'x':	f->flags |= GFILEFLG_MUSTNOTEXIST;	break;
 80045a0:	889a      	ldrh	r2, [r3, #4]
 80045a2:	4322      	orrs	r2, r4
 80045a4:	809a      	strh	r2, [r3, #4]
 80045a6:	e7ed      	b.n	8004584 <_gfileFindSlot+0x98>
			case 'w':
				f->flags = GFILEFLG_WRITE|GFILEFLG_TRUNC;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_READ;			break;
					case 'b':	f->flags |= GFILEFLG_BINARY;		break;
 80045a8:	889a      	ldrh	r2, [r3, #4]
 80045aa:	432a      	orrs	r2, r5
 80045ac:	809a      	strh	r2, [r3, #4]
 80045ae:	e7e9      	b.n	8004584 <_gfileFindSlot+0x98>
			switch(mode[0]) {
			case 'r':
				f->flags = GFILEFLG_READ|GFILEFLG_MUSTEXIST;
				while (*++mode) {
					switch(mode[0]) {
					case '+':	f->flags |= GFILEFLG_WRITE;			break;
 80045b0:	889a      	ldrh	r2, [r3, #4]
 80045b2:	4322      	orrs	r2, r4
 80045b4:	809a      	strh	r2, [r3, #4]
 80045b6:	e7c6      	b.n	8004546 <_gfileFindSlot+0x5a>
 80045b8:	20000920 	.word	0x20000920
 80045bc:	00000404 	.word	0x00000404

080045c0 <gfileExists>:
	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
		if (p[0]->exists && p[0]->exists(fname))
			return TRUE;
	}
	return FALSE;
}
 80045c0:	2000      	movs	r0, #0
 80045c2:	4770      	bx	lr

080045c4 <gfileDelete>:
	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
		if (p[0]->del && p[0]->del(fname))
			return TRUE;
	}
	return FALSE;
}
 80045c4:	2000      	movs	r0, #0
 80045c6:	4770      	bx	lr

080045c8 <gfileGetFilesize>:
	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
		if (p[0]->filesize && (res = p[0]->filesize(fname)) != -1)
			return res;
	}
	return -1;
}
 80045c8:	2001      	movs	r0, #1
 80045ca:	4240      	negs	r0, r0
 80045cc:	4770      	bx	lr
 80045ce:	46c0      	nop			; (mov r8, r8)

080045d0 <gfileRename>:
	for(p = FsArray; p < &FsArray[sizeof(FsArray)/sizeof(FsArray[0])]; p++) {
		if (p[0]->ren && p[0]->ren(oldname,newname))
			return TRUE;
	}
	return FALSE;
}
 80045d0:	2000      	movs	r0, #0
 80045d2:	4770      	bx	lr

080045d4 <gfileOpen>:
	if (p->flags & GFSFLG_SEEKABLE)
		f->flags |= GFILEFLG_CANSEEK;
	return TRUE;
}

GFILE *gfileOpen(const char *fname, const char *mode) {
 80045d4:	b508      	push	{r3, lr}
	GFILE *			f;
	const GFILEVMT * const *p;

	// Get an empty file and set the flags
	if (!(f = _gfileFindSlot(mode)))
 80045d6:	1c08      	adds	r0, r1, #0
 80045d8:	f7ff ff88 	bl	80044ec <_gfileFindSlot>
			return f;
	}

	// File not found
	return 0;
}
 80045dc:	2000      	movs	r0, #0
 80045de:	bd08      	pop	{r3, pc}

080045e0 <gfileClose>:

void gfileClose(GFILE *f) {
 80045e0:	b510      	push	{r4, lr}
	if (!f || !(f->flags & GFILEFLG_OPEN))
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d00a      	beq.n	80045fc <gfileClose+0x1c>
 80045e6:	8883      	ldrh	r3, [r0, #4]
 80045e8:	07db      	lsls	r3, r3, #31
 80045ea:	d507      	bpl.n	80045fc <gfileClose+0x1c>
		return;
	if (f->vmt->close)
 80045ec:	6803      	ldr	r3, [r0, #0]
 80045ee:	1c04      	adds	r4, r0, #0
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d000      	beq.n	80045f8 <gfileClose+0x18>
		f->vmt->close(f);
 80045f6:	4798      	blx	r3
	f->flags = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	80a3      	strh	r3, [r4, #4]
}
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)

08004600 <_gfileDeinit>:
		_gfileNativeAssignStdio();
	#endif
}

void _gfileDeinit(void)
{
 8004600:	b570      	push	{r4, r5, r6, lr}
	GFILE *	f;
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
 8004602:	4c07      	ldr	r4, [pc, #28]	; (8004620 <_gfileDeinit+0x20>)
		if (f->flags & GFILEFLG_OPEN)
 8004604:	2601      	movs	r6, #1
}

void _gfileDeinit(void)
{
	GFILE *	f;
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
 8004606:	1c25      	adds	r5, r4, #0
 8004608:	3530      	adds	r5, #48	; 0x30
		if (f->flags & GFILEFLG_OPEN)
 800460a:	88a3      	ldrh	r3, [r4, #4]
 800460c:	421e      	tst	r6, r3
 800460e:	d103      	bne.n	8004618 <_gfileDeinit+0x18>
}

void _gfileDeinit(void)
{
	GFILE *	f;
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
 8004610:	3410      	adds	r4, #16
 8004612:	42ac      	cmp	r4, r5
 8004614:	d3f9      	bcc.n	800460a <_gfileDeinit+0xa>
		if (f->flags & GFILEFLG_OPEN)
			gfileClose(f);
	}
}
 8004616:	bd70      	pop	{r4, r5, r6, pc}
void _gfileDeinit(void)
{
	GFILE *	f;
	for (f = gfileArr; f < &gfileArr[GFILE_MAX_GFILES]; f++) {
		if (f->flags & GFILEFLG_OPEN)
			gfileClose(f);
 8004618:	1c20      	adds	r0, r4, #0
 800461a:	f7ff ffe1 	bl	80045e0 <gfileClose>
 800461e:	e7f7      	b.n	8004610 <_gfileDeinit+0x10>
 8004620:	20000920 	.word	0x20000920

08004624 <gfileRead>:
	if (f->vmt->close)
		f->vmt->close(f);
	f->flags = 0;
}

size_t gfileRead(GFILE *f, void *buf, size_t len) {
 8004624:	b538      	push	{r3, r4, r5, lr}
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_READ)) != (GFILEFLG_OPEN|GFILEFLG_READ))
 8004626:	2800      	cmp	r0, #0
 8004628:	d014      	beq.n	8004654 <gfileRead+0x30>
 800462a:	2403      	movs	r4, #3
 800462c:	8883      	ldrh	r3, [r0, #4]
		return 0;
 800462e:	2500      	movs	r5, #0
}

size_t gfileRead(GFILE *f, void *buf, size_t len) {
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_READ)) != (GFILEFLG_OPEN|GFILEFLG_READ))
 8004630:	4023      	ands	r3, r4
 8004632:	2b03      	cmp	r3, #3
 8004634:	d001      	beq.n	800463a <gfileRead+0x16>
		return 0;
	if ((res = f->vmt->read(f, buf, len)) <= 0)
		return 0;
	f->pos += res;
	return res;
}
 8004636:	1c28      	adds	r0, r5, #0
 8004638:	bd38      	pop	{r3, r4, r5, pc}
size_t gfileRead(GFILE *f, void *buf, size_t len) {
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_READ)) != (GFILEFLG_OPEN|GFILEFLG_READ))
		return 0;
	if (!f->vmt->read)
 800463a:	6803      	ldr	r3, [r0, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f9      	beq.n	8004636 <gfileRead+0x12>
 8004642:	1c04      	adds	r4, r0, #0
		return 0;
	if ((res = f->vmt->read(f, buf, len)) <= 0)
 8004644:	4798      	blx	r3
 8004646:	2800      	cmp	r0, #0
 8004648:	d0f5      	beq.n	8004636 <gfileRead+0x12>
		return 0;
	f->pos += res;
 800464a:	68e3      	ldr	r3, [r4, #12]
	return res;
 800464c:	1c05      	adds	r5, r0, #0
		return 0;
	if (!f->vmt->read)
		return 0;
	if ((res = f->vmt->read(f, buf, len)) <= 0)
		return 0;
	f->pos += res;
 800464e:	181b      	adds	r3, r3, r0
 8004650:	60e3      	str	r3, [r4, #12]
	return res;
 8004652:	e7f0      	b.n	8004636 <gfileRead+0x12>

size_t gfileRead(GFILE *f, void *buf, size_t len) {
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_READ)) != (GFILEFLG_OPEN|GFILEFLG_READ))
		return 0;
 8004654:	2500      	movs	r5, #0
 8004656:	e7ee      	b.n	8004636 <gfileRead+0x12>

08004658 <gfileWrite>:
		return 0;
	f->pos += res;
	return res;
}

size_t gfileWrite(GFILE *f, const void *buf, size_t len) {
 8004658:	b538      	push	{r3, r4, r5, lr}
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_WRITE)) != (GFILEFLG_OPEN|GFILEFLG_WRITE))
 800465a:	2800      	cmp	r0, #0
 800465c:	d014      	beq.n	8004688 <gfileWrite+0x30>
 800465e:	2405      	movs	r4, #5
 8004660:	8883      	ldrh	r3, [r0, #4]
		return 0;
 8004662:	2500      	movs	r5, #0
}

size_t gfileWrite(GFILE *f, const void *buf, size_t len) {
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_WRITE)) != (GFILEFLG_OPEN|GFILEFLG_WRITE))
 8004664:	4023      	ands	r3, r4
 8004666:	2b05      	cmp	r3, #5
 8004668:	d001      	beq.n	800466e <gfileWrite+0x16>
		return 0;
	if ((res = f->vmt->write(f, buf, len)) <= 0)
		return 0;
	f->pos += res;
	return res;
}
 800466a:	1c28      	adds	r0, r5, #0
 800466c:	bd38      	pop	{r3, r4, r5, pc}
size_t gfileWrite(GFILE *f, const void *buf, size_t len) {
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_WRITE)) != (GFILEFLG_OPEN|GFILEFLG_WRITE))
		return 0;
	if (!f->vmt->write)
 800466e:	6803      	ldr	r3, [r0, #0]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f9      	beq.n	800466a <gfileWrite+0x12>
 8004676:	1c04      	adds	r4, r0, #0
		return 0;
	if ((res = f->vmt->write(f, buf, len)) <= 0)
 8004678:	4798      	blx	r3
 800467a:	2800      	cmp	r0, #0
 800467c:	d0f5      	beq.n	800466a <gfileWrite+0x12>
		return 0;
	f->pos += res;
 800467e:	68e3      	ldr	r3, [r4, #12]
	return res;
 8004680:	1c05      	adds	r5, r0, #0
		return 0;
	if (!f->vmt->write)
		return 0;
	if ((res = f->vmt->write(f, buf, len)) <= 0)
		return 0;
	f->pos += res;
 8004682:	181b      	adds	r3, r3, r0
 8004684:	60e3      	str	r3, [r4, #12]
	return res;
 8004686:	e7f0      	b.n	800466a <gfileWrite+0x12>

size_t gfileWrite(GFILE *f, const void *buf, size_t len) {
	size_t	res;

	if (!f || (f->flags & (GFILEFLG_OPEN|GFILEFLG_WRITE)) != (GFILEFLG_OPEN|GFILEFLG_WRITE))
		return 0;
 8004688:	2500      	movs	r5, #0
 800468a:	e7ee      	b.n	800466a <gfileWrite+0x12>

0800468c <gfileGetPos>:
		return 0;
	f->pos += res;
	return res;
}

long int gfileGetPos(GFILE *f) {
 800468c:	1e03      	subs	r3, r0, #0
	if (!f || !(f->flags & GFILEFLG_OPEN))
 800468e:	d005      	beq.n	800469c <gfileGetPos+0x10>
 8004690:	8882      	ldrh	r2, [r0, #4]
		return 0;
 8004692:	2000      	movs	r0, #0
	f->pos += res;
	return res;
}

long int gfileGetPos(GFILE *f) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
 8004694:	07d2      	lsls	r2, r2, #31
 8004696:	d500      	bpl.n	800469a <gfileGetPos+0xe>
		return 0;
	return f->pos;
 8004698:	68d8      	ldr	r0, [r3, #12]
}
 800469a:	4770      	bx	lr
	return res;
}

long int gfileGetPos(GFILE *f) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
		return 0;
 800469c:	2000      	movs	r0, #0
 800469e:	e7fc      	b.n	800469a <gfileGetPos+0xe>

080046a0 <gfileSetPos>:
	return f->pos;
}

bool_t gfileSetPos(GFILE *f, long int pos) {
 80046a0:	b538      	push	{r3, r4, r5, lr}
	if (!f || !(f->flags & GFILEFLG_OPEN))
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d00e      	beq.n	80046c4 <gfileSetPos+0x24>
 80046a6:	8883      	ldrh	r3, [r0, #4]
 80046a8:	07db      	lsls	r3, r3, #31
 80046aa:	d50b      	bpl.n	80046c4 <gfileSetPos+0x24>
		return FALSE;
	if (!f->vmt->setpos || !f->vmt->setpos(f, pos))
 80046ac:	6803      	ldr	r3, [r0, #0]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <gfileSetPos+0x24>
 80046b4:	1c0d      	adds	r5, r1, #0
 80046b6:	1c04      	adds	r4, r0, #0
 80046b8:	4798      	blx	r3
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d002      	beq.n	80046c4 <gfileSetPos+0x24>
		return FALSE;
	f->pos = pos;
 80046be:	60e5      	str	r5, [r4, #12]
	return TRUE;
 80046c0:	20ff      	movs	r0, #255	; 0xff
 80046c2:	e000      	b.n	80046c6 <gfileSetPos+0x26>
	return f->pos;
}

bool_t gfileSetPos(GFILE *f, long int pos) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
		return FALSE;
 80046c4:	2000      	movs	r0, #0
	if (!f->vmt->setpos || !f->vmt->setpos(f, pos))
		return FALSE;
	f->pos = pos;
	return TRUE;
}
 80046c6:	bd38      	pop	{r3, r4, r5, pc}

080046c8 <gfileGetSize>:

long int gfileGetSize(GFILE *f) {
 80046c8:	b508      	push	{r3, lr}
 80046ca:	1e03      	subs	r3, r0, #0
	if (!f || !(f->flags & GFILEFLG_OPEN))
 80046cc:	d00a      	beq.n	80046e4 <gfileGetSize+0x1c>
 80046ce:	8882      	ldrh	r2, [r0, #4]
		return 0;
 80046d0:	2000      	movs	r0, #0
	f->pos = pos;
	return TRUE;
}

long int gfileGetSize(GFILE *f) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
 80046d2:	07d2      	lsls	r2, r2, #31
 80046d4:	d505      	bpl.n	80046e2 <gfileGetSize+0x1a>
		return 0;
	if (!f->vmt->getsize)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046da:	2a00      	cmp	r2, #0
 80046dc:	d001      	beq.n	80046e2 <gfileGetSize+0x1a>
 80046de:	1c18      	adds	r0, r3, #0
		return 0;
	return f->vmt->getsize(f);
 80046e0:	4790      	blx	r2
}
 80046e2:	bd08      	pop	{r3, pc}
	return TRUE;
}

long int gfileGetSize(GFILE *f) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
		return 0;
 80046e4:	2000      	movs	r0, #0
 80046e6:	e7fc      	b.n	80046e2 <gfileGetSize+0x1a>

080046e8 <gfileEOF>:
	if (!f->vmt->getsize)
		return 0;
	return f->vmt->getsize(f);
}

bool_t gfileEOF(GFILE *f) {
 80046e8:	b508      	push	{r3, lr}
 80046ea:	1e03      	subs	r3, r0, #0
	if (!f || !(f->flags & GFILEFLG_OPEN))
 80046ec:	d00b      	beq.n	8004706 <gfileEOF+0x1e>
 80046ee:	8882      	ldrh	r2, [r0, #4]
		return TRUE;
 80046f0:	20ff      	movs	r0, #255	; 0xff
		return 0;
	return f->vmt->getsize(f);
}

bool_t gfileEOF(GFILE *f) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
 80046f2:	07d2      	lsls	r2, r2, #31
 80046f4:	d400      	bmi.n	80046f8 <gfileEOF+0x10>
		return TRUE;
	if (!f->vmt->eof)
		return FALSE;
	return f->vmt->eof(f);
}
 80046f6:	bd08      	pop	{r3, pc}
}

bool_t gfileEOF(GFILE *f) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
		return TRUE;
	if (!f->vmt->eof)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046fc:	2a00      	cmp	r2, #0
 80046fe:	d004      	beq.n	800470a <gfileEOF+0x22>
 8004700:	1c18      	adds	r0, r3, #0
		return FALSE;
	return f->vmt->eof(f);
 8004702:	4790      	blx	r2
 8004704:	e7f7      	b.n	80046f6 <gfileEOF+0xe>
	return f->vmt->getsize(f);
}

bool_t gfileEOF(GFILE *f) {
	if (!f || !(f->flags & GFILEFLG_OPEN))
		return TRUE;
 8004706:	20ff      	movs	r0, #255	; 0xff
 8004708:	e7f5      	b.n	80046f6 <gfileEOF+0xe>
	if (!f->vmt->eof)
		return FALSE;
 800470a:	2000      	movs	r0, #0
 800470c:	e7f3      	b.n	80046f6 <gfileEOF+0xe>
 800470e:	46c0      	nop			; (mov r8, r8)

08004710 <gfileMount>:
				return FALSE;
			return p[0]->mount(drive);
		}
	}
	return FALSE;
}
 8004710:	2000      	movs	r0, #0
 8004712:	4770      	bx	lr

08004714 <gfileUnmount>:
				return FALSE;
			return p[0]->unmount(drive);
		}
	}
	return FALSE;
}
 8004714:	2000      	movs	r0, #0
 8004716:	4770      	bx	lr

08004718 <gfileSync>:

bool_t gfileSync(GFILE *f) {
 8004718:	b508      	push	{r3, lr}
	if (!f->vmt->sync)
 800471a:	6803      	ldr	r3, [r0, #0]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <gfileSync+0xe>
		return FALSE;
	return f->vmt->sync(f);
 8004722:	4798      	blx	r3
}
 8004724:	bd08      	pop	{r3, pc}
	return FALSE;
}

bool_t gfileSync(GFILE *f) {
	if (!f->vmt->sync)
		return FALSE;
 8004726:	2000      	movs	r0, #0
 8004728:	e7fc      	b.n	8004724 <gfileSync+0xc>
 800472a:	46c0      	nop			; (mov r8, r8)

0800472c <MEMSetpos>:
}
static bool_t MEMSetpos(GFILE *f, long int pos) {
	(void) f;
	(void) pos;
	return TRUE;
}
 800472c:	20ff      	movs	r0, #255	; 0xff
 800472e:	4770      	bx	lr

08004730 <MEMWrite>:

static int MEMRead(GFILE *f, void *buf, int size) {
	memcpy(buf, ((char *)f->obj)+f->pos, size);
	return size;
}
static int MEMWrite(GFILE *f, const void *buf, int size) {
 8004730:	b510      	push	{r4, lr}
 8004732:	1c14      	adds	r4, r2, #0
	memcpy(((char *)f->obj)+f->pos, buf, size);
 8004734:	68c3      	ldr	r3, [r0, #12]
 8004736:	6882      	ldr	r2, [r0, #8]
 8004738:	18d0      	adds	r0, r2, r3
 800473a:	1c22      	adds	r2, r4, #0
 800473c:	f001 fc72 	bl	8006024 <memcpy>
	return size;
}
 8004740:	1c20      	adds	r0, r4, #0
 8004742:	bd10      	pop	{r4, pc}

08004744 <MEMRead>:
	#if GFILE_NEED_FILELISTS
		0, 0, 0,
	#endif
};

static int MEMRead(GFILE *f, void *buf, int size) {
 8004744:	1c03      	adds	r3, r0, #0
 8004746:	b510      	push	{r4, lr}
 8004748:	1c14      	adds	r4, r2, #0
 800474a:	1c08      	adds	r0, r1, #0
	memcpy(buf, ((char *)f->obj)+f->pos, size);
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	18c9      	adds	r1, r1, r3
 8004752:	f001 fc67 	bl	8006024 <memcpy>
	return size;
}
 8004756:	1c20      	adds	r0, r4, #0
 8004758:	bd10      	pop	{r4, pc}
 800475a:	46c0      	nop			; (mov r8, r8)

0800475c <gfileOpenMemory>:
	(void) f;
	(void) pos;
	return TRUE;
}

GFILE *	gfileOpenMemory(void *memptr, const char *mode) {
 800475c:	b510      	push	{r4, lr}
 800475e:	1c04      	adds	r4, r0, #0
	GFILE	*f;

	// Get an empty file and set the flags
	if (!(f = _gfileFindSlot(mode)))
 8004760:	1c08      	adds	r0, r1, #0
 8004762:	f7ff fec3 	bl	80044ec <_gfileFindSlot>
 8004766:	2800      	cmp	r0, #0
 8004768:	d008      	beq.n	800477c <gfileOpenMemory+0x20>
		return 0;

	// File is open - fill in all the details
	f->vmt = &FsMemVMT;
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <gfileOpenMemory+0x24>)
	f->obj = memptr;
	f->pos = 0;
	f->flags |= GFILEFLG_OPEN|GFILEFLG_CANSEEK;
 800476c:	8882      	ldrh	r2, [r0, #4]
	// Get an empty file and set the flags
	if (!(f = _gfileFindSlot(mode)))
		return 0;

	// File is open - fill in all the details
	f->vmt = &FsMemVMT;
 800476e:	6003      	str	r3, [r0, #0]
	f->obj = memptr;
	f->pos = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	60c3      	str	r3, [r0, #12]
	f->flags |= GFILEFLG_OPEN|GFILEFLG_CANSEEK;
 8004774:	2341      	movs	r3, #65	; 0x41
 8004776:	4313      	orrs	r3, r2
	if (!(f = _gfileFindSlot(mode)))
		return 0;

	// File is open - fill in all the details
	f->vmt = &FsMemVMT;
	f->obj = memptr;
 8004778:	6084      	str	r4, [r0, #8]
	f->pos = 0;
	f->flags |= GFILEFLG_OPEN|GFILEFLG_CANSEEK;
 800477a:	8083      	strh	r3, [r0, #4]
	return f;
}
 800477c:	bd10      	pop	{r4, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	08007014 	.word	0x08007014

08004784 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8004784:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <I2C_DeInit+0x34>)
 8004788:	4298      	cmp	r0, r3
 800478a:	d00a      	beq.n	80047a2 <I2C_DeInit+0x1e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800478c:	2080      	movs	r0, #128	; 0x80
 800478e:	2101      	movs	r1, #1
 8004790:	03c0      	lsls	r0, r0, #15
 8004792:	f7fb ffdb 	bl	800074c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8004796:	2080      	movs	r0, #128	; 0x80
 8004798:	2100      	movs	r1, #0
 800479a:	03c0      	lsls	r0, r0, #15
 800479c:	f7fb ffd6 	bl	800074c <RCC_APB1PeriphResetCmd>
  }
}
 80047a0:	bd08      	pop	{r3, pc}
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80047a2:	2080      	movs	r0, #128	; 0x80
 80047a4:	2101      	movs	r1, #1
 80047a6:	0380      	lsls	r0, r0, #14
 80047a8:	f7fb ffd0 	bl	800074c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80047ac:	2080      	movs	r0, #128	; 0x80
 80047ae:	2100      	movs	r1, #0
 80047b0:	0380      	lsls	r0, r0, #14
 80047b2:	f7fb ffcb 	bl	800074c <RCC_APB1PeriphResetCmd>
 80047b6:	e7f3      	b.n	80047a0 <I2C_DeInit+0x1c>
 80047b8:	40005400 	.word	0x40005400

080047bc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80047bc:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 80047be:	2401      	movs	r4, #1
 80047c0:	6803      	ldr	r3, [r0, #0]
 80047c2:	43a3      	bics	r3, r4
 80047c4:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80047c6:	6802      	ldr	r2, [r0, #0]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 80047c8:	4b12      	ldr	r3, [pc, #72]	; (8004814 <I2C_Init+0x58>)
 80047ca:	4013      	ands	r3, r2
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 80047cc:	688a      	ldr	r2, [r1, #8]
 80047ce:	0212      	lsls	r2, r2, #8
 80047d0:	4313      	orrs	r3, r2
 80047d2:	684a      	ldr	r2, [r1, #4]
 80047d4:	4313      	orrs	r3, r2

  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80047d6:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80047d8:	680a      	ldr	r2, [r1, #0]
 80047da:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <I2C_Init+0x5c>)
 80047dc:	4013      	ands	r3, r2
 80047de:	6103      	str	r3, [r0, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80047e0:	6803      	ldr	r3, [r0, #0]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80047e2:	698a      	ldr	r2, [r1, #24]
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80047e4:	431c      	orrs	r4, r3

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80047e6:	2300      	movs	r3, #0
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80047e8:	6004      	str	r4, [r0, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80047ea:	6083      	str	r3, [r0, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 80047ec:	60c3      	str	r3, [r0, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	4313      	orrs	r3, r2
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80047f2:	2280      	movs	r2, #128	; 0x80
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 80047f4:	6083      	str	r3, [r0, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 80047f6:	6883      	ldr	r3, [r0, #8]
 80047f8:	0212      	lsls	r2, r2, #8
 80047fa:	4313      	orrs	r3, r2
 80047fc:	6083      	str	r3, [r0, #8]
  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 80047fe:	6803      	ldr	r3, [r0, #0]
 8004800:	68ca      	ldr	r2, [r1, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	6003      	str	r3, [r0, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8004806:	6842      	ldr	r2, [r0, #4]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8004808:	4b04      	ldr	r3, [pc, #16]	; (800481c <I2C_Init+0x60>)
 800480a:	4013      	ands	r3, r2
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 800480c:	694a      	ldr	r2, [r1, #20]
 800480e:	4313      	orrs	r3, r2
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8004810:	6043      	str	r3, [r0, #4]
}
 8004812:	bd10      	pop	{r4, pc}
 8004814:	00cfe0ff 	.word	0x00cfe0ff
 8004818:	f0ffffff 	.word	0xf0ffffff
 800481c:	07ff7fff 	.word	0x07ff7fff

08004820 <I2C_StructInit>:
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8004820:	2280      	movs	r2, #128	; 0x80
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 8004822:	2300      	movs	r3, #0
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8004824:	0212      	lsls	r2, r2, #8
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
  /*---------------- Reset I2C init structure parameters values --------------*/
  /* Initialize the I2C_Timing member */
  I2C_InitStruct->I2C_Timing = 0;
 8004826:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_AnalogFilter member */
  I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8004828:	6043      	str	r3, [r0, #4]
  /* Initialize the I2C_DigitalFilter member */
  I2C_InitStruct->I2C_DigitalFilter = 0;
 800482a:	6083      	str	r3, [r0, #8]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800482c:	60c3      	str	r3, [r0, #12]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800482e:	6103      	str	r3, [r0, #16]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8004830:	6142      	str	r2, [r0, #20]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004832:	6183      	str	r3, [r0, #24]
}
 8004834:	4770      	bx	lr
 8004836:	46c0      	nop			; (mov r8, r8)

08004838 <I2C_Cmd>:
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004838:	2900      	cmp	r1, #0
 800483a:	d104      	bne.n	8004846 <I2C_Cmd+0xe>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 800483c:	2201      	movs	r2, #1
 800483e:	6803      	ldr	r3, [r0, #0]
 8004840:	4393      	bics	r3, r2
 8004842:	6003      	str	r3, [r0, #0]
  }
}
 8004844:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8004846:	2301      	movs	r3, #1
 8004848:	6802      	ldr	r2, [r0, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	6003      	str	r3, [r0, #0]
 800484e:	e7f9      	b.n	8004844 <I2C_Cmd+0xc>

08004850 <I2C_SoftwareResetCmd>:
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004850:	2900      	cmp	r1, #0
 8004852:	d104      	bne.n	800485e <I2C_SoftwareResetCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SWRST);
 8004854:	6802      	ldr	r2, [r0, #0]
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <I2C_SoftwareResetCmd+0x1c>)
 8004858:	4013      	ands	r3, r2
 800485a:	6003      	str	r3, [r0, #0]
  }
}
 800485c:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	6803      	ldr	r3, [r0, #0]
 8004862:	0192      	lsls	r2, r2, #6
 8004864:	4313      	orrs	r3, r2
 8004866:	6003      	str	r3, [r0, #0]
 8004868:	e7f8      	b.n	800485c <I2C_SoftwareResetCmd+0xc>
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	ffffdfff 	.word	0xffffdfff

08004870 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 8004870:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8004872:	2a00      	cmp	r2, #0
 8004874:	d102      	bne.n	800487c <I2C_ITConfig+0xc>
    I2Cx->CR1 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 8004876:	438b      	bics	r3, r1
 8004878:	6003      	str	r3, [r0, #0]
  }
}
 800487a:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR1 |= I2C_IT;
 800487c:	4319      	orrs	r1, r3
 800487e:	6001      	str	r1, [r0, #0]
 8004880:	e7fb      	b.n	800487a <I2C_ITConfig+0xa>
 8004882:	46c0      	nop			; (mov r8, r8)

08004884 <I2C_StretchClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004884:	2900      	cmp	r1, #0
 8004886:	d105      	bne.n	8004894 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
  }
  else
  {
    /* Disable clock stretching  */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8004888:	2280      	movs	r2, #128	; 0x80
 800488a:	6803      	ldr	r3, [r0, #0]
 800488c:	0292      	lsls	r2, r2, #10
 800488e:	4313      	orrs	r3, r2
 8004890:	6003      	str	r3, [r0, #0]
  }
}
 8004892:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable clock stretching */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 8004894:	6802      	ldr	r2, [r0, #0]
 8004896:	4b02      	ldr	r3, [pc, #8]	; (80048a0 <I2C_StretchClockCmd+0x1c>)
 8004898:	4013      	ands	r3, r2
 800489a:	6003      	str	r3, [r0, #0]
 800489c:	e7f9      	b.n	8004892 <I2C_StretchClockCmd+0xe>
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	fffdffff 	.word	0xfffdffff

080048a4 <I2C_StopModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d104      	bne.n	80048b2 <I2C_StopModeCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
  }
  else
  {
    /* Disable wakeup from stop mode */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 80048a8:	6802      	ldr	r2, [r0, #0]
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <I2C_StopModeCmd+0x1c>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	6003      	str	r3, [r0, #0]
  }
}
 80048b0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable wakeup from stop mode */
    I2Cx->CR1 |= I2C_CR1_WUPEN;   
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	6803      	ldr	r3, [r0, #0]
 80048b6:	02d2      	lsls	r2, r2, #11
 80048b8:	4313      	orrs	r3, r2
 80048ba:	6003      	str	r3, [r0, #0]
 80048bc:	e7f8      	b.n	80048b0 <I2C_StopModeCmd+0xc>
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	fffbffff 	.word	0xfffbffff

080048c4 <I2C_DualAddressCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d104      	bne.n	80048d2 <I2C_DualAddressCmd+0xe>
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
  }
  else
  {
    /* Disable own address 2 */
    I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 80048c8:	68c2      	ldr	r2, [r0, #12]
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <I2C_DualAddressCmd+0x1c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	60c3      	str	r3, [r0, #12]
  }
}    
 80048d0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable own address 2 */
    I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	68c3      	ldr	r3, [r0, #12]
 80048d6:	0212      	lsls	r2, r2, #8
 80048d8:	4313      	orrs	r3, r2
 80048da:	60c3      	str	r3, [r0, #12]
 80048dc:	e7f8      	b.n	80048d0 <I2C_DualAddressCmd+0xc>
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	ffff7fff 	.word	0xffff7fff

080048e4 <I2C_OwnAddress2Config>:
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 80048e4:	b510      	push	{r4, lr}
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <I2C_OwnAddress2Config+0x20>)
  *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
  *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
  * @retval None
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
{
 80048e8:	1c0c      	adds	r4, r1, #0
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_OWN_ADDRESS2(Address));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80048ea:	68c1      	ldr	r1, [r0, #12]
  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 80048ec:	0212      	lsls	r2, r2, #8
  
  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 80048ee:	400b      	ands	r3, r1

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80048f0:	21fe      	movs	r1, #254	; 0xfe
 80048f2:	4021      	ands	r1, r4
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 80048f4:	24e0      	movs	r4, #224	; 0xe0
 80048f6:	00e4      	lsls	r4, r4, #3
 80048f8:	4022      	ands	r2, r4

  /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 80048fa:	4311      	orrs	r1, r2
 80048fc:	4319      	orrs	r1, r3
            (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80048fe:	60c1      	str	r1, [r0, #12]
}
 8004900:	bd10      	pop	{r4, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	fffff801 	.word	0xfffff801

08004908 <I2C_GeneralCallCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004908:	2900      	cmp	r1, #0
 800490a:	d104      	bne.n	8004916 <I2C_GeneralCallCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_GCEN;
  }
  else
  {
    /* Disable general call mode */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 800490c:	6802      	ldr	r2, [r0, #0]
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <I2C_GeneralCallCmd+0x1c>)
 8004910:	4013      	ands	r3, r2
 8004912:	6003      	str	r3, [r0, #0]
  }
} 
 8004914:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable general call mode */
    I2Cx->CR1 |= I2C_CR1_GCEN;
 8004916:	2280      	movs	r2, #128	; 0x80
 8004918:	6803      	ldr	r3, [r0, #0]
 800491a:	0312      	lsls	r2, r2, #12
 800491c:	4313      	orrs	r3, r2
 800491e:	6003      	str	r3, [r0, #0]
 8004920:	e7f8      	b.n	8004914 <I2C_GeneralCallCmd+0xc>
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	fff7ffff 	.word	0xfff7ffff

08004928 <I2C_SlaveByteControlCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004928:	2900      	cmp	r1, #0
 800492a:	d104      	bne.n	8004936 <I2C_SlaveByteControlCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_SBC;
  }
  else
  {
    /* Disable slave byte control */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 800492c:	6802      	ldr	r2, [r0, #0]
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <I2C_SlaveByteControlCmd+0x1c>)
 8004930:	4013      	ands	r3, r2
 8004932:	6003      	str	r3, [r0, #0]
  }
}
 8004934:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable slave byte control */
    I2Cx->CR1 |= I2C_CR1_SBC;
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	6803      	ldr	r3, [r0, #0]
 800493a:	0252      	lsls	r2, r2, #9
 800493c:	4313      	orrs	r3, r2
 800493e:	6003      	str	r3, [r0, #0]
 8004940:	e7f8      	b.n	8004934 <I2C_SlaveByteControlCmd+0xc>
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	fffeffff 	.word	0xfffeffff

08004948 <I2C_SlaveAddressConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 8004948:	6843      	ldr	r3, [r0, #4]

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 800494a:	0589      	lsls	r1, r1, #22
               
  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx SADD bit [9:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 800494c:	0a9b      	lsrs	r3, r3, #10
 800494e:	029b      	lsls	r3, r3, #10

  /* Set I2Cx SADD */
  tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 8004950:	0d89      	lsrs	r1, r1, #22
 8004952:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 8004954:	6041      	str	r1, [r0, #4]
}
 8004956:	4770      	bx	lr

08004958 <I2C_10BitAddressingModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004958:	2900      	cmp	r1, #0
 800495a:	d104      	bne.n	8004966 <I2C_10BitAddressingModeCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_ADD10;
  }
  else
  {
    /* Disable 10-bit addressing mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 800495c:	6842      	ldr	r2, [r0, #4]
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <I2C_10BitAddressingModeCmd+0x1c>)
 8004960:	4013      	ands	r3, r2
 8004962:	6043      	str	r3, [r0, #4]
  }
} 
 8004964:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit addressing mode */
    I2Cx->CR2 |= I2C_CR2_ADD10;
 8004966:	2280      	movs	r2, #128	; 0x80
 8004968:	6843      	ldr	r3, [r0, #4]
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	4313      	orrs	r3, r2
 800496e:	6043      	str	r3, [r0, #4]
 8004970:	e7f8      	b.n	8004964 <I2C_10BitAddressingModeCmd+0xc>
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	fffff7ff 	.word	0xfffff7ff

08004978 <I2C_AutoEndCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004978:	2900      	cmp	r1, #0
 800497a:	d104      	bne.n	8004986 <I2C_AutoEndCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
  }
  else
  {
    /* Disable Auto end mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 800497c:	6842      	ldr	r2, [r0, #4]
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <I2C_AutoEndCmd+0x1c>)
 8004980:	4013      	ands	r3, r2
 8004982:	6043      	str	r3, [r0, #4]
  }
} 
 8004984:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto end mode */
    I2Cx->CR2 |= I2C_CR2_AUTOEND;
 8004986:	2280      	movs	r2, #128	; 0x80
 8004988:	6843      	ldr	r3, [r0, #4]
 800498a:	0492      	lsls	r2, r2, #18
 800498c:	4313      	orrs	r3, r2
 800498e:	6043      	str	r3, [r0, #4]
 8004990:	e7f8      	b.n	8004984 <I2C_AutoEndCmd+0xc>
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	fdffffff 	.word	0xfdffffff

08004998 <I2C_ReloadCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004998:	2900      	cmp	r1, #0
 800499a:	d104      	bne.n	80049a6 <I2C_ReloadCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_RELOAD;
  }
  else
  {
    /* Disable Auto Reload mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 800499c:	6842      	ldr	r2, [r0, #4]
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <I2C_ReloadCmd+0x1c>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	6043      	str	r3, [r0, #4]
  }
}
 80049a4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Auto Reload mode */
    I2Cx->CR2 |= I2C_CR2_RELOAD;
 80049a6:	2280      	movs	r2, #128	; 0x80
 80049a8:	6843      	ldr	r3, [r0, #4]
 80049aa:	0452      	lsls	r2, r2, #17
 80049ac:	4313      	orrs	r3, r2
 80049ae:	6043      	str	r3, [r0, #4]
 80049b0:	e7f8      	b.n	80049a4 <I2C_ReloadCmd+0xc>
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	feffffff 	.word	0xfeffffff

080049b8 <I2C_NumberOfBytesConfig>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->CR2;
 80049b8:	6842      	ldr	r2, [r0, #4]

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 80049ba:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <I2C_NumberOfBytesConfig+0x10>)

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 80049bc:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->CR2;

  /* Reset I2Cx Nbytes bit [7:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 80049be:	4013      	ands	r3, r2

  /* Set I2Cx Nbytes */
  tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 80049c0:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->CR2 = tmpreg;
 80049c2:	6041      	str	r1, [r0, #4]
}  
 80049c4:	4770      	bx	lr
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	ff00ffff 	.word	0xff00ffff

080049cc <I2C_MasterRequestConfig>:
/* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d005      	beq.n	80049dc <I2C_MasterRequestConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
  }
  else
  {
    /* Request a read Transfer */
    I2Cx->CR2 |= I2C_CR2_RD_WRN;
 80049d0:	2280      	movs	r2, #128	; 0x80
 80049d2:	6843      	ldr	r3, [r0, #4]
 80049d4:	00d2      	lsls	r2, r2, #3
 80049d6:	4313      	orrs	r3, r2
 80049d8:	6043      	str	r3, [r0, #4]
  }
}  
 80049da:	4770      	bx	lr
  
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction == I2C_Direction_Transmitter)
  {
    /* Request a write Transfer */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 80049dc:	6842      	ldr	r2, [r0, #4]
 80049de:	4b02      	ldr	r3, [pc, #8]	; (80049e8 <I2C_MasterRequestConfig+0x1c>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	6043      	str	r3, [r0, #4]
 80049e4:	e7f9      	b.n	80049da <I2C_MasterRequestConfig+0xe>
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	fffffbff 	.word	0xfffffbff

080049ec <I2C_GenerateSTART>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80049ec:	2900      	cmp	r1, #0
 80049ee:	d104      	bne.n	80049fa <I2C_GenerateSTART+0xe>
    I2Cx->CR2 |= I2C_CR2_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 80049f0:	6842      	ldr	r2, [r0, #4]
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <I2C_GenerateSTART+0x1c>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	6043      	str	r3, [r0, #4]
  }
}  
 80049f8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR2 |= I2C_CR2_START;
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	6843      	ldr	r3, [r0, #4]
 80049fe:	0192      	lsls	r2, r2, #6
 8004a00:	4313      	orrs	r3, r2
 8004a02:	6043      	str	r3, [r0, #4]
 8004a04:	e7f8      	b.n	80049f8 <I2C_GenerateSTART+0xc>
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	ffffdfff 	.word	0xffffdfff

08004a0c <I2C_GenerateSTOP>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004a0c:	2900      	cmp	r1, #0
 8004a0e:	d104      	bne.n	8004a1a <I2C_GenerateSTOP+0xe>
    I2Cx->CR2 |= I2C_CR2_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 8004a10:	6842      	ldr	r2, [r0, #4]
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <I2C_GenerateSTOP+0x1c>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	6043      	str	r3, [r0, #4]
  }
}  
 8004a18:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR2 |= I2C_CR2_STOP;
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	6843      	ldr	r3, [r0, #4]
 8004a1e:	01d2      	lsls	r2, r2, #7
 8004a20:	4313      	orrs	r3, r2
 8004a22:	6043      	str	r3, [r0, #4]
 8004a24:	e7f8      	b.n	8004a18 <I2C_GenerateSTOP+0xc>
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	ffffbfff 	.word	0xffffbfff

08004a2c <I2C_10BitAddressHeaderCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	d104      	bne.n	8004a3a <I2C_10BitAddressHeaderCmd+0xe>
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
  }
  else
  {
    /* Disable 10-bit header only mode */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 8004a30:	6842      	ldr	r2, [r0, #4]
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <I2C_10BitAddressHeaderCmd+0x1c>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	6043      	str	r3, [r0, #4]
  }
}    
 8004a38:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable 10-bit header only mode */
    I2Cx->CR2 |= I2C_CR2_HEAD10R;
 8004a3a:	2280      	movs	r2, #128	; 0x80
 8004a3c:	6843      	ldr	r3, [r0, #4]
 8004a3e:	0152      	lsls	r2, r2, #5
 8004a40:	4313      	orrs	r3, r2
 8004a42:	6043      	str	r3, [r0, #4]
 8004a44:	e7f8      	b.n	8004a38 <I2C_10BitAddressHeaderCmd+0xc>
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	ffffefff 	.word	0xffffefff

08004a4c <I2C_AcknowledgeConfig>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	d105      	bne.n	8004a5c <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
  }
  else
  {
    /* Enable NACK generation */
    I2Cx->CR2 |= I2C_CR2_NACK;
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	6843      	ldr	r3, [r0, #4]
 8004a54:	0212      	lsls	r2, r2, #8
 8004a56:	4313      	orrs	r3, r2
 8004a58:	6043      	str	r3, [r0, #4]
  }
}
 8004a5a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable ACK generation */
    I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 8004a5c:	6842      	ldr	r2, [r0, #4]
 8004a5e:	4b02      	ldr	r3, [pc, #8]	; (8004a68 <I2C_AcknowledgeConfig+0x1c>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	6043      	str	r3, [r0, #4]
 8004a64:	e7f9      	b.n	8004a5a <I2C_AcknowledgeConfig+0xe>
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	ffff7fff 	.word	0xffff7fff

08004a6c <I2C_GetAddressMatched>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 8004a6c:	23fe      	movs	r3, #254	; 0xfe
 8004a6e:	6980      	ldr	r0, [r0, #24]
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	4018      	ands	r0, r3
 8004a74:	0c00      	lsrs	r0, r0, #16
}
 8004a76:	4770      	bx	lr

08004a78 <I2C_GetTransferDirection>:
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 8004a78:	6980      	ldr	r0, [r0, #24]
 8004a7a:	03c0      	lsls	r0, r0, #15
    direction = I2C_Direction_Transmitter;
  }
  else
  {
    /* Read transfer is requested */
    direction = I2C_Direction_Receiver;
 8004a7c:	0fc0      	lsrs	r0, r0, #31
 8004a7e:	0280      	lsls	r0, r0, #10
  }  
  return direction;
}
 8004a80:	4770      	bx	lr
 8004a82:	46c0      	nop			; (mov r8, r8)

08004a84 <I2C_TransferHandling>:
  *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8004a84:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 8004a86:	6844      	ldr	r4, [r0, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004a88:	4d05      	ldr	r5, [pc, #20]	; (8004aa0 <I2C_TransferHandling+0x1c>)
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8004a8a:	0589      	lsls	r1, r1, #22
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004a8c:	402c      	ands	r4, r5
 8004a8e:	9d03      	ldr	r5, [sp, #12]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 8004a90:	0d89      	lsrs	r1, r1, #22
 8004a92:	432c      	orrs	r4, r5
 8004a94:	4323      	orrs	r3, r4
 8004a96:	430b      	orrs	r3, r1
 8004a98:	0412      	lsls	r2, r2, #16
 8004a9a:	4313      	orrs	r3, r2
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 8004a9c:	6043      	str	r3, [r0, #4]
}
 8004a9e:	bd30      	pop	{r4, r5, pc}
 8004aa0:	fc009800 	.word	0xfc009800

08004aa4 <I2C_SMBusAlertCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	d104      	bne.n	8004ab2 <I2C_SMBusAlertCmd+0xe>
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
  }
  else
  {
    /* Disable SMBus alert */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 8004aa8:	6802      	ldr	r2, [r0, #0]
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <I2C_SMBusAlertCmd+0x1c>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	6003      	str	r3, [r0, #0]
  }
}
 8004ab0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable SMBus alert */
    I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	6803      	ldr	r3, [r0, #0]
 8004ab6:	03d2      	lsls	r2, r2, #15
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	6003      	str	r3, [r0, #0]
 8004abc:	e7f8      	b.n	8004ab0 <I2C_SMBusAlertCmd+0xc>
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	ffbfffff 	.word	0xffbfffff

08004ac4 <I2C_ClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	d104      	bne.n	8004ad2 <I2C_ClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 8004ac8:	6942      	ldr	r2, [r0, #20]
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <I2C_ClockTimeoutCmd+0x1c>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	6143      	str	r3, [r0, #20]
  }
}
 8004ad0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	6943      	ldr	r3, [r0, #20]
 8004ad6:	0212      	lsls	r2, r2, #8
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	6143      	str	r3, [r0, #20]
 8004adc:	e7f8      	b.n	8004ad0 <I2C_ClockTimeoutCmd+0xc>
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	ffff7fff 	.word	0xffff7fff

08004ae4 <I2C_ExtendedClockTimeoutCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 8004ae4:	6943      	ldr	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d103      	bne.n	8004af2 <I2C_ExtendedClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	6143      	str	r3, [r0, #20]
  }
}
 8004af0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 8004af2:	2280      	movs	r2, #128	; 0x80
 8004af4:	0612      	lsls	r2, r2, #24
 8004af6:	4313      	orrs	r3, r2
 8004af8:	6143      	str	r3, [r0, #20]
 8004afa:	e7f9      	b.n	8004af0 <I2C_ExtendedClockTimeoutCmd+0xc>

08004afc <I2C_IdleClockTimeoutCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d104      	bne.n	8004b0a <I2C_IdleClockTimeoutCmd+0xe>
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
  }
  else
  {
    /* Disable Clock Timeout */    
    I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 8004b00:	6942      	ldr	r2, [r0, #20]
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <I2C_IdleClockTimeoutCmd+0x1c>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	6143      	str	r3, [r0, #20]
  }
}
 8004b08:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Clock Timeout */
    I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	6943      	ldr	r3, [r0, #20]
 8004b0e:	0152      	lsls	r2, r2, #5
 8004b10:	4313      	orrs	r3, r2
 8004b12:	6143      	str	r3, [r0, #20]
 8004b14:	e7f8      	b.n	8004b08 <I2C_IdleClockTimeoutCmd+0xc>
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	ffffefff 	.word	0xffffefff

08004b1c <I2C_TimeoutAConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8004b1c:	6943      	ldr	r3, [r0, #20]

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8004b1e:	0509      	lsls	r1, r1, #20
    
  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTA bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 8004b20:	0b1b      	lsrs	r3, r3, #12
 8004b22:	031b      	lsls	r3, r3, #12

  /* Set I2Cx TIMEOUTA */
  tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 8004b24:	0d09      	lsrs	r1, r1, #20
 8004b26:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8004b28:	6141      	str	r1, [r0, #20]
}
 8004b2a:	4770      	bx	lr

08004b2c <I2C_TimeoutBConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_I2C_TIMEOUT(Timeout));

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;
 8004b2c:	6942      	ldr	r2, [r0, #20]

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <I2C_TimeoutBConfig+0x14>)

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8004b30:	0409      	lsls	r1, r1, #16

  /* Get the old register value */
  tmpreg = I2Cx->TIMEOUTR;

  /* Reset I2Cx TIMEOUTB bit [11:0] */
  tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 8004b32:	4013      	ands	r3, r2

  /* Set I2Cx TIMEOUTB */
  tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 8004b34:	4a03      	ldr	r2, [pc, #12]	; (8004b44 <I2C_TimeoutBConfig+0x18>)
 8004b36:	4011      	ands	r1, r2
 8004b38:	4319      	orrs	r1, r3

  /* Store the new register value */
  I2Cx->TIMEOUTR = tmpreg;
 8004b3a:	6141      	str	r1, [r0, #20]
}
 8004b3c:	4770      	bx	lr
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	f000ffff 	.word	0xf000ffff
 8004b44:	0fff0000 	.word	0x0fff0000

08004b48 <I2C_CalculatePEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	d104      	bne.n	8004b56 <I2C_CalculatePEC+0xe>
    I2Cx->CR1 |= I2C_CR1_PECEN;   
  }
  else
  {
    /* Disable PEC calculation */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 8004b4c:	6802      	ldr	r2, [r0, #0]
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <I2C_CalculatePEC+0x1c>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	6003      	str	r3, [r0, #0]
  }
}
 8004b54:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC calculation */
    I2Cx->CR1 |= I2C_CR1_PECEN;   
 8004b56:	2280      	movs	r2, #128	; 0x80
 8004b58:	6803      	ldr	r3, [r0, #0]
 8004b5a:	0412      	lsls	r2, r2, #16
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	6003      	str	r3, [r0, #0]
 8004b60:	e7f8      	b.n	8004b54 <I2C_CalculatePEC+0xc>
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	ff7fffff 	.word	0xff7fffff

08004b68 <I2C_PECRequestCmd>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	d104      	bne.n	8004b76 <I2C_PECRequestCmd+0xe>
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
  }
  else
  {
    /* Disable PEC transmission/reception request */    
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 8004b6c:	6802      	ldr	r2, [r0, #0]
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <I2C_PECRequestCmd+0x1c>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	6003      	str	r3, [r0, #0]
  }
}
 8004b74:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable PEC transmission/reception request */
    I2Cx->CR1 |= I2C_CR2_PECBYTE;   
 8004b76:	2280      	movs	r2, #128	; 0x80
 8004b78:	6803      	ldr	r3, [r0, #0]
 8004b7a:	04d2      	lsls	r2, r2, #19
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	6003      	str	r3, [r0, #0]
 8004b80:	e7f8      	b.n	8004b74 <I2C_PECRequestCmd+0xc>
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	fbffffff 	.word	0xfbffffff

08004b88 <I2C_GetPEC>:
{
  /* Check the parameters */
  assert_param(IS_I2C_1_PERIPH(I2Cx));
  
  /* Return the slave matched address in the SR1 register */
  return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 8004b88:	6a00      	ldr	r0, [r0, #32]
 8004b8a:	b2c0      	uxtb	r0, r0
}
 8004b8c:	4770      	bx	lr
 8004b8e:	46c0      	nop			; (mov r8, r8)

08004b90 <I2C_ReadRegister>:
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
  __IO uint32_t tmp = 0;
 8004b90:	2300      	movs	r3, #0
  *            @arg I2C_Register_RXDR: RXDR register.
  *            @arg I2C_Register_TXDR: TXDR register.
  * @retval The value of the read register.
  */
uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8004b92:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8004b94:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t)I2Cx;
 8004b96:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8004b98:	9b01      	ldr	r3, [sp, #4]
 8004b9a:	18c9      	adds	r1, r1, r3
 8004b9c:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint32_t *) tmp);
 8004b9e:	9b01      	ldr	r3, [sp, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
}
 8004ba2:	b002      	add	sp, #8
 8004ba4:	4770      	bx	lr
 8004ba6:	46c0      	nop			; (mov r8, r8)

08004ba8 <I2C_SendData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8004ba8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004baa:	4770      	bx	lr

08004bac <I2C_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 8004bac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004bae:	b2c0      	uxtb	r0, r0
}  
 8004bb0:	4770      	bx	lr
 8004bb2:	46c0      	nop			; (mov r8, r8)

08004bb4 <I2C_DMACmd>:
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8004bb4:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	d102      	bne.n	8004bc0 <I2C_DMACmd+0xc>
    I2Cx->CR1 |= I2C_DMAReq;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 8004bba:	438b      	bics	r3, r1
 8004bbc:	6003      	str	r3, [r0, #0]
  }
}
 8004bbe:	4770      	bx	lr
  assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR1 |= I2C_DMAReq;
 8004bc0:	4319      	orrs	r1, r3
 8004bc2:	6001      	str	r1, [r0, #0]
 8004bc4:	e7fb      	b.n	8004bbe <I2C_DMACmd+0xa>
 8004bc6:	46c0      	nop			; (mov r8, r8)

08004bc8 <I2C_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8004bc8:	6980      	ldr	r0, [r0, #24]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 8004bca:	4008      	ands	r0, r1
  
  if(tmpreg != 0)
 8004bcc:	1e41      	subs	r1, r0, #1
 8004bce:	4188      	sbcs	r0, r1
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  return bitstatus;
 8004bd0:	b2c0      	uxtb	r0, r0
} 
 8004bd2:	4770      	bx	lr

08004bd4 <I2C_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8004bd4:	61c1      	str	r1, [r0, #28]
  }
 8004bd6:	4770      	bx	lr

08004bd8 <I2C_GetITStatus>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  /* If Error interrupt */
  if((I2C_IT & ERROR_IT_MASK) != 0)
 8004bd8:	23fc      	movs	r3, #252	; 0xfc
 8004bda:	019b      	lsls	r3, r3, #6
 8004bdc:	4219      	tst	r1, r3
 8004bde:	d00a      	beq.n	8004bf6 <I2C_GetITStatus+0x1e>
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	6803      	ldr	r3, [r0, #0]
 8004be4:	4013      	ands	r3, r2
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
  }
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8004be6:	6982      	ldr	r2, [r0, #24]
    bitstatus = SET;
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8004be8:	2000      	movs	r0, #0

  /* Get flag status */
  tmpreg &= I2C_IT;

  /* Check the status of the specified I2C flag */
  if((tmpreg != RESET) && enablestatus)
 8004bea:	420a      	tst	r2, r1
 8004bec:	d002      	beq.n	8004bf4 <I2C_GetITStatus+0x1c>
 8004bee:	1e58      	subs	r0, r3, #1
 8004bf0:	4183      	sbcs	r3, r0
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8004bf2:	b2d8      	uxtb	r0, r3
    bitstatus = RESET;
  }

  /* Return the I2C_IT status */
  return bitstatus;
}
 8004bf4:	4770      	bx	lr
  if((I2C_IT & ERROR_IT_MASK) != 0)
  {
    enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
  }
  /* If TC interrupt */
  else if((I2C_IT & TC_IT_MASK) != 0)
 8004bf6:	23c0      	movs	r3, #192	; 0xc0
 8004bf8:	420b      	tst	r3, r1
 8004bfa:	d003      	beq.n	8004c04 <I2C_GetITStatus+0x2c>
  {
    enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 8004bfc:	2240      	movs	r2, #64	; 0x40
 8004bfe:	6803      	ldr	r3, [r0, #0]
 8004c00:	4013      	ands	r3, r2
 8004c02:	e7f0      	b.n	8004be6 <I2C_GetITStatus+0xe>
  }
  else
  {
    enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 8004c04:	6803      	ldr	r3, [r0, #0]
 8004c06:	400b      	ands	r3, r1
 8004c08:	e7ed      	b.n	8004be6 <I2C_GetITStatus+0xe>
 8004c0a:	46c0      	nop			; (mov r8, r8)

08004c0c <I2C_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_IT;
 8004c0c:	61c1      	str	r1, [r0, #28]
}
 8004c0e:	4770      	bx	lr

08004c10 <SPI_I2S_DeInit>:
  *         reset values.
  * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8004c10:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8004c12:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <SPI_I2S_DeInit+0x3c>)
 8004c14:	4298      	cmp	r0, r3
 8004c16:	d00e      	beq.n	8004c36 <SPI_I2S_DeInit+0x26>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else
  {
    if (SPIx == SPI2)
 8004c18:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <SPI_I2S_DeInit+0x40>)
 8004c1a:	4298      	cmp	r0, r3
 8004c1c:	d000      	beq.n	8004c20 <SPI_I2S_DeInit+0x10>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  }
}
 8004c1e:	bd08      	pop	{r3, pc}
  else
  {
    if (SPIx == SPI2)
    {
      /* Enable SPI2 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8004c20:	2080      	movs	r0, #128	; 0x80
 8004c22:	2101      	movs	r1, #1
 8004c24:	01c0      	lsls	r0, r0, #7
 8004c26:	f7fb fd91 	bl	800074c <RCC_APB1PeriphResetCmd>
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8004c2a:	2080      	movs	r0, #128	; 0x80
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	01c0      	lsls	r0, r0, #7
 8004c30:	f7fb fd8c 	bl	800074c <RCC_APB1PeriphResetCmd>
 8004c34:	e7f3      	b.n	8004c1e <SPI_I2S_DeInit+0xe>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8004c36:	2080      	movs	r0, #128	; 0x80
 8004c38:	2101      	movs	r1, #1
 8004c3a:	0140      	lsls	r0, r0, #5
 8004c3c:	f7fb fd7a 	bl	8000734 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8004c40:	2080      	movs	r0, #128	; 0x80
 8004c42:	2100      	movs	r1, #0
 8004c44:	0140      	lsls	r0, r0, #5
 8004c46:	f7fb fd75 	bl	8000734 <RCC_APB2PeriphResetCmd>
 8004c4a:	e7e8      	b.n	8004c1e <SPI_I2S_DeInit+0xe>
 8004c4c:	40013000 	.word	0x40013000
 8004c50:	40003800 	.word	0x40003800

08004c54 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004c54:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8004c56:	22e0      	movs	r2, #224	; 0xe0
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004c58:	8003      	strh	r3, [r0, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8004c5a:	8043      	strh	r3, [r0, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8004c5c:	00d2      	lsls	r2, r2, #3
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8004c5e:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8004c60:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8004c62:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8004c64:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8004c66:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8004c68:	3307      	adds	r3, #7
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8004c6a:	8082      	strh	r2, [r0, #4]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8004c6c:	8203      	strh	r3, [r0, #16]
}
 8004c6e:	4770      	bx	lr

08004c70 <SPI_Init>:

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004c70:	23c1      	movs	r3, #193	; 0xc1
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004c72:	b510      	push	{r4, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004c74:	8804      	ldrh	r4, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004c76:	019b      	lsls	r3, r3, #6
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8004c78:	89ca      	ldrh	r2, [r1, #14]

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004c7a:	401c      	ands	r4, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8004c7c:	880b      	ldrh	r3, [r1, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	88ca      	ldrh	r2, [r1, #6]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	890a      	ldrh	r2, [r1, #8]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	894a      	ldrh	r2, [r1, #10]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	898a      	ldrh	r2, [r1, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	4323      	orrs	r3, r4
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004c92:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8004c94:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8004c96:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <SPI_Init+0x4c>)
 8004c98:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8004c9a:	888a      	ldrh	r2, [r1, #4]
 8004c9c:	4313      	orrs	r3, r2
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8004c9e:	2204      	movs	r2, #4
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8004ca0:	8083      	strh	r3, [r0, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004ca2:	8a0b      	ldrh	r3, [r1, #16]
 8004ca4:	8203      	strh	r3, [r0, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004ca6:	8803      	ldrh	r3, [r0, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8004ca8:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8004caa:	884a      	ldrh	r2, [r1, #2]
 8004cac:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8004cae:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004cb0:	8b82      	ldrh	r2, [r0, #28]
 8004cb2:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <SPI_Init+0x50>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	8383      	strh	r3, [r0, #28]
}
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	fffff0ff 	.word	0xfffff0ff
 8004cc0:	fffff7ff 	.word	0xfffff7ff

08004cc4 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004cc4:	2300      	movs	r3, #0

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8004cc6:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8004cc8:	8003      	strh	r3, [r0, #0]

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8004cca:	8043      	strh	r3, [r0, #2]

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8004ccc:	8083      	strh	r3, [r0, #4]

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8004cce:	80c3      	strh	r3, [r0, #6]

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8004cd0:	6082      	str	r2, [r0, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8004cd2:	8183      	strh	r3, [r0, #12]
}
 8004cd4:	4770      	bx	lr
 8004cd6:	46c0      	nop			; (mov r8, r8)

08004cd8 <I2S_Init>:
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cda:	4647      	mov	r7, r8
 8004cdc:	b480      	push	{r7}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8004cde:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <I2S_Init+0xa4>)
 8004ce0:	8b82      	ldrh	r2, [r0, #28]
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004ce2:	b088      	sub	sp, #32
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8004ce4:	4013      	ands	r3, r2
  SPIx->I2SPR = 0x0002;
 8004ce6:	2202      	movs	r2, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8004ce8:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8004cea:	8402      	strh	r2, [r0, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004cec:	8b83      	ldrh	r3, [r0, #28]
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004cee:	1c05      	adds	r5, r0, #0
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8004cf0:	b29e      	uxth	r6, r3

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004cf2:	688b      	ldr	r3, [r1, #8]
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8004cf4:	1c0c      	adds	r4, r1, #0

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d037      	beq.n	8004d6a <I2S_Init+0x92>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8004cfa:	888b      	ldrh	r3, [r1, #4]
      /* Packet length is 32 bits */
      packetlength = 2;
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8004cfc:	a801      	add	r0, sp, #4
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8004cfe:	4259      	negs	r1, r3
 8004d00:	4159      	adcs	r1, r3
 8004d02:	1a53      	subs	r3, r2, r1
 8004d04:	4698      	mov	r8, r3
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8004d06:	f7fb fc35 	bl	8000574 <RCC_GetClocksFreq>

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	88e7      	ldrh	r7, [r4, #6]

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8004d0e:	9801      	ldr	r0, [sp, #4]

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	429f      	cmp	r7, r3
 8004d14:	d02b      	beq.n	8004d6e <I2S_Init+0x96>
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004d16:	4643      	mov	r3, r8
 8004d18:	0159      	lsls	r1, r3, #5
 8004d1a:	f000 f939 	bl	8004f90 <__aeabi_uidiv>
 8004d1e:	0083      	lsls	r3, r0, #2
 8004d20:	1818      	adds	r0, r3, r0
 8004d22:	68a1      	ldr	r1, [r4, #8]
 8004d24:	0040      	lsls	r0, r0, #1
 8004d26:	f000 f933 	bl	8004f90 <__aeabi_uidiv>
 8004d2a:	3005      	adds	r0, #5
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 8004d2c:	210a      	movs	r1, #10
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004d2e:	b280      	uxth	r0, r0
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 8004d30:	f000 f92e 	bl	8004f90 <__aeabi_uidiv>

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8004d34:	2301      	movs	r3, #1
 8004d36:	4003      	ands	r3, r0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	0840      	lsrs	r0, r0, #1
 8004d3c:	b280      	uxth	r0, r0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8004d3e:	1e81      	subs	r1, r0, #2
 8004d40:	2202      	movs	r2, #2
 8004d42:	29fd      	cmp	r1, #253	; 0xfd
 8004d44:	d915      	bls.n	8004d72 <I2S_Init+0x9a>
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8004d46:	4317      	orrs	r7, r2
 8004d48:	2280      	movs	r2, #128	; 0x80
 8004d4a:	8823      	ldrh	r3, [r4, #0]
 8004d4c:	842f      	strh	r7, [r5, #32]
 8004d4e:	4333      	orrs	r3, r6
 8004d50:	0112      	lsls	r2, r2, #4
 8004d52:	4313      	orrs	r3, r2
 8004d54:	8862      	ldrh	r2, [r4, #2]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	88a2      	ldrh	r2, [r4, #4]
 8004d5a:	4313      	orrs	r3, r2

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8004d5c:	89a2      	ldrh	r2, [r4, #12]
 8004d5e:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 8004d60:	83ab      	strh	r3, [r5, #28]
}
 8004d62:	b008      	add	sp, #32
 8004d64:	bc04      	pop	{r2}
 8004d66:	4690      	mov	r8, r2
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d6a:	88cf      	ldrh	r7, [r1, #6]
 8004d6c:	e7eb      	b.n	8004d46 <I2S_Init+0x6e>

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8004d6e:	0a00      	lsrs	r0, r0, #8
 8004d70:	e7d5      	b.n	8004d1e <I2S_Init+0x46>
 8004d72:	1c02      	adds	r2, r0, #0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	431a      	orrs	r2, r3
 8004d78:	e7e5      	b.n	8004d46 <I2S_Init+0x6e>
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	fffff040 	.word	0xfffff040

08004d80 <SPI_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004d80:	2900      	cmp	r1, #0
 8004d82:	d104      	bne.n	8004d8e <SPI_Cmd+0xe>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004d84:	2240      	movs	r2, #64	; 0x40
 8004d86:	8803      	ldrh	r3, [r0, #0]
 8004d88:	4393      	bics	r3, r2
 8004d8a:	8003      	strh	r3, [r0, #0]
  }
}
 8004d8c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004d8e:	2340      	movs	r3, #64	; 0x40
 8004d90:	8802      	ldrh	r2, [r0, #0]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	8003      	strh	r3, [r0, #0]
 8004d96:	e7f9      	b.n	8004d8c <SPI_Cmd+0xc>

08004d98 <SPI_TIModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004d98:	2900      	cmp	r1, #0
 8004d9a:	d104      	bne.n	8004da6 <SPI_TIModeCmd+0xe>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	8883      	ldrh	r3, [r0, #4]
 8004da0:	4393      	bics	r3, r2
 8004da2:	8083      	strh	r3, [r0, #4]
  }
}
 8004da4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8004da6:	2310      	movs	r3, #16
 8004da8:	8882      	ldrh	r2, [r0, #4]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	8083      	strh	r3, [r0, #4]
 8004dae:	e7f9      	b.n	8004da4 <SPI_TIModeCmd+0xc>

08004db0 <I2S_Cmd>:
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004db0:	2900      	cmp	r1, #0
 8004db2:	d104      	bne.n	8004dbe <I2S_Cmd+0xe>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8004db4:	8b82      	ldrh	r2, [r0, #28]
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <I2S_Cmd+0x1c>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	8383      	strh	r3, [r0, #28]
  }
}
 8004dbc:	4770      	bx	lr
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	8b83      	ldrh	r3, [r0, #28]
 8004dc2:	00d2      	lsls	r2, r2, #3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	8383      	strh	r3, [r0, #28]
 8004dc8:	e7f8      	b.n	8004dbc <I2S_Cmd+0xc>
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	fffffbff 	.word	0xfffffbff

08004dd0 <SPI_DataSizeConfig>:
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 8004dd0:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 8004dd2:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <SPI_DataSizeConfig+0xc>)
 8004dd4:	4013      	ands	r3, r2
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 8004dd6:	4319      	orrs	r1, r3
  SPIx->CR2 = tmpreg;
 8004dd8:	8081      	strh	r1, [r0, #4]
}
 8004dda:	4770      	bx	lr
 8004ddc:	fffff0ff 	.word	0xfffff0ff

08004de0 <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8004de0:	8882      	ldrh	r2, [r0, #4]
 8004de2:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <SPI_RxFIFOThresholdConfig+0x10>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8004de8:	8883      	ldrh	r3, [r0, #4]
 8004dea:	4319      	orrs	r1, r3
 8004dec:	8081      	strh	r1, [r0, #4]
}
 8004dee:	4770      	bx	lr
 8004df0:	ffffefff 	.word	0xffffefff

08004df4 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	01db      	lsls	r3, r3, #7
 8004df8:	4299      	cmp	r1, r3
 8004dfa:	d004      	beq.n	8004e06 <SPI_BiDirectionalLineConfig+0x12>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8004dfc:	8802      	ldrh	r2, [r0, #0]
 8004dfe:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <SPI_BiDirectionalLineConfig+0x1c>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	8003      	strh	r3, [r0, #0]
  }
}
 8004e04:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8004e06:	8803      	ldrh	r3, [r0, #0]
 8004e08:	4319      	orrs	r1, r3
 8004e0a:	8001      	strh	r1, [r0, #0]
 8004e0c:	e7fa      	b.n	8004e04 <SPI_BiDirectionalLineConfig+0x10>
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	ffffbfff 	.word	0xffffbfff

08004e14 <SPI_NSSInternalSoftwareConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <SPI_NSSInternalSoftwareConfig+0x1c>)
 8004e16:	4299      	cmp	r1, r3
 8004e18:	d005      	beq.n	8004e26 <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8004e1a:	2280      	movs	r2, #128	; 0x80
 8004e1c:	8803      	ldrh	r3, [r0, #0]
 8004e1e:	0052      	lsls	r2, r2, #1
 8004e20:	4313      	orrs	r3, r2
 8004e22:	8003      	strh	r3, [r0, #0]
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  }
}
 8004e24:	4770      	bx	lr
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8004e26:	8802      	ldrh	r2, [r0, #0]
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <SPI_NSSInternalSoftwareConfig+0x20>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	8003      	strh	r3, [r0, #0]
 8004e2e:	e7f9      	b.n	8004e24 <SPI_NSSInternalSoftwareConfig+0x10>
 8004e30:	0000feff 	.word	0x0000feff
 8004e34:	fffffeff 	.word	0xfffffeff

08004e38 <SPI_SSOutputCmd>:
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	d104      	bne.n	8004e46 <SPI_SSOutputCmd+0xe>
    SPIx->CR2 |= SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	8883      	ldrh	r3, [r0, #4]
 8004e40:	4393      	bics	r3, r2
 8004e42:	8083      	strh	r3, [r0, #4]
  }
}
 8004e44:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 8004e46:	2304      	movs	r3, #4
 8004e48:	8882      	ldrh	r2, [r0, #4]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	8083      	strh	r3, [r0, #4]
 8004e4e:	e7f9      	b.n	8004e44 <SPI_SSOutputCmd+0xc>

08004e50 <SPI_NSSPulseModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e50:	2900      	cmp	r1, #0
 8004e52:	d104      	bne.n	8004e5e <SPI_NSSPulseModeCmd+0xe>
    SPIx->CR2 |= SPI_CR2_NSSP;
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 8004e54:	2208      	movs	r2, #8
 8004e56:	8883      	ldrh	r3, [r0, #4]
 8004e58:	4393      	bics	r3, r2
 8004e5a:	8083      	strh	r3, [r0, #4]
  }
}
 8004e5c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 8004e5e:	2308      	movs	r3, #8
 8004e60:	8882      	ldrh	r2, [r0, #4]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	8083      	strh	r3, [r0, #4]
 8004e66:	e7f9      	b.n	8004e5c <SPI_NSSPulseModeCmd+0xc>

08004e68 <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 8004e68:	7301      	strb	r1, [r0, #12]
}
 8004e6a:	4770      	bx	lr

08004e6c <SPI_I2S_SendData16>:
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8004e6c:	8181      	strh	r1, [r0, #12]
}
 8004e6e:	4770      	bx	lr

08004e70 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8004e70:	7b00      	ldrb	r0, [r0, #12]
 8004e72:	b2c0      	uxtb	r0, r0
}
 8004e74:	4770      	bx	lr
 8004e76:	46c0      	nop			; (mov r8, r8)

08004e78 <SPI_I2S_ReceiveData16>:
  *         the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
  return SPIx->DR;
 8004e78:	8980      	ldrh	r0, [r0, #12]
 8004e7a:	b280      	uxth	r0, r0
}
 8004e7c:	4770      	bx	lr
 8004e7e:	46c0      	nop			; (mov r8, r8)

08004e80 <SPI_CRCLengthConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 8004e80:	8802      	ldrh	r2, [r0, #0]
 8004e82:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <SPI_CRCLengthConfig+0x10>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	8003      	strh	r3, [r0, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 8004e88:	8803      	ldrh	r3, [r0, #0]
 8004e8a:	4319      	orrs	r1, r3
 8004e8c:	8001      	strh	r1, [r0, #0]
}
 8004e8e:	4770      	bx	lr
 8004e90:	fffff7ff 	.word	0xfffff7ff

08004e94 <SPI_CalculateCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004e94:	2900      	cmp	r1, #0
 8004e96:	d104      	bne.n	8004ea2 <SPI_CalculateCRC+0xe>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8004e98:	8802      	ldrh	r2, [r0, #0]
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <SPI_CalculateCRC+0x1c>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	8003      	strh	r3, [r0, #0]
  }
}
 8004ea0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8004ea2:	2280      	movs	r2, #128	; 0x80
 8004ea4:	8803      	ldrh	r3, [r0, #0]
 8004ea6:	0192      	lsls	r2, r2, #6
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	8003      	strh	r3, [r0, #0]
 8004eac:	e7f8      	b.n	8004ea0 <SPI_CalculateCRC+0xc>
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	ffffdfff 	.word	0xffffdfff

08004eb4 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8004eb4:	2280      	movs	r2, #128	; 0x80
 8004eb6:	8803      	ldrh	r3, [r0, #0]
 8004eb8:	0152      	lsls	r2, r2, #5
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	8003      	strh	r3, [r0, #0]
}
 8004ebe:	4770      	bx	lr

08004ec0 <SPI_GetCRC>:
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 8004ec0:	2901      	cmp	r1, #1
 8004ec2:	d002      	beq.n	8004eca <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8004ec4:	8b00      	ldrh	r0, [r0, #24]
 8004ec6:	b280      	uxth	r0, r0
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8004ec8:	4770      	bx	lr
    crcreg = SPIx->TXCRCR;
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8004eca:	8a80      	ldrh	r0, [r0, #20]
 8004ecc:	b280      	uxth	r0, r0
 8004ece:	e7fb      	b.n	8004ec8 <SPI_GetCRC+0x8>

08004ed0 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8004ed0:	8a00      	ldrh	r0, [r0, #16]
 8004ed2:	b280      	uxth	r0, r0
}
 8004ed4:	4770      	bx	lr
 8004ed6:	46c0      	nop			; (mov r8, r8)

08004ed8 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004ed8:	8883      	ldrh	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	d102      	bne.n	8004ee4 <SPI_I2S_DMACmd+0xc>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8004ede:	438b      	bics	r3, r1
 8004ee0:	8083      	strh	r3, [r0, #4]
  }
}
 8004ee2:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004ee4:	4319      	orrs	r1, r3
 8004ee6:	8081      	strh	r1, [r0, #4]
 8004ee8:	e7fb      	b.n	8004ee2 <SPI_I2S_DMACmd+0xa>
 8004eea:	46c0      	nop			; (mov r8, r8)

08004eec <SPI_LastDMATransferCmd>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 8004eec:	8882      	ldrh	r2, [r0, #4]
 8004eee:	4b03      	ldr	r3, [pc, #12]	; (8004efc <SPI_LastDMATransferCmd+0x10>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	8083      	strh	r3, [r0, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 8004ef4:	8883      	ldrh	r3, [r0, #4]
 8004ef6:	4319      	orrs	r1, r3
 8004ef8:	8081      	strh	r1, [r0, #4]
}
 8004efa:	4770      	bx	lr
 8004efc:	ffff9fff 	.word	0xffff9fff

08004f00 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8004f00:	2301      	movs	r3, #1
 8004f02:	0909      	lsrs	r1, r1, #4
 8004f04:	408b      	lsls	r3, r1
 8004f06:	b299      	uxth	r1, r3

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004f08:	8883      	ldrh	r3, [r0, #4]
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	d102      	bne.n	8004f14 <SPI_I2S_ITConfig+0x14>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8004f0e:	438b      	bics	r3, r1
 8004f10:	8083      	strh	r3, [r0, #4]
  }
}
 8004f12:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004f14:	4319      	orrs	r1, r3
 8004f16:	8081      	strh	r1, [r0, #4]
 8004f18:	e7fb      	b.n	8004f12 <SPI_I2S_ITConfig+0x12>
 8004f1a:	46c0      	nop			; (mov r8, r8)

08004f1c <SPI_GetTransmissionFIFOStatus>:
  *          - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 8004f1c:	23c0      	movs	r3, #192	; 0xc0
 8004f1e:	8900      	ldrh	r0, [r0, #8]
 8004f20:	015b      	lsls	r3, r3, #5
 8004f22:	4018      	ands	r0, r3
}
 8004f24:	4770      	bx	lr
 8004f26:	46c0      	nop			; (mov r8, r8)

08004f28 <SPI_GetReceptionFIFOStatus>:
  *          - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 8004f28:	23c0      	movs	r3, #192	; 0xc0
 8004f2a:	8900      	ldrh	r0, [r0, #8]
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4018      	ands	r0, r3
}
 8004f30:	4770      	bx	lr
 8004f32:	46c0      	nop			; (mov r8, r8)

08004f34 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004f34:	8900      	ldrh	r0, [r0, #8]
 8004f36:	4008      	ands	r0, r1
 8004f38:	1e41      	subs	r1, r0, #1
 8004f3a:	4188      	sbcs	r0, r1
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004f3c:	b2c0      	uxtb	r0, r0
}
 8004f3e:	4770      	bx	lr

08004f40 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8004f40:	43c9      	mvns	r1, r1
 8004f42:	b289      	uxth	r1, r1
 8004f44:	8101      	strh	r1, [r0, #8]
}
 8004f46:	4770      	bx	lr

08004f48 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004f48:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004f4a:	2401      	movs	r4, #1

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004f4c:	8883      	ldrh	r3, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004f4e:	8905      	ldrh	r5, [r0, #8]

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8004f50:	b29a      	uxth	r2, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004f52:	230f      	movs	r3, #15
 8004f54:	1c20      	adds	r0, r4, #0
 8004f56:	400b      	ands	r3, r1
 8004f58:	4098      	lsls	r0, r3
 8004f5a:	1c03      	adds	r3, r0, #0
    bitstatus = SET;
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8004f5c:	2000      	movs	r0, #0

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004f5e:	422b      	tst	r3, r5
 8004f60:	d006      	beq.n	8004f70 <SPI_I2S_GetITStatus+0x28>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8004f62:	1c23      	adds	r3, r4, #0
 8004f64:	0909      	lsrs	r1, r1, #4
 8004f66:	408b      	lsls	r3, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	1e5a      	subs	r2, r3, #1
 8004f6c:	4193      	sbcs	r3, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8004f6e:	b2d8      	uxtb	r0, r3
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8004f70:	bd30      	pop	{r4, r5, pc}
 8004f72:	46c0      	nop			; (mov r8, r8)

08004f74 <mf_getchar>:

#else

mf_char mf_getchar(mf_str *str)
{
    if (!(**str))
 8004f74:	6802      	ldr	r2, [r0, #0]
 8004f76:	7813      	ldrb	r3, [r2, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <mf_getchar+0xe>
        return 0;
    else
        return *(*str)++;
 8004f7c:	1c53      	adds	r3, r2, #1
 8004f7e:	6003      	str	r3, [r0, #0]
 8004f80:	7813      	ldrb	r3, [r2, #0]
}
 8004f82:	1c18      	adds	r0, r3, #0
 8004f84:	4770      	bx	lr
 8004f86:	46c0      	nop			; (mov r8, r8)

08004f88 <mf_rewind>:

void mf_rewind(mf_str *str)
{
	(*str)--;
 8004f88:	6803      	ldr	r3, [r0, #0]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	6003      	str	r3, [r0, #0]
}
 8004f8e:	4770      	bx	lr

08004f90 <__aeabi_uidiv>:
 8004f90:	2200      	movs	r2, #0
 8004f92:	0843      	lsrs	r3, r0, #1
 8004f94:	428b      	cmp	r3, r1
 8004f96:	d374      	bcc.n	8005082 <__aeabi_uidiv+0xf2>
 8004f98:	0903      	lsrs	r3, r0, #4
 8004f9a:	428b      	cmp	r3, r1
 8004f9c:	d35f      	bcc.n	800505e <__aeabi_uidiv+0xce>
 8004f9e:	0a03      	lsrs	r3, r0, #8
 8004fa0:	428b      	cmp	r3, r1
 8004fa2:	d344      	bcc.n	800502e <__aeabi_uidiv+0x9e>
 8004fa4:	0b03      	lsrs	r3, r0, #12
 8004fa6:	428b      	cmp	r3, r1
 8004fa8:	d328      	bcc.n	8004ffc <__aeabi_uidiv+0x6c>
 8004faa:	0c03      	lsrs	r3, r0, #16
 8004fac:	428b      	cmp	r3, r1
 8004fae:	d30d      	bcc.n	8004fcc <__aeabi_uidiv+0x3c>
 8004fb0:	22ff      	movs	r2, #255	; 0xff
 8004fb2:	0209      	lsls	r1, r1, #8
 8004fb4:	ba12      	rev	r2, r2
 8004fb6:	0c03      	lsrs	r3, r0, #16
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	d302      	bcc.n	8004fc2 <__aeabi_uidiv+0x32>
 8004fbc:	1212      	asrs	r2, r2, #8
 8004fbe:	0209      	lsls	r1, r1, #8
 8004fc0:	d065      	beq.n	800508e <__aeabi_uidiv+0xfe>
 8004fc2:	0b03      	lsrs	r3, r0, #12
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	d319      	bcc.n	8004ffc <__aeabi_uidiv+0x6c>
 8004fc8:	e000      	b.n	8004fcc <__aeabi_uidiv+0x3c>
 8004fca:	0a09      	lsrs	r1, r1, #8
 8004fcc:	0bc3      	lsrs	r3, r0, #15
 8004fce:	428b      	cmp	r3, r1
 8004fd0:	d301      	bcc.n	8004fd6 <__aeabi_uidiv+0x46>
 8004fd2:	03cb      	lsls	r3, r1, #15
 8004fd4:	1ac0      	subs	r0, r0, r3
 8004fd6:	4152      	adcs	r2, r2
 8004fd8:	0b83      	lsrs	r3, r0, #14
 8004fda:	428b      	cmp	r3, r1
 8004fdc:	d301      	bcc.n	8004fe2 <__aeabi_uidiv+0x52>
 8004fde:	038b      	lsls	r3, r1, #14
 8004fe0:	1ac0      	subs	r0, r0, r3
 8004fe2:	4152      	adcs	r2, r2
 8004fe4:	0b43      	lsrs	r3, r0, #13
 8004fe6:	428b      	cmp	r3, r1
 8004fe8:	d301      	bcc.n	8004fee <__aeabi_uidiv+0x5e>
 8004fea:	034b      	lsls	r3, r1, #13
 8004fec:	1ac0      	subs	r0, r0, r3
 8004fee:	4152      	adcs	r2, r2
 8004ff0:	0b03      	lsrs	r3, r0, #12
 8004ff2:	428b      	cmp	r3, r1
 8004ff4:	d301      	bcc.n	8004ffa <__aeabi_uidiv+0x6a>
 8004ff6:	030b      	lsls	r3, r1, #12
 8004ff8:	1ac0      	subs	r0, r0, r3
 8004ffa:	4152      	adcs	r2, r2
 8004ffc:	0ac3      	lsrs	r3, r0, #11
 8004ffe:	428b      	cmp	r3, r1
 8005000:	d301      	bcc.n	8005006 <__aeabi_uidiv+0x76>
 8005002:	02cb      	lsls	r3, r1, #11
 8005004:	1ac0      	subs	r0, r0, r3
 8005006:	4152      	adcs	r2, r2
 8005008:	0a83      	lsrs	r3, r0, #10
 800500a:	428b      	cmp	r3, r1
 800500c:	d301      	bcc.n	8005012 <__aeabi_uidiv+0x82>
 800500e:	028b      	lsls	r3, r1, #10
 8005010:	1ac0      	subs	r0, r0, r3
 8005012:	4152      	adcs	r2, r2
 8005014:	0a43      	lsrs	r3, r0, #9
 8005016:	428b      	cmp	r3, r1
 8005018:	d301      	bcc.n	800501e <__aeabi_uidiv+0x8e>
 800501a:	024b      	lsls	r3, r1, #9
 800501c:	1ac0      	subs	r0, r0, r3
 800501e:	4152      	adcs	r2, r2
 8005020:	0a03      	lsrs	r3, r0, #8
 8005022:	428b      	cmp	r3, r1
 8005024:	d301      	bcc.n	800502a <__aeabi_uidiv+0x9a>
 8005026:	020b      	lsls	r3, r1, #8
 8005028:	1ac0      	subs	r0, r0, r3
 800502a:	4152      	adcs	r2, r2
 800502c:	d2cd      	bcs.n	8004fca <__aeabi_uidiv+0x3a>
 800502e:	09c3      	lsrs	r3, r0, #7
 8005030:	428b      	cmp	r3, r1
 8005032:	d301      	bcc.n	8005038 <__aeabi_uidiv+0xa8>
 8005034:	01cb      	lsls	r3, r1, #7
 8005036:	1ac0      	subs	r0, r0, r3
 8005038:	4152      	adcs	r2, r2
 800503a:	0983      	lsrs	r3, r0, #6
 800503c:	428b      	cmp	r3, r1
 800503e:	d301      	bcc.n	8005044 <__aeabi_uidiv+0xb4>
 8005040:	018b      	lsls	r3, r1, #6
 8005042:	1ac0      	subs	r0, r0, r3
 8005044:	4152      	adcs	r2, r2
 8005046:	0943      	lsrs	r3, r0, #5
 8005048:	428b      	cmp	r3, r1
 800504a:	d301      	bcc.n	8005050 <__aeabi_uidiv+0xc0>
 800504c:	014b      	lsls	r3, r1, #5
 800504e:	1ac0      	subs	r0, r0, r3
 8005050:	4152      	adcs	r2, r2
 8005052:	0903      	lsrs	r3, r0, #4
 8005054:	428b      	cmp	r3, r1
 8005056:	d301      	bcc.n	800505c <__aeabi_uidiv+0xcc>
 8005058:	010b      	lsls	r3, r1, #4
 800505a:	1ac0      	subs	r0, r0, r3
 800505c:	4152      	adcs	r2, r2
 800505e:	08c3      	lsrs	r3, r0, #3
 8005060:	428b      	cmp	r3, r1
 8005062:	d301      	bcc.n	8005068 <__aeabi_uidiv+0xd8>
 8005064:	00cb      	lsls	r3, r1, #3
 8005066:	1ac0      	subs	r0, r0, r3
 8005068:	4152      	adcs	r2, r2
 800506a:	0883      	lsrs	r3, r0, #2
 800506c:	428b      	cmp	r3, r1
 800506e:	d301      	bcc.n	8005074 <__aeabi_uidiv+0xe4>
 8005070:	008b      	lsls	r3, r1, #2
 8005072:	1ac0      	subs	r0, r0, r3
 8005074:	4152      	adcs	r2, r2
 8005076:	0843      	lsrs	r3, r0, #1
 8005078:	428b      	cmp	r3, r1
 800507a:	d301      	bcc.n	8005080 <__aeabi_uidiv+0xf0>
 800507c:	004b      	lsls	r3, r1, #1
 800507e:	1ac0      	subs	r0, r0, r3
 8005080:	4152      	adcs	r2, r2
 8005082:	1a41      	subs	r1, r0, r1
 8005084:	d200      	bcs.n	8005088 <__aeabi_uidiv+0xf8>
 8005086:	4601      	mov	r1, r0
 8005088:	4152      	adcs	r2, r2
 800508a:	4610      	mov	r0, r2
 800508c:	4770      	bx	lr
 800508e:	e7ff      	b.n	8005090 <__aeabi_uidiv+0x100>
 8005090:	b501      	push	{r0, lr}
 8005092:	2000      	movs	r0, #0
 8005094:	f000 f8fc 	bl	8005290 <__aeabi_idiv0>
 8005098:	bd02      	pop	{r1, pc}
 800509a:	46c0      	nop			; (mov r8, r8)

0800509c <__aeabi_uidivmod>:
 800509c:	2900      	cmp	r1, #0
 800509e:	d0f7      	beq.n	8005090 <__aeabi_uidiv+0x100>
 80050a0:	b503      	push	{r0, r1, lr}
 80050a2:	f7ff ff75 	bl	8004f90 <__aeabi_uidiv>
 80050a6:	bc0e      	pop	{r1, r2, r3}
 80050a8:	4342      	muls	r2, r0
 80050aa:	1a89      	subs	r1, r1, r2
 80050ac:	4718      	bx	r3
 80050ae:	46c0      	nop			; (mov r8, r8)

080050b0 <__aeabi_idiv>:
 80050b0:	4603      	mov	r3, r0
 80050b2:	430b      	orrs	r3, r1
 80050b4:	d47f      	bmi.n	80051b6 <__aeabi_idiv+0x106>
 80050b6:	2200      	movs	r2, #0
 80050b8:	0843      	lsrs	r3, r0, #1
 80050ba:	428b      	cmp	r3, r1
 80050bc:	d374      	bcc.n	80051a8 <__aeabi_idiv+0xf8>
 80050be:	0903      	lsrs	r3, r0, #4
 80050c0:	428b      	cmp	r3, r1
 80050c2:	d35f      	bcc.n	8005184 <__aeabi_idiv+0xd4>
 80050c4:	0a03      	lsrs	r3, r0, #8
 80050c6:	428b      	cmp	r3, r1
 80050c8:	d344      	bcc.n	8005154 <__aeabi_idiv+0xa4>
 80050ca:	0b03      	lsrs	r3, r0, #12
 80050cc:	428b      	cmp	r3, r1
 80050ce:	d328      	bcc.n	8005122 <__aeabi_idiv+0x72>
 80050d0:	0c03      	lsrs	r3, r0, #16
 80050d2:	428b      	cmp	r3, r1
 80050d4:	d30d      	bcc.n	80050f2 <__aeabi_idiv+0x42>
 80050d6:	22ff      	movs	r2, #255	; 0xff
 80050d8:	0209      	lsls	r1, r1, #8
 80050da:	ba12      	rev	r2, r2
 80050dc:	0c03      	lsrs	r3, r0, #16
 80050de:	428b      	cmp	r3, r1
 80050e0:	d302      	bcc.n	80050e8 <__aeabi_idiv+0x38>
 80050e2:	1212      	asrs	r2, r2, #8
 80050e4:	0209      	lsls	r1, r1, #8
 80050e6:	d065      	beq.n	80051b4 <__aeabi_idiv+0x104>
 80050e8:	0b03      	lsrs	r3, r0, #12
 80050ea:	428b      	cmp	r3, r1
 80050ec:	d319      	bcc.n	8005122 <__aeabi_idiv+0x72>
 80050ee:	e000      	b.n	80050f2 <__aeabi_idiv+0x42>
 80050f0:	0a09      	lsrs	r1, r1, #8
 80050f2:	0bc3      	lsrs	r3, r0, #15
 80050f4:	428b      	cmp	r3, r1
 80050f6:	d301      	bcc.n	80050fc <__aeabi_idiv+0x4c>
 80050f8:	03cb      	lsls	r3, r1, #15
 80050fa:	1ac0      	subs	r0, r0, r3
 80050fc:	4152      	adcs	r2, r2
 80050fe:	0b83      	lsrs	r3, r0, #14
 8005100:	428b      	cmp	r3, r1
 8005102:	d301      	bcc.n	8005108 <__aeabi_idiv+0x58>
 8005104:	038b      	lsls	r3, r1, #14
 8005106:	1ac0      	subs	r0, r0, r3
 8005108:	4152      	adcs	r2, r2
 800510a:	0b43      	lsrs	r3, r0, #13
 800510c:	428b      	cmp	r3, r1
 800510e:	d301      	bcc.n	8005114 <__aeabi_idiv+0x64>
 8005110:	034b      	lsls	r3, r1, #13
 8005112:	1ac0      	subs	r0, r0, r3
 8005114:	4152      	adcs	r2, r2
 8005116:	0b03      	lsrs	r3, r0, #12
 8005118:	428b      	cmp	r3, r1
 800511a:	d301      	bcc.n	8005120 <__aeabi_idiv+0x70>
 800511c:	030b      	lsls	r3, r1, #12
 800511e:	1ac0      	subs	r0, r0, r3
 8005120:	4152      	adcs	r2, r2
 8005122:	0ac3      	lsrs	r3, r0, #11
 8005124:	428b      	cmp	r3, r1
 8005126:	d301      	bcc.n	800512c <__aeabi_idiv+0x7c>
 8005128:	02cb      	lsls	r3, r1, #11
 800512a:	1ac0      	subs	r0, r0, r3
 800512c:	4152      	adcs	r2, r2
 800512e:	0a83      	lsrs	r3, r0, #10
 8005130:	428b      	cmp	r3, r1
 8005132:	d301      	bcc.n	8005138 <__aeabi_idiv+0x88>
 8005134:	028b      	lsls	r3, r1, #10
 8005136:	1ac0      	subs	r0, r0, r3
 8005138:	4152      	adcs	r2, r2
 800513a:	0a43      	lsrs	r3, r0, #9
 800513c:	428b      	cmp	r3, r1
 800513e:	d301      	bcc.n	8005144 <__aeabi_idiv+0x94>
 8005140:	024b      	lsls	r3, r1, #9
 8005142:	1ac0      	subs	r0, r0, r3
 8005144:	4152      	adcs	r2, r2
 8005146:	0a03      	lsrs	r3, r0, #8
 8005148:	428b      	cmp	r3, r1
 800514a:	d301      	bcc.n	8005150 <__aeabi_idiv+0xa0>
 800514c:	020b      	lsls	r3, r1, #8
 800514e:	1ac0      	subs	r0, r0, r3
 8005150:	4152      	adcs	r2, r2
 8005152:	d2cd      	bcs.n	80050f0 <__aeabi_idiv+0x40>
 8005154:	09c3      	lsrs	r3, r0, #7
 8005156:	428b      	cmp	r3, r1
 8005158:	d301      	bcc.n	800515e <__aeabi_idiv+0xae>
 800515a:	01cb      	lsls	r3, r1, #7
 800515c:	1ac0      	subs	r0, r0, r3
 800515e:	4152      	adcs	r2, r2
 8005160:	0983      	lsrs	r3, r0, #6
 8005162:	428b      	cmp	r3, r1
 8005164:	d301      	bcc.n	800516a <__aeabi_idiv+0xba>
 8005166:	018b      	lsls	r3, r1, #6
 8005168:	1ac0      	subs	r0, r0, r3
 800516a:	4152      	adcs	r2, r2
 800516c:	0943      	lsrs	r3, r0, #5
 800516e:	428b      	cmp	r3, r1
 8005170:	d301      	bcc.n	8005176 <__aeabi_idiv+0xc6>
 8005172:	014b      	lsls	r3, r1, #5
 8005174:	1ac0      	subs	r0, r0, r3
 8005176:	4152      	adcs	r2, r2
 8005178:	0903      	lsrs	r3, r0, #4
 800517a:	428b      	cmp	r3, r1
 800517c:	d301      	bcc.n	8005182 <__aeabi_idiv+0xd2>
 800517e:	010b      	lsls	r3, r1, #4
 8005180:	1ac0      	subs	r0, r0, r3
 8005182:	4152      	adcs	r2, r2
 8005184:	08c3      	lsrs	r3, r0, #3
 8005186:	428b      	cmp	r3, r1
 8005188:	d301      	bcc.n	800518e <__aeabi_idiv+0xde>
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	1ac0      	subs	r0, r0, r3
 800518e:	4152      	adcs	r2, r2
 8005190:	0883      	lsrs	r3, r0, #2
 8005192:	428b      	cmp	r3, r1
 8005194:	d301      	bcc.n	800519a <__aeabi_idiv+0xea>
 8005196:	008b      	lsls	r3, r1, #2
 8005198:	1ac0      	subs	r0, r0, r3
 800519a:	4152      	adcs	r2, r2
 800519c:	0843      	lsrs	r3, r0, #1
 800519e:	428b      	cmp	r3, r1
 80051a0:	d301      	bcc.n	80051a6 <__aeabi_idiv+0xf6>
 80051a2:	004b      	lsls	r3, r1, #1
 80051a4:	1ac0      	subs	r0, r0, r3
 80051a6:	4152      	adcs	r2, r2
 80051a8:	1a41      	subs	r1, r0, r1
 80051aa:	d200      	bcs.n	80051ae <__aeabi_idiv+0xfe>
 80051ac:	4601      	mov	r1, r0
 80051ae:	4152      	adcs	r2, r2
 80051b0:	4610      	mov	r0, r2
 80051b2:	4770      	bx	lr
 80051b4:	e05d      	b.n	8005272 <__aeabi_idiv+0x1c2>
 80051b6:	0fca      	lsrs	r2, r1, #31
 80051b8:	d000      	beq.n	80051bc <__aeabi_idiv+0x10c>
 80051ba:	4249      	negs	r1, r1
 80051bc:	1003      	asrs	r3, r0, #32
 80051be:	d300      	bcc.n	80051c2 <__aeabi_idiv+0x112>
 80051c0:	4240      	negs	r0, r0
 80051c2:	4053      	eors	r3, r2
 80051c4:	2200      	movs	r2, #0
 80051c6:	469c      	mov	ip, r3
 80051c8:	0903      	lsrs	r3, r0, #4
 80051ca:	428b      	cmp	r3, r1
 80051cc:	d32d      	bcc.n	800522a <__aeabi_idiv+0x17a>
 80051ce:	0a03      	lsrs	r3, r0, #8
 80051d0:	428b      	cmp	r3, r1
 80051d2:	d312      	bcc.n	80051fa <__aeabi_idiv+0x14a>
 80051d4:	22fc      	movs	r2, #252	; 0xfc
 80051d6:	0189      	lsls	r1, r1, #6
 80051d8:	ba12      	rev	r2, r2
 80051da:	0a03      	lsrs	r3, r0, #8
 80051dc:	428b      	cmp	r3, r1
 80051de:	d30c      	bcc.n	80051fa <__aeabi_idiv+0x14a>
 80051e0:	0189      	lsls	r1, r1, #6
 80051e2:	1192      	asrs	r2, r2, #6
 80051e4:	428b      	cmp	r3, r1
 80051e6:	d308      	bcc.n	80051fa <__aeabi_idiv+0x14a>
 80051e8:	0189      	lsls	r1, r1, #6
 80051ea:	1192      	asrs	r2, r2, #6
 80051ec:	428b      	cmp	r3, r1
 80051ee:	d304      	bcc.n	80051fa <__aeabi_idiv+0x14a>
 80051f0:	0189      	lsls	r1, r1, #6
 80051f2:	d03a      	beq.n	800526a <__aeabi_idiv+0x1ba>
 80051f4:	1192      	asrs	r2, r2, #6
 80051f6:	e000      	b.n	80051fa <__aeabi_idiv+0x14a>
 80051f8:	0989      	lsrs	r1, r1, #6
 80051fa:	09c3      	lsrs	r3, r0, #7
 80051fc:	428b      	cmp	r3, r1
 80051fe:	d301      	bcc.n	8005204 <__aeabi_idiv+0x154>
 8005200:	01cb      	lsls	r3, r1, #7
 8005202:	1ac0      	subs	r0, r0, r3
 8005204:	4152      	adcs	r2, r2
 8005206:	0983      	lsrs	r3, r0, #6
 8005208:	428b      	cmp	r3, r1
 800520a:	d301      	bcc.n	8005210 <__aeabi_idiv+0x160>
 800520c:	018b      	lsls	r3, r1, #6
 800520e:	1ac0      	subs	r0, r0, r3
 8005210:	4152      	adcs	r2, r2
 8005212:	0943      	lsrs	r3, r0, #5
 8005214:	428b      	cmp	r3, r1
 8005216:	d301      	bcc.n	800521c <__aeabi_idiv+0x16c>
 8005218:	014b      	lsls	r3, r1, #5
 800521a:	1ac0      	subs	r0, r0, r3
 800521c:	4152      	adcs	r2, r2
 800521e:	0903      	lsrs	r3, r0, #4
 8005220:	428b      	cmp	r3, r1
 8005222:	d301      	bcc.n	8005228 <__aeabi_idiv+0x178>
 8005224:	010b      	lsls	r3, r1, #4
 8005226:	1ac0      	subs	r0, r0, r3
 8005228:	4152      	adcs	r2, r2
 800522a:	08c3      	lsrs	r3, r0, #3
 800522c:	428b      	cmp	r3, r1
 800522e:	d301      	bcc.n	8005234 <__aeabi_idiv+0x184>
 8005230:	00cb      	lsls	r3, r1, #3
 8005232:	1ac0      	subs	r0, r0, r3
 8005234:	4152      	adcs	r2, r2
 8005236:	0883      	lsrs	r3, r0, #2
 8005238:	428b      	cmp	r3, r1
 800523a:	d301      	bcc.n	8005240 <__aeabi_idiv+0x190>
 800523c:	008b      	lsls	r3, r1, #2
 800523e:	1ac0      	subs	r0, r0, r3
 8005240:	4152      	adcs	r2, r2
 8005242:	d2d9      	bcs.n	80051f8 <__aeabi_idiv+0x148>
 8005244:	0843      	lsrs	r3, r0, #1
 8005246:	428b      	cmp	r3, r1
 8005248:	d301      	bcc.n	800524e <__aeabi_idiv+0x19e>
 800524a:	004b      	lsls	r3, r1, #1
 800524c:	1ac0      	subs	r0, r0, r3
 800524e:	4152      	adcs	r2, r2
 8005250:	1a41      	subs	r1, r0, r1
 8005252:	d200      	bcs.n	8005256 <__aeabi_idiv+0x1a6>
 8005254:	4601      	mov	r1, r0
 8005256:	4663      	mov	r3, ip
 8005258:	4152      	adcs	r2, r2
 800525a:	105b      	asrs	r3, r3, #1
 800525c:	4610      	mov	r0, r2
 800525e:	d301      	bcc.n	8005264 <__aeabi_idiv+0x1b4>
 8005260:	4240      	negs	r0, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d500      	bpl.n	8005268 <__aeabi_idiv+0x1b8>
 8005266:	4249      	negs	r1, r1
 8005268:	4770      	bx	lr
 800526a:	4663      	mov	r3, ip
 800526c:	105b      	asrs	r3, r3, #1
 800526e:	d300      	bcc.n	8005272 <__aeabi_idiv+0x1c2>
 8005270:	4240      	negs	r0, r0
 8005272:	b501      	push	{r0, lr}
 8005274:	2000      	movs	r0, #0
 8005276:	f000 f80b 	bl	8005290 <__aeabi_idiv0>
 800527a:	bd02      	pop	{r1, pc}

0800527c <__aeabi_idivmod>:
 800527c:	2900      	cmp	r1, #0
 800527e:	d0f8      	beq.n	8005272 <__aeabi_idiv+0x1c2>
 8005280:	b503      	push	{r0, r1, lr}
 8005282:	f7ff ff15 	bl	80050b0 <__aeabi_idiv>
 8005286:	bc0e      	pop	{r1, r2, r3}
 8005288:	4342      	muls	r2, r0
 800528a:	1a89      	subs	r1, r1, r2
 800528c:	4718      	bx	r3
 800528e:	46c0      	nop			; (mov r8, r8)

08005290 <__aeabi_idiv0>:
 8005290:	4770      	bx	lr
 8005292:	46c0      	nop			; (mov r8, r8)

08005294 <setjmp>:
 8005294:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005296:	4641      	mov	r1, r8
 8005298:	464a      	mov	r2, r9
 800529a:	4653      	mov	r3, sl
 800529c:	465c      	mov	r4, fp
 800529e:	466d      	mov	r5, sp
 80052a0:	4676      	mov	r6, lr
 80052a2:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
 80052a4:	3828      	subs	r0, #40	; 0x28
 80052a6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052a8:	2000      	movs	r0, #0
 80052aa:	4770      	bx	lr

080052ac <longjmp>:
 80052ac:	3010      	adds	r0, #16
 80052ae:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
 80052b0:	4690      	mov	r8, r2
 80052b2:	4699      	mov	r9, r3
 80052b4:	46a2      	mov	sl, r4
 80052b6:	46ab      	mov	fp, r5
 80052b8:	46b5      	mov	sp, r6
 80052ba:	c808      	ldmia	r0!, {r3}
 80052bc:	3828      	subs	r0, #40	; 0x28
 80052be:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052c0:	1c08      	adds	r0, r1, #0
 80052c2:	d100      	bne.n	80052c6 <longjmp+0x1a>
 80052c4:	2001      	movs	r0, #1
 80052c6:	4718      	bx	r3

080052c8 <gfxSystemTicks>:

//ugfx
systemticks_t gfxSystemTicks(void)
{
    
    return MSec;
 80052c8:	4b01      	ldr	r3, [pc, #4]	; (80052d0 <gfxSystemTicks+0x8>)
 80052ca:	6818      	ldr	r0, [r3, #0]
}
 80052cc:	4770      	bx	lr
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	20000990 	.word	0x20000990

080052d4 <gfxMillisecondsToTicks>:
 
systemticks_t gfxMillisecondsToTicks(delaytime_t ms)
{
    return ms;
}
 80052d4:	4770      	bx	lr

080052d6 <WWDG_IRQHandler>:

void WWDG_IRQHandler(void) {
    //GPIO_WriteBit(GPIOB, GPIO_Pin_11, Bit_SET);
    //GPIO_WriteBit(GPIOB, GPIO_Pin_11, (n&1) ? Bit_SET : Bit_RESET);

}
 80052d6:	4770      	bx	lr

080052d8 <USART2_IRQHandler>:
void USART2_IRQHandler(void) {
}
 80052d8:	4770      	bx	lr

080052da <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
}
 80052da:	4770      	bx	lr

080052dc <TS_IRQHandler>:
void TS_IRQHandler(void) {
}
 80052dc:	4770      	bx	lr
	...

080052e0 <main>:
}

int main(void)
{
  //setup systick handler tick every 1ms
  SysTick_Config(SystemCoreClock/1000);
 80052e0:	21fa      	movs	r1, #250	; 0xfa
    //GPIO_WriteBit(GPIOB, GPIO_Pin_11, (increment&2) ? Bit_SET : Bit_RESET);
  }
}

int main(void)
{
 80052e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  //setup systick handler tick every 1ms
  SysTick_Config(SystemCoreClock/1000);
 80052e4:	4bc4      	ldr	r3, [pc, #784]	; (80055f8 <main+0x318>)
    //GPIO_WriteBit(GPIOB, GPIO_Pin_11, (increment&2) ? Bit_SET : Bit_RESET);
  }
}

int main(void)
{
 80052e6:	b091      	sub	sp, #68	; 0x44
  //setup systick handler tick every 1ms
  SysTick_Config(SystemCoreClock/1000);
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	0089      	lsls	r1, r1, #2
 80052ec:	f7ff fe50 	bl	8004f90 <__aeabi_uidiv>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80052f0:	4ac2      	ldr	r2, [pc, #776]	; (80055fc <main+0x31c>)
 80052f2:	3801      	subs	r0, #1
 80052f4:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80052f6:	20c0      	movs	r0, #192	; 0xc0
 80052f8:	49c1      	ldr	r1, [pc, #772]	; (8005600 <main+0x320>)
 80052fa:	0600      	lsls	r0, r0, #24
 80052fc:	6a0b      	ldr	r3, [r1, #32]

  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 80052fe:	2780      	movs	r7, #128	; 0x80
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	4303      	orrs	r3, r0
 8005306:	620b      	str	r3, [r1, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8005308:	2300      	movs	r3, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  int n = 0;

  // Initialize GPIO clock  
  // see stm32f0xx_rcc.h
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800530a:	2080      	movs	r0, #128	; 0x80
 800530c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800530e:	3307      	adds	r3, #7
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	0280      	lsls	r0, r0, #10
 8005314:	2101      	movs	r1, #1
 8005316:	f7fb f9dd 	bl	80006d4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800531a:	2080      	movs	r0, #128	; 0x80
 800531c:	2101      	movs	r1, #1
 800531e:	02c0      	lsls	r0, r0, #11
 8005320:	f7fb f9d8 	bl	80006d4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8005324:	2080      	movs	r0, #128	; 0x80
 8005326:	2101      	movs	r1, #1
 8005328:	0300      	lsls	r0, r0, #12
 800532a:	f7fb f9d3 	bl	80006d4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 800532e:	2080      	movs	r0, #128	; 0x80
 8005330:	2101      	movs	r1, #1
 8005332:	03c0      	lsls	r0, r0, #15
 8005334:	f7fb f9ce 	bl	80006d4 <RCC_AHBPeriphClockCmd>


  Timer_Config(); 
 8005338:	f000 f9c3 	bl	80056c2 <Timer_Config>
  Interrupts_Config(); 
 800533c:	f000 f994 	bl	8005668 <Interrupts_Config>
  M24SR_I2CInit();
 8005340:	f7fc f8aa 	bl	8001498 <M24SR_I2CInit>

  gfxInit();
 8005344:	f7fc fa5e 	bl	8001804 <gfxInit>
  font_t font = gdispOpenFont("DejaVuSans12");
 8005348:	48ae      	ldr	r0, [pc, #696]	; (8005604 <main+0x324>)
 800534a:	f7fd f90b 	bl	8002564 <gdispOpenFont>
  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800534e:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8005350:	2602      	movs	r6, #2
  //WWDG_SetWindowValue(0xff)
  
  // Initialize LED pins
  // see stm32f0xx_gpio.h

  GPIO_StructInit(&GPIO_InitStructure);
 8005352:	ac08      	add	r4, sp, #32
  Timer_Config(); 
  Interrupts_Config(); 
  M24SR_I2CInit();

  gfxInit();
  font_t font = gdispOpenFont("DejaVuSans12");
 8005354:	9005      	str	r0, [sp, #20]
  //WWDG_SetWindowValue(0xff)
  
  // Initialize LED pins
  // see stm32f0xx_gpio.h

  GPIO_StructInit(&GPIO_InitStructure);
 8005356:	1c20      	adds	r0, r4, #0
 8005358:	f7fa ff6a 	bl	8000230 <GPIO_StructInit>

  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800535c:	013f      	lsls	r7, r7, #4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800535e:	1c21      	adds	r1, r4, #0
 8005360:	48a9      	ldr	r0, [pc, #676]	; (8005608 <main+0x328>)
  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8005362:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8005364:	7166      	strb	r6, [r4, #5]

  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8005366:	9708      	str	r7, [sp, #32]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005368:	f7fa fefe 	bl	8000168 <GPIO_Init>

  //tooth 2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 800536c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800536e:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8005370:	015b      	lsls	r3, r3, #5
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005372:	48a5      	ldr	r0, [pc, #660]	; (8005608 <main+0x328>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8005374:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8005376:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8005378:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800537a:	f7fa fef5 	bl	8000168 <GPIO_Init>

  //tooth 3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800537e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005380:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8005382:	019b      	lsls	r3, r3, #6
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005384:	48a0      	ldr	r0, [pc, #640]	; (8005608 <main+0x328>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8005386:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8005388:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800538a:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800538c:	f7fa feec 	bl	8000168 <GPIO_Init>
 
  //tooth 4 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8005390:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005392:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 
  //tooth 4 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8005394:	01db      	lsls	r3, r3, #7
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005396:	489c      	ldr	r0, [pc, #624]	; (8005608 <main+0x328>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 
  //tooth 4 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8005398:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 
  //tooth 4 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 800539a:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800539c:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800539e:	f7fa fee3 	bl	8000168 <GPIO_Init>

  //tooth 5
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 80053a2:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80053a4:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 5
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 80053a6:	021b      	lsls	r3, r3, #8
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80053a8:	4897      	ldr	r0, [pc, #604]	; (8005608 <main+0x328>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 5
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 80053aa:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80053ac:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 80053ae:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80053b0:	f7fa feda 	bl	8000168 <GPIO_Init>
  gdispImage auraLogo;
  coord_t   swidth, sheight;

   
  
  swidth = gdispGetWidth();
 80053b4:	4c95      	ldr	r4, [pc, #596]	; (800560c <main+0x32c>)
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	f7fc fbee 	bl	8001b98 <gdispGGetWidth>
 80053bc:	9007      	str	r0, [sp, #28]
  sheight = gdispGetHeight();
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	f7fc fbee 	bl	8001ba0 <gdispGGetHeight>
 80053c4:	9004      	str	r0, [sp, #16]
 
  
  //gdisp_lld_display() 
  led_init();
 80053c6:	f000 fad7 	bl	8005978 <led_init>
  timer_clock_init();
 80053ca:	f000 fa77 	bl	80058bc <timer_clock_init>
  timer_pwm_init();
 80053ce:	f000 faa3 	bl	8005918 <timer_pwm_init>
  TIM_Cmd(TIM1, ENABLE); 
 80053d2:	1c29      	adds	r1, r5, #0
 80053d4:	488e      	ldr	r0, [pc, #568]	; (8005610 <main+0x330>)
 80053d6:	f7fb fb3d 	bl	8000a54 <TIM_Cmd>
  TIM_Cmd(TIM2, ENABLE); 
 80053da:	2080      	movs	r0, #128	; 0x80
 80053dc:	1c29      	adds	r1, r5, #0
 80053de:	05c0      	lsls	r0, r0, #23
 80053e0:	f7fb fb38 	bl	8000a54 <TIM_Cmd>
  TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80053e4:	1c29      	adds	r1, r5, #0
 80053e6:	488a      	ldr	r0, [pc, #552]	; (8005610 <main+0x330>)
 80053e8:	f7fb fb5a 	bl	8000aa0 <TIM_CtrlPWMOutputs>
  TIM_CtrlPWMOutputs(TIM2, ENABLE);
 80053ec:	2080      	movs	r0, #128	; 0x80
 80053ee:	1c29      	adds	r1, r5, #0
 80053f0:	05c0      	lsls	r0, r0, #23
 80053f2:	f7fb fb55 	bl	8000aa0 <TIM_CtrlPWMOutputs>

  GPIO_WriteBit(GPIOB, GPIO_Pin_11, Bit_SET);
 80053f6:	1c2a      	adds	r2, r5, #0
 80053f8:	4883      	ldr	r0, [pc, #524]	; (8005608 <main+0x328>)
 80053fa:	1c39      	adds	r1, r7, #0
 80053fc:	f7fa ff4e 	bl	800029c <GPIO_WriteBit>
  GPIO_WriteBit(GPIOB, GPIO_Pin_12, Bit_SET);
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	1c2a      	adds	r2, r5, #0
 8005404:	4880      	ldr	r0, [pc, #512]	; (8005608 <main+0x328>)
 8005406:	0149      	lsls	r1, r1, #5
 8005408:	f7fa ff48 	bl	800029c <GPIO_WriteBit>
  GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_SET);
 800540c:	2180      	movs	r1, #128	; 0x80
 800540e:	1c2a      	adds	r2, r5, #0
 8005410:	487d      	ldr	r0, [pc, #500]	; (8005608 <main+0x328>)
 8005412:	0189      	lsls	r1, r1, #6
 8005414:	f7fa ff42 	bl	800029c <GPIO_WriteBit>
  GPIO_WriteBit(GPIOB, GPIO_Pin_14, Bit_SET);
 8005418:	2180      	movs	r1, #128	; 0x80
 800541a:	1c2a      	adds	r2, r5, #0
 800541c:	487a      	ldr	r0, [pc, #488]	; (8005608 <main+0x328>)
 800541e:	01c9      	lsls	r1, r1, #7
 8005420:	f7fa ff3c 	bl	800029c <GPIO_WriteBit>
  GPIO_WriteBit(GPIOB, GPIO_Pin_15, Bit_SET);
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	1c2a      	adds	r2, r5, #0
 8005428:	4877      	ldr	r0, [pc, #476]	; (8005608 <main+0x328>)
 800542a:	0209      	lsls	r1, r1, #8
 800542c:	f7fa ff36 	bl	800029c <GPIO_WriteBit>
       TIM_SetCompare3 (TIM1, 100);
       TIM_SetCompare2 (TIM2, 105);
       TIM_SetCompare3 (TIM2, 115);
        
       gdispClear(GFX_BLACK);
       gdispDrawString(i, sheight/2, OzSecCon, font, GFX_WHITE);
 8005430:	9b04      	ldr	r3, [sp, #16]
 8005432:	9a04      	ldr	r2, [sp, #16]
 8005434:	0fdb      	lsrs	r3, r3, #31
 8005436:	189b      	adds	r3, r3, r2
 8005438:	412b      	asrs	r3, r5

  //__HAL_DBGMCU_FREEZE_IWDG()
  //__HAL_RCC_DBGMCU_CLK_ENABLE();
 
  GPIO_InitTypeDef  GPIO_InitStructure;
  int n = 0;
 800543a:	2500      	movs	r5, #0
       TIM_SetCompare3 (TIM1, 100);
       TIM_SetCompare2 (TIM2, 105);
       TIM_SetCompare3 (TIM2, 115);
        
       gdispClear(GFX_BLACK);
       gdispDrawString(i, sheight/2, OzSecCon, font, GFX_WHITE);
 800543c:	b29b      	uxth	r3, r3
 800543e:	9306      	str	r3, [sp, #24]
 
  //flash_led_forever();
  while(1)
  {
    n++;
    delay_ms(1000);
 8005440:	20fa      	movs	r0, #250	; 0xfa
   
 
  //flash_led_forever();
  while(1)
  {
    n++;
 8005442:	3501      	adds	r5, #1
    delay_ms(1000);
 8005444:	0080      	lsls	r0, r0, #2
 8005446:	f000 f943 	bl	80056d0 <delay_ms>
    //gdispDrawLine(1, 1, 20, 20, GFX_WHITE);
    //gdispDrawString(1, 20, OzSecCon, font, GFX_RED);

    //flash teeth
    GPIO_WriteBit(GPIOB, GPIO_Pin_11, (n&1) ? Bit_SET : Bit_RESET);
 800544a:	2401      	movs	r4, #1
 800544c:	1c2a      	adds	r2, r5, #0
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	4022      	ands	r2, r4
 8005452:	486d      	ldr	r0, [pc, #436]	; (8005608 <main+0x328>)
 8005454:	0109      	lsls	r1, r1, #4
 8005456:	f7fa ff21 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(GPIOB, GPIO_Pin_12, (n&2) ? Bit_SET : Bit_RESET);
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	086a      	lsrs	r2, r5, #1
 800545e:	4022      	ands	r2, r4
 8005460:	4869      	ldr	r0, [pc, #420]	; (8005608 <main+0x328>)
 8005462:	0149      	lsls	r1, r1, #5
 8005464:	f7fa ff1a 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(GPIOB, GPIO_Pin_13, (n&3) ? Bit_SET : Bit_RESET);
 8005468:	2203      	movs	r2, #3
 800546a:	402a      	ands	r2, r5
 800546c:	1e53      	subs	r3, r2, #1
 800546e:	419a      	sbcs	r2, r3
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	4864      	ldr	r0, [pc, #400]	; (8005608 <main+0x328>)
 8005476:	0189      	lsls	r1, r1, #6
 8005478:	f7fa ff10 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(GPIOB, GPIO_Pin_14, (n&4) ? Bit_SET : Bit_RESET);
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	08aa      	lsrs	r2, r5, #2
 8005480:	4022      	ands	r2, r4
 8005482:	4861      	ldr	r0, [pc, #388]	; (8005608 <main+0x328>)
 8005484:	01c9      	lsls	r1, r1, #7
 8005486:	f7fa ff09 	bl	800029c <GPIO_WriteBit>
    GPIO_WriteBit(GPIOB, GPIO_Pin_15, (n&5) ? Bit_SET : Bit_RESET);
 800548a:	2205      	movs	r2, #5
 800548c:	402a      	ands	r2, r5
 800548e:	1e53      	subs	r3, r2, #1
 8005490:	419a      	sbcs	r2, r3
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	485c      	ldr	r0, [pc, #368]	; (8005608 <main+0x328>)
 8005498:	0209      	lsls	r1, r1, #8
 800549a:	f7fa feff 	bl	800029c <GPIO_WriteBit>
    int counter_3 = 55; 
    int counter_4 = 60;
    int counter_5 = 70;
    int i=0;
    int j=0;
    TIM_SetCompare1 (TIM1, 85);
 800549e:	485c      	ldr	r0, [pc, #368]	; (8005610 <main+0x330>)
 80054a0:	2155      	movs	r1, #85	; 0x55
 80054a2:	f7fb fc31 	bl	8000d08 <TIM_SetCompare1>
    TIM_SetCompare2 (TIM1, 85);
 80054a6:	485a      	ldr	r0, [pc, #360]	; (8005610 <main+0x330>)
 80054a8:	2155      	movs	r1, #85	; 0x55
 80054aa:	f7fb fc2f 	bl	8000d0c <TIM_SetCompare2>
    TIM_SetCompare3 (TIM1, 120);
 80054ae:	4858      	ldr	r0, [pc, #352]	; (8005610 <main+0x330>)
 80054b0:	2178      	movs	r1, #120	; 0x78
 80054b2:	f7fb fc2d 	bl	8000d10 <TIM_SetCompare3>
    TIM_SetCompare3 (TIM2, 90);
 80054b6:	2080      	movs	r0, #128	; 0x80
 80054b8:	215a      	movs	r1, #90	; 0x5a
 80054ba:	05c0      	lsls	r0, r0, #23
 80054bc:	f7fb fc28 	bl	8000d10 <TIM_SetCompare3>
    TIM_SetCompare2 (TIM2, 100);
 80054c0:	2080      	movs	r0, #128	; 0x80
 80054c2:	2164      	movs	r1, #100	; 0x64
 80054c4:	05c0      	lsls	r0, r0, #23
 80054c6:	f7fb fc21 	bl	8000d0c <TIM_SetCompare2>
 
    for(j=0; j< 127; j++){
 80054ca:	2400      	movs	r4, #0
       TIM_SetCompare1 (TIM1, counter_1 ^ ((j&74)+i));
 80054cc:	214a      	movs	r1, #74	; 0x4a
 80054ce:	274b      	movs	r7, #75	; 0x4b
 80054d0:	4021      	ands	r1, r4
 80054d2:	4079      	eors	r1, r7
 80054d4:	484e      	ldr	r0, [pc, #312]	; (8005610 <main+0x330>)
 80054d6:	f7fb fc17 	bl	8000d08 <TIM_SetCompare1>
       TIM_SetCompare2 (TIM1, counter_2 | ((j&75)-i));
 80054da:	1c21      	adds	r1, r4, #0
 80054dc:	2341      	movs	r3, #65	; 0x41
 80054de:	4039      	ands	r1, r7
 80054e0:	4319      	orrs	r1, r3
 80054e2:	484b      	ldr	r0, [pc, #300]	; (8005610 <main+0x330>)
 80054e4:	f7fb fc12 	bl	8000d0c <TIM_SetCompare2>
       TIM_SetCompare3 (TIM1, counter_3 % ((j&76)/i));
 80054e8:	204c      	movs	r0, #76	; 0x4c
 80054ea:	2100      	movs	r1, #0
 80054ec:	4020      	ands	r0, r4
 80054ee:	f7ff fddf 	bl	80050b0 <__aeabi_idiv>
 80054f2:	1c01      	adds	r1, r0, #0
 80054f4:	2037      	movs	r0, #55	; 0x37
 80054f6:	f7ff fec1 	bl	800527c <__aeabi_idivmod>
 80054fa:	4845      	ldr	r0, [pc, #276]	; (8005610 <main+0x330>)
 80054fc:	f7fb fc08 	bl	8000d10 <TIM_SetCompare3>
       TIM_SetCompare2 (TIM2, counter_4 ^ ((j&77)*i));
 8005500:	2080      	movs	r0, #128	; 0x80
 8005502:	213c      	movs	r1, #60	; 0x3c
 8005504:	05c0      	lsls	r0, r0, #23
 8005506:	f7fb fc01 	bl	8000d0c <TIM_SetCompare2>
       TIM_SetCompare3 (TIM2, counter_5 & ((j& 78)+i));
 800550a:	2146      	movs	r1, #70	; 0x46
 800550c:	2080      	movs	r0, #128	; 0x80
 800550e:	4021      	ands	r1, r4
 8005510:	05c0      	lsls	r0, r0, #23
 8005512:	f7fb fbfd 	bl	8000d10 <TIM_SetCompare3>
       
       TIM_SetCompare1 (TIM1, 120);
 8005516:	483e      	ldr	r0, [pc, #248]	; (8005610 <main+0x330>)
 8005518:	2178      	movs	r1, #120	; 0x78
 800551a:	f7fb fbf5 	bl	8000d08 <TIM_SetCompare1>
       TIM_SetCompare2 (TIM1, 110);
 800551e:	483c      	ldr	r0, [pc, #240]	; (8005610 <main+0x330>)
 8005520:	216e      	movs	r1, #110	; 0x6e
 8005522:	f7fb fbf3 	bl	8000d0c <TIM_SetCompare2>
       TIM_SetCompare3 (TIM1, 100);
 8005526:	483a      	ldr	r0, [pc, #232]	; (8005610 <main+0x330>)
 8005528:	2164      	movs	r1, #100	; 0x64
 800552a:	f7fb fbf1 	bl	8000d10 <TIM_SetCompare3>
       TIM_SetCompare2 (TIM2, 105);
 800552e:	2080      	movs	r0, #128	; 0x80
 8005530:	2169      	movs	r1, #105	; 0x69
 8005532:	05c0      	lsls	r0, r0, #23
 8005534:	f7fb fbea 	bl	8000d0c <TIM_SetCompare2>
       TIM_SetCompare3 (TIM2, 115);
 8005538:	2080      	movs	r0, #128	; 0x80
 800553a:	2173      	movs	r1, #115	; 0x73
 800553c:	05c0      	lsls	r0, r0, #23
 800553e:	f7fb fbe7 	bl	8000d10 <TIM_SetCompare3>
        
       gdispClear(GFX_BLACK);
 8005542:	4e32      	ldr	r6, [pc, #200]	; (800560c <main+0x32c>)
 8005544:	2100      	movs	r1, #0
 8005546:	6830      	ldr	r0, [r6, #0]
 8005548:	f7fc fbe2 	bl	8001d10 <gdispGClear>
       gdispDrawString(i, sheight/2, OzSecCon, font, GFX_WHITE);
 800554c:	466b      	mov	r3, sp
 800554e:	2218      	movs	r2, #24
 8005550:	5e9a      	ldrsh	r2, [r3, r2]
 8005552:	9b05      	ldr	r3, [sp, #20]
 8005554:	2100      	movs	r1, #0
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2301      	movs	r3, #1
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	6830      	ldr	r0, [r6, #0]
 800555e:	4b2d      	ldr	r3, [pc, #180]	; (8005614 <main+0x334>)
 8005560:	f7fc fde6 	bl	8002130 <gdispGDrawString>
       delay_ms(5000); 
 8005564:	482c      	ldr	r0, [pc, #176]	; (8005618 <main+0x338>)
 8005566:	f000 f8b3 	bl	80056d0 <delay_ms>
       gdispClear(GFX_BLACK);
 800556a:	6830      	ldr	r0, [r6, #0]
 800556c:	2100      	movs	r1, #0
 800556e:	f7fc fbcf 	bl	8001d10 <gdispGClear>
  
       //       gdispDrawString(i, sheight/2, OzSecCon, font, GFX_WHITE);
       //       delay_ms(200); 
       //       gdispClear(GFX_BLACK);   
       // } 
       TIM_SetCompare1 (TIM1, counter_1^((j&94)+i));
 8005572:	215e      	movs	r1, #94	; 0x5e
 8005574:	4021      	ands	r1, r4
 8005576:	4079      	eors	r1, r7
 8005578:	4825      	ldr	r0, [pc, #148]	; (8005610 <main+0x330>)
 800557a:	f7fb fbc5 	bl	8000d08 <TIM_SetCompare1>
       TIM_SetCompare2 (TIM1, counter_2|((j&95)-i));
 800557e:	215f      	movs	r1, #95	; 0x5f
 8005580:	2341      	movs	r3, #65	; 0x41
 8005582:	4021      	ands	r1, r4
 8005584:	4319      	orrs	r1, r3
 8005586:	4822      	ldr	r0, [pc, #136]	; (8005610 <main+0x330>)
 8005588:	f7fb fbc0 	bl	8000d0c <TIM_SetCompare2>
       TIM_SetCompare3 (TIM1, counter_3%((j&96)/i));
 800558c:	2060      	movs	r0, #96	; 0x60
 800558e:	2100      	movs	r1, #0
 8005590:	4020      	ands	r0, r4
 8005592:	f7ff fd8d 	bl	80050b0 <__aeabi_idiv>
 8005596:	1c01      	adds	r1, r0, #0
 8005598:	2037      	movs	r0, #55	; 0x37
 800559a:	f7ff fe6f 	bl	800527c <__aeabi_idivmod>
 800559e:	481c      	ldr	r0, [pc, #112]	; (8005610 <main+0x330>)
 80055a0:	f7fb fbb6 	bl	8000d10 <TIM_SetCompare3>
       TIM_SetCompare1 (TIM2, counter_4^((j&97)*i));
 80055a4:	2080      	movs	r0, #128	; 0x80
 80055a6:	213c      	movs	r1, #60	; 0x3c
 80055a8:	05c0      	lsls	r0, r0, #23
 80055aa:	f7fb fbad 	bl	8000d08 <TIM_SetCompare1>
       TIM_SetCompare2 (TIM2, counter_5&((j&98)+i));
 80055ae:	2142      	movs	r1, #66	; 0x42
 80055b0:	2080      	movs	r0, #128	; 0x80
 80055b2:	4021      	ands	r1, r4
 80055b4:	05c0      	lsls	r0, r0, #23
 80055b6:	f7fb fba9 	bl	8000d0c <TIM_SetCompare2>
       gdispImageOpenMemory(&auraLogo, &aura_logo);
 80055ba:	4918      	ldr	r1, [pc, #96]	; (800561c <main+0x33c>)
 80055bc:	4818      	ldr	r0, [pc, #96]	; (8005620 <main+0x340>)
 80055be:	f7ff f8cd 	bl	800475c <gfileOpenMemory>
 80055c2:	1c01      	adds	r1, r0, #0
 80055c4:	a80a      	add	r0, sp, #40	; 0x28
 80055c6:	f7fd f83f 	bl	8002648 <gdispImageOpenGFile>
       gdispImageDraw(&auraLogo, 0, 0, swidth, sheight, 0,0);
 80055ca:	9b07      	ldr	r3, [sp, #28]
 80055cc:	a90a      	add	r1, sp, #40	; 0x28
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	9b04      	ldr	r3, [sp, #16]
    TIM_SetCompare2 (TIM1, 85);
    TIM_SetCompare3 (TIM1, 120);
    TIM_SetCompare3 (TIM2, 90);
    TIM_SetCompare2 (TIM2, 100);
 
    for(j=0; j< 127; j++){
 80055d2:	3401      	adds	r4, #1
       TIM_SetCompare2 (TIM1, counter_2|((j&95)-i));
       TIM_SetCompare3 (TIM1, counter_3%((j&96)/i));
       TIM_SetCompare1 (TIM2, counter_4^((j&97)*i));
       TIM_SetCompare2 (TIM2, counter_5&((j&98)+i));
       gdispImageOpenMemory(&auraLogo, &aura_logo);
       gdispImageDraw(&auraLogo, 0, 0, swidth, sheight, 0,0);
 80055d4:	9301      	str	r3, [sp, #4]
 80055d6:	2300      	movs	r3, #0
 80055d8:	9302      	str	r3, [sp, #8]
 80055da:	9303      	str	r3, [sp, #12]
 80055dc:	1c1a      	adds	r2, r3, #0
 80055de:	6830      	ldr	r0, [r6, #0]
 80055e0:	f7fd f8a2 	bl	8002728 <gdispGImageDraw>
       gdispImageClose(&auraLogo);
 80055e4:	a80a      	add	r0, sp, #40	; 0x28
 80055e6:	f7fd f869 	bl	80026bc <gdispImageClose>
       delay_ms(10000);
 80055ea:	480e      	ldr	r0, [pc, #56]	; (8005624 <main+0x344>)
 80055ec:	f000 f870 	bl	80056d0 <delay_ms>
    TIM_SetCompare2 (TIM1, 85);
    TIM_SetCompare3 (TIM1, 120);
    TIM_SetCompare3 (TIM2, 90);
    TIM_SetCompare2 (TIM2, 100);
 
    for(j=0; j< 127; j++){
 80055f0:	2c7f      	cmp	r4, #127	; 0x7f
 80055f2:	d000      	beq.n	80055f6 <main+0x316>
 80055f4:	e76a      	b.n	80054cc <main+0x1ec>
 80055f6:	e723      	b.n	8005440 <main+0x160>
 80055f8:	20000034 	.word	0x20000034
 80055fc:	e000e010 	.word	0xe000e010
 8005600:	e000ed00 	.word	0xe000ed00
 8005604:	080074d2 	.word	0x080074d2
 8005608:	48000400 	.word	0x48000400
 800560c:	20000994 	.word	0x20000994
 8005610:	40012c00 	.word	0x40012c00
 8005614:	08006844 	.word	0x08006844
 8005618:	00001388 	.word	0x00001388
 800561c:	080074df 	.word	0x080074df
 8005620:	08007050 	.word	0x08007050
 8005624:	00002710 	.word	0x00002710

08005628 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005628:	4770      	bx	lr

0800562a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800562a:	e7fe      	b.n	800562a <HardFault_Handler>

0800562c <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800562c:	4770      	bx	lr

0800562e <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800562e:	4770      	bx	lr

08005630 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
    MSec++; 
 8005630:	4a02      	ldr	r2, [pc, #8]	; (800563c <SysTick_Handler+0xc>)
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	6013      	str	r3, [r2, #0]
}
 8005638:	4770      	bx	lr
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	20000990 	.word	0x20000990

08005640 <TIM2_IRQHandler>:
 * @retval None
 */
void TIMER_DELAY_IRQ_HANDLER(void)
{
	/* Clear TIMER update interrupt flag */
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 8005640:	2080      	movs	r0, #128	; 0x80
 * @brief  This function handles the timer interrupt.
 * @param  None
 * @retval None
 */
void TIMER_DELAY_IRQ_HANDLER(void)
{
 8005642:	b508      	push	{r3, lr}
	/* Clear TIMER update interrupt flag */
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 8005644:	05c0      	lsls	r0, r0, #23
 8005646:	2101      	movs	r1, #1
 8005648:	f7fb fe00 	bl	800124c <TIM_ClearITPendingBit>
	decrement_delay();
 800564c:	f000 f8b6 	bl	80057bc <decrement_delay>
}
 8005650:	bd08      	pop	{r3, pc}
	...

08005654 <TIM3_IRQHandler>:
 * @brief  This function handles the timer interrupt.
 * @param  None
 * @retval None
 */
void TIMER_TIMESTAMP_IRQ_HANDLER(void)
{
 8005654:	b508      	push	{r3, lr}
	/* Clear TIMER update interrupt flag */
	TIM_ClearITPendingBit(TIMER_TIMESTAMP, TIM_IT_Update);
 8005656:	4803      	ldr	r0, [pc, #12]	; (8005664 <TIM3_IRQHandler+0x10>)
 8005658:	2101      	movs	r1, #1
 800565a:	f7fb fdf7 	bl	800124c <TIM_ClearITPendingBit>
	increment_timestamp();
 800565e:	f000 f8b9 	bl	80057d4 <increment_timestamp>
}
 8005662:	bd08      	pop	{r3, pc}
 8005664:	40000400 	.word	0x40000400

08005668 <Interrupts_Config>:

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	4b02      	ldr	r3, [pc, #8]	; (8005674 <Interrupts_Config+0xc>)
 800566c:	0212      	lsls	r2, r2, #8
 800566e:	601a      	str	r2, [r3, #0]
  //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
  //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  //NVIC_Init(&NVIC_InitStructure);
	
}
 8005670:	4770      	bx	lr
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	e000e100 	.word	0xe000e100

08005678 <Timer_RCC_Config>:
 */
void Timer_RCC_Config( void )
{
	/*	enable TIM2 & TIM3 */
	//RCC_APB1PeriphClockCmd(		(TIMER_DELAY_CLOCK | TIMER_TIMESTAMP_CLOCK),
	RCC_APB1PeriphClockCmd(TIMER_DELAY_CLOCK,ENABLE);
 8005678:	2001      	movs	r0, #1
 *	@brief  This function configures RCC for the Timers
 *  @param  None
 *  @retval None
 */
void Timer_RCC_Config( void )
{
 800567a:	b508      	push	{r3, lr}
	/*	enable TIM2 & TIM3 */
	//RCC_APB1PeriphClockCmd(		(TIMER_DELAY_CLOCK | TIMER_TIMESTAMP_CLOCK),
	RCC_APB1PeriphClockCmd(TIMER_DELAY_CLOCK,ENABLE);
 800567c:	1c01      	adds	r1, r0, #0
 800567e:	f7fb f841 	bl	8000704 <RCC_APB1PeriphClockCmd>
}
 8005682:	bd08      	pop	{r3, pc}

08005684 <Timer_Structure_Config>:
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
 8005684:	23fa      	movs	r3, #250	; 0xfa
 *	@brief  Structure configuration for the Timers
 *  @param  None
 *  @retval None
 */
void Timer_Structure_Config( void )
{
 8005686:	b530      	push	{r4, r5, lr}
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8005688:	2480      	movs	r4, #128	; 0x80
 *	@brief  Structure configuration for the Timers
 *  @param  None
 *  @retval None
 */
void Timer_Structure_Config( void )
{
 800568a:	b085      	sub	sp, #20
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
 800568c:	a901      	add	r1, sp, #4
 800568e:	009b      	lsls	r3, r3, #2
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8005690:	2500      	movs	r5, #0
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
 8005692:	604b      	str	r3, [r1, #4]
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
 8005694:	2330      	movs	r3, #48	; 0x30
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8005696:	05e4      	lsls	r4, r4, #23
 8005698:	1c20      	adds	r0, r4, #0
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
 800569a:	800b      	strh	r3, [r1, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 800569c:	810d      	strh	r5, [r1, #8]
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 800569e:	804d      	strh	r5, [r1, #2]
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 80056a0:	f7fb f936 	bl	8000910 <TIM_TimeBaseInit>
	
	TIM_UpdateRequestConfig(TIMER_DELAY, TIM_UpdateSource_Global);
 80056a4:	1c20      	adds	r0, r4, #0
 80056a6:	1c29      	adds	r1, r5, #0
 80056a8:	f7fb f9aa 	bl	8000a00 <TIM_UpdateRequestConfig>
	
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 80056ac:	1c20      	adds	r0, r4, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	f7fb fdcc 	bl	800124c <TIM_ClearITPendingBit>
		
	/* Enable TIMER Update interrupt */
	TIM_ITConfig(TIMER_DELAY, TIM_IT_Update, ENABLE);
 80056b4:	2101      	movs	r1, #1
 80056b6:	1c20      	adds	r0, r4, #0
 80056b8:	1c0a      	adds	r2, r1, #0
 80056ba:	f7fb fda5 	bl	8001208 <TIM_ITConfig>
	//TIM_ClearITPendingBit(TIMER_TIMESTAMP, TIM_IT_Update);
	//	
	///* Enable TIMER Update interrupt */
	//TIM_ITConfig(TIMER_TIMESTAMP, TIM_IT_Update, ENABLE);
	
}
 80056be:	b005      	add	sp, #20
 80056c0:	bd30      	pop	{r4, r5, pc}

080056c2 <Timer_Config>:
 *	@brief  This function configures the Timers
 *  @param  None
 *  @retval None
 */
void Timer_Config( void )
{
 80056c2:	b508      	push	{r3, lr}
	Timer_RCC_Config( );
 80056c4:	f7ff ffd8 	bl	8005678 <Timer_RCC_Config>
	Timer_Structure_Config( );
 80056c8:	f7ff ffdc 	bl	8005684 <Timer_Structure_Config>
}
 80056cc:	bd08      	pop	{r3, pc}
	...

080056d0 <delay_ms>:
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 80056d0:	23fa      	movs	r3, #250	; 0xfa
 *	@brief  Time delay in millisecond
 *  @param  delay : delay in ms.
 *  @retval none
 */
void delay_ms(uint16_t delay)
{
 80056d2:	b530      	push	{r4, r5, lr}
	counter_delay_ms = delay;
 80056d4:	4d1b      	ldr	r5, [pc, #108]	; (8005744 <delay_ms+0x74>)
 *	@brief  Time delay in millisecond
 *  @param  delay : delay in ms.
 *  @retval none
 */
void delay_ms(uint16_t delay)
{
 80056d6:	b085      	sub	sp, #20
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 80056d8:	a901      	add	r1, sp, #4
 *  @param  delay : delay in ms.
 *  @retval none
 */
void delay_ms(uint16_t delay)
{
	counter_delay_ms = delay;
 80056da:	8028      	strh	r0, [r5, #0]
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 80056dc:	009b      	lsls	r3, r3, #2
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 80056de:	2080      	movs	r0, #128	; 0x80
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 80056e0:	2400      	movs	r4, #0
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 80056e2:	604b      	str	r3, [r1, #4]
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
 80056e4:	2330      	movs	r3, #48	; 0x30
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 80056e6:	05c0      	lsls	r0, r0, #23
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
 80056e8:	800b      	strh	r3, [r1, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 80056ea:	810c      	strh	r4, [r1, #8]
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 80056ec:	804c      	strh	r4, [r1, #2]
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 80056ee:	f7fb f90f 	bl	8000910 <TIM_TimeBaseInit>
	
	TIM_UpdateRequestConfig(TIMER_DELAY, TIM_UpdateSource_Global);
 80056f2:	2080      	movs	r0, #128	; 0x80
 80056f4:	1c21      	adds	r1, r4, #0
 80056f6:	05c0      	lsls	r0, r0, #23
 80056f8:	f7fb f982 	bl	8000a00 <TIM_UpdateRequestConfig>
	
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 80056fc:	2080      	movs	r0, #128	; 0x80
 80056fe:	2101      	movs	r1, #1
 8005700:	05c0      	lsls	r0, r0, #23
 8005702:	f7fb fda3 	bl	800124c <TIM_ClearITPendingBit>
		
	/* Enable TIMER Update interrupt */
	TIM_ITConfig(TIMER_DELAY, TIM_IT_Update, ENABLE);
 8005706:	2101      	movs	r1, #1
 8005708:	2080      	movs	r0, #128	; 0x80
 800570a:	1c0a      	adds	r2, r1, #0
 800570c:	05c0      	lsls	r0, r0, #23
 800570e:	f7fb fd7b 	bl	8001208 <TIM_ITConfig>

	/* Disable timer	*/
	TIM_Cmd(TIMER_DELAY, DISABLE);
 8005712:	2080      	movs	r0, #128	; 0x80
 8005714:	1c21      	adds	r1, r4, #0
 8005716:	05c0      	lsls	r0, r0, #23
 8005718:	f7fb f99c 	bl	8000a54 <TIM_Cmd>
{
	counter_delay_ms = delay;
	
	TimerDelay_ms_Config ();
	
	TIM_SetCounter(TIMER_DELAY, 0);
 800571c:	2080      	movs	r0, #128	; 0x80
 800571e:	1c21      	adds	r1, r4, #0
 8005720:	05c0      	lsls	r0, r0, #23
 8005722:	f7fb f957 	bl	80009d4 <TIM_SetCounter>
	/* TIM2 enable counter */
    TIM_Cmd(TIMER_DELAY, ENABLE);
 8005726:	2080      	movs	r0, #128	; 0x80
 8005728:	2101      	movs	r1, #1
 800572a:	05c0      	lsls	r0, r0, #23
 800572c:	f7fb f992 	bl	8000a54 <TIM_Cmd>
	/* Wait for 'delay' milliseconds */
	while(counter_delay_ms != 0);
 8005730:	8829      	ldrh	r1, [r5, #0]
 8005732:	b289      	uxth	r1, r1
 8005734:	2900      	cmp	r1, #0
 8005736:	d1fb      	bne.n	8005730 <delay_ms+0x60>
	/* TIM2 disable counter */
	TIM_Cmd(TIMER_DELAY, DISABLE);
 8005738:	2080      	movs	r0, #128	; 0x80
 800573a:	05c0      	lsls	r0, r0, #23
 800573c:	f7fb f98a 	bl	8000a54 <TIM_Cmd>
}
 8005740:	b005      	add	sp, #20
 8005742:	bd30      	pop	{r4, r5, pc}
 8005744:	20000950 	.word	0x20000950

08005748 <delay_us>:
 *	@brief  Time delay in microsecond
 *  @param  delay : delay in us.
 *  @retval none
 */
void delay_us(uint16_t delay)
{
 8005748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	counter_delay_ms = delay;
 800574a:	4e1b      	ldr	r6, [pc, #108]	; (80057b8 <delay_us+0x70>)
	* Delay TIMER configuration (us)
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
 800574c:	2330      	movs	r3, #48	; 0x30
 *  @param  delay : delay in us.
 *  @retval none
 */
void delay_us(uint16_t delay)
{
	counter_delay_ms = delay;
 800574e:	8030      	strh	r0, [r6, #0]
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_US_DELAY, &TIM_TimeBaseStructure);
 8005750:	2080      	movs	r0, #128	; 0x80
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
 8005752:	2401      	movs	r4, #1
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8005754:	2500      	movs	r5, #0
	* Delay TIMER configuration (us)
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
 8005756:	a901      	add	r1, sp, #4
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_US_DELAY, &TIM_TimeBaseStructure);
 8005758:	05c0      	lsls	r0, r0, #23
	* Delay TIMER configuration (us)
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
 800575a:	604b      	str	r3, [r1, #4]
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
 800575c:	800c      	strh	r4, [r1, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 800575e:	810d      	strh	r5, [r1, #8]
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 8005760:	804d      	strh	r5, [r1, #2]
	TIM_TimeBaseInit(TIMER_US_DELAY, &TIM_TimeBaseStructure);
 8005762:	f7fb f8d5 	bl	8000910 <TIM_TimeBaseInit>
	
	TIM_UpdateRequestConfig(TIMER_US_DELAY, TIM_UpdateSource_Global);
 8005766:	2080      	movs	r0, #128	; 0x80
 8005768:	1c29      	adds	r1, r5, #0
 800576a:	05c0      	lsls	r0, r0, #23
 800576c:	f7fb f948 	bl	8000a00 <TIM_UpdateRequestConfig>
	
	TIM_ClearITPendingBit(TIMER_US_DELAY, TIM_IT_Update);
 8005770:	2080      	movs	r0, #128	; 0x80
 8005772:	1c21      	adds	r1, r4, #0
 8005774:	05c0      	lsls	r0, r0, #23
 8005776:	f7fb fd69 	bl	800124c <TIM_ClearITPendingBit>
		
	/* Enable TIMER Update interrupt */
	TIM_ITConfig(TIMER_US_DELAY, TIM_IT_Update, ENABLE);
 800577a:	2080      	movs	r0, #128	; 0x80
 800577c:	1c22      	adds	r2, r4, #0
 800577e:	05c0      	lsls	r0, r0, #23
 8005780:	1c21      	adds	r1, r4, #0
 8005782:	f7fb fd41 	bl	8001208 <TIM_ITConfig>

	/* Disable timer	*/
	TIM_Cmd(TIMER_US_DELAY, DISABLE);
 8005786:	2080      	movs	r0, #128	; 0x80
 8005788:	1c29      	adds	r1, r5, #0
 800578a:	05c0      	lsls	r0, r0, #23
 800578c:	f7fb f962 	bl	8000a54 <TIM_Cmd>
{
	counter_delay_ms = delay;
	
	TimerDelay_us_Config();

	TIM_SetCounter(TIMER_US_DELAY, 0);
 8005790:	2080      	movs	r0, #128	; 0x80
 8005792:	1c29      	adds	r1, r5, #0
 8005794:	05c0      	lsls	r0, r0, #23
 8005796:	f7fb f91d 	bl	80009d4 <TIM_SetCounter>
	/* TIM2 enable counter */
    TIM_Cmd(TIMER_US_DELAY, ENABLE);
 800579a:	2080      	movs	r0, #128	; 0x80
 800579c:	1c21      	adds	r1, r4, #0
 800579e:	05c0      	lsls	r0, r0, #23
 80057a0:	f7fb f958 	bl	8000a54 <TIM_Cmd>
	/* Wait for 'delay' us */
	while(counter_delay_ms != 0);
 80057a4:	8831      	ldrh	r1, [r6, #0]
 80057a6:	b289      	uxth	r1, r1
 80057a8:	2900      	cmp	r1, #0
 80057aa:	d1fb      	bne.n	80057a4 <delay_us+0x5c>
	/* TIM2 disable counter */
	TIM_Cmd(TIMER_US_DELAY, DISABLE);
 80057ac:	2080      	movs	r0, #128	; 0x80
 80057ae:	05c0      	lsls	r0, r0, #23
 80057b0:	f7fb f950 	bl	8000a54 <TIM_Cmd>
}
 80057b4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	20000950 	.word	0x20000950

080057bc <decrement_delay>:
 *  @param  None
 *  @retval None
 */
void decrement_delay(void)
{
	if(counter_delay_ms != 0)
 80057bc:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <decrement_delay+0x14>)
 80057be:	8813      	ldrh	r3, [r2, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <decrement_delay+0x10>
	{
		/* Decrements the counter */ 
		counter_delay_ms--;
 80057c4:	8813      	ldrh	r3, [r2, #0]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	8013      	strh	r3, [r2, #0]
	}
}
 80057cc:	4770      	bx	lr
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	20000950 	.word	0x20000950

080057d4 <increment_timestamp>:
 *  @param  None
 *  @retval None
 */
void increment_timestamp(void)
{
	if(timestamp_us <= 0xFFFFFFFE)
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <increment_timestamp+0x10>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	3201      	adds	r2, #1
 80057da:	d002      	beq.n	80057e2 <increment_timestamp+0xe>
	{
		timestamp_us++;
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	3201      	adds	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
	}
}
 80057e2:	4770      	bx	lr
 80057e4:	20000954 	.word	0x20000954

080057e8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80057e8:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80057ea:	2001      	movs	r0, #1

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80057ec:	240f      	movs	r4, #15
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80057ee:	4b24      	ldr	r3, [pc, #144]	; (8005880 <SystemInit+0x98>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4302      	orrs	r2, r0
 80057f4:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80057f6:	6859      	ldr	r1, [r3, #4]
 80057f8:	4a22      	ldr	r2, [pc, #136]	; (8005884 <SystemInit+0x9c>)
 80057fa:	400a      	ands	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	4a21      	ldr	r2, [pc, #132]	; (8005888 <SystemInit+0xa0>)
 8005802:	400a      	ands	r2, r1
 8005804:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005806:	6819      	ldr	r1, [r3, #0]
 8005808:	4a20      	ldr	r2, [pc, #128]	; (800588c <SystemInit+0xa4>)
 800580a:	400a      	ands	r2, r1
 800580c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800580e:	6859      	ldr	r1, [r3, #4]
 8005810:	4a1f      	ldr	r2, [pc, #124]	; (8005890 <SystemInit+0xa8>)
 8005812:	4011      	ands	r1, r2
 8005814:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8005816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005818:	43a1      	bics	r1, r4
 800581a:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800581c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800581e:	491d      	ldr	r1, [pc, #116]	; (8005894 <SystemInit+0xac>)
 8005820:	4021      	ands	r1, r4
 8005822:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8005824:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005826:	4381      	bics	r1, r0
 8005828:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800582a:	2100      	movs	r1, #0
 800582c:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800582e:	9100      	str	r1, [sp, #0]
 8005830:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8005832:	4919      	ldr	r1, [pc, #100]	; (8005898 <SystemInit+0xb0>)
 8005834:	3010      	adds	r0, #16
 8005836:	6008      	str	r0, [r1, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	6059      	str	r1, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	6059      	str	r1, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8005840:	6859      	ldr	r1, [r3, #4]
 8005842:	400a      	ands	r2, r1
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8005844:	21a0      	movs	r1, #160	; 0xa0
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8005846:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	0389      	lsls	r1, r1, #14
 800584c:	430a      	orrs	r2, r1
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 800584e:	2180      	movs	r1, #128	; 0x80
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8005850:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	0449      	lsls	r1, r1, #17
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800585a:	6819      	ldr	r1, [r3, #0]
 800585c:	4a08      	ldr	r2, [pc, #32]	; (8005880 <SystemInit+0x98>)
 800585e:	0189      	lsls	r1, r1, #6
 8005860:	d5fb      	bpl.n	800585a <SystemInit+0x72>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005862:	2003      	movs	r0, #3
 8005864:	6851      	ldr	r1, [r2, #4]
 8005866:	4381      	bics	r1, r0
 8005868:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800586a:	6851      	ldr	r1, [r2, #4]
 800586c:	3801      	subs	r0, #1
 800586e:	4301      	orrs	r1, r0
 8005870:	6051      	str	r1, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8005872:	220c      	movs	r2, #12
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	400a      	ands	r2, r1
 8005878:	2a08      	cmp	r2, #8
 800587a:	d1fa      	bne.n	8005872 <SystemInit+0x8a>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 800587c:	bd13      	pop	{r0, r1, r4, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	40021000 	.word	0x40021000
 8005884:	f8ffb80c 	.word	0xf8ffb80c
 8005888:	fef6ffff 	.word	0xfef6ffff
 800588c:	fffbffff 	.word	0xfffbffff
 8005890:	ffc0ffff 	.word	0xffc0ffff
 8005894:	fffffeac 	.word	0xfffffeac
 8005898:	40022000 	.word	0x40022000

0800589c <get_timer_clock_frequency>:

/** @addtogroup HW_Config_Private_Functions
 * 	@{
 */
uint32_t get_timer_clock_frequency (void)
{
 800589c:	b500      	push	{lr}
 800589e:	b089      	sub	sp, #36	; 0x24
  RCC_ClocksTypeDef RCC_Clocks;
  RCC_GetClocksFreq (&RCC_Clocks);
 80058a0:	a801      	add	r0, sp, #4
 80058a2:	f7fa fe67 	bl	8000574 <RCC_GetClocksFreq>
  uint32_t multiplier;
  if (RCC_Clocks.PCLK_Frequency == RCC_Clocks.SYSCLK_Frequency) {
 80058a6:	9a03      	ldr	r2, [sp, #12]
    multiplier = 1;
  } else {
    multiplier = 2;
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	4258      	negs	r0, r3
 80058ae:	4143      	adcs	r3, r0
 80058b0:	2002      	movs	r0, #2
 80058b2:	1ac0      	subs	r0, r0, r3
  }
  return multiplier * RCC_Clocks.PCLK_Frequency;
 80058b4:	4350      	muls	r0, r2
}
 80058b6:	b009      	add	sp, #36	; 0x24
 80058b8:	bd00      	pop	{pc}
	...

080058bc <timer_clock_init>:
 *	@brief Structure configuration for the Timer2 in ms
 *  @param  None
 *  @retval None
 */
void timer_clock_init(void)
{
 80058bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint32_t TIMER_Frequency = get_timer_clock_frequency();
 80058be:	f7ff ffed 	bl	800589c <get_timer_clock_frequency>
 80058c2:	1c05      	adds	r5, r0, #0
    uint32_t COUNTER_Frequency = 100 * 100;
    uint32_t PSC_Value = (TIMER_Frequency / COUNTER_Frequency) - 1;
    //uint16_t ARR_Value = PWM_Steps - 1; 
    uint16_t ARR_Value = 100 - 1; 
     /* make sure the peripheral is clocked */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80058c4:	2001      	movs	r0, #1
 80058c6:	1c01      	adds	r1, r0, #0
 80058c8:	f7fa ff1c 	bl	8000704 <RCC_APB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80058cc:	2080      	movs	r0, #128	; 0x80
    
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* set everything back to default values */
    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
    /* only changes from the defaults are needed */
    TIM_TimeBaseStructure.TIM_Period = ARR_Value;
 80058ce:	2663      	movs	r6, #99	; 0x63
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
    
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* set everything back to default values */
    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
 80058d0:	ac01      	add	r4, sp, #4
    uint32_t PSC_Value = (TIMER_Frequency / COUNTER_Frequency) - 1;
    //uint16_t ARR_Value = PWM_Steps - 1; 
    uint16_t ARR_Value = 100 - 1; 
     /* make sure the peripheral is clocked */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80058d2:	2101      	movs	r1, #1
 80058d4:	0100      	lsls	r0, r0, #4
 80058d6:	f7fa ff09 	bl	80006ec <RCC_APB2PeriphClockCmd>
    
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* set everything back to default values */
    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
 80058da:	1c20      	adds	r0, r4, #0
 80058dc:	f7fb f866 	bl	80009ac <TIM_TimeBaseStructInit>
void timer_clock_init(void)
{
    uint32_t TIMER_Frequency = get_timer_clock_frequency();
    //uint32_t COUNTER_Frequency = PWM_Steps * PWM_Frequency;
    uint32_t COUNTER_Frequency = 100 * 100;
    uint32_t PSC_Value = (TIMER_Frequency / COUNTER_Frequency) - 1;
 80058e0:	1c28      	adds	r0, r5, #0
 80058e2:	490b      	ldr	r1, [pc, #44]	; (8005910 <timer_clock_init+0x54>)
    
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* set everything back to default values */
    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
    /* only changes from the defaults are needed */
    TIM_TimeBaseStructure.TIM_Period = ARR_Value;
 80058e4:	6066      	str	r6, [r4, #4]
void timer_clock_init(void)
{
    uint32_t TIMER_Frequency = get_timer_clock_frequency();
    //uint32_t COUNTER_Frequency = PWM_Steps * PWM_Frequency;
    uint32_t COUNTER_Frequency = 100 * 100;
    uint32_t PSC_Value = (TIMER_Frequency / COUNTER_Frequency) - 1;
 80058e6:	f7ff fb53 	bl	8004f90 <__aeabi_uidiv>
 80058ea:	1e45      	subs	r5, r0, #1
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* set everything back to default values */
    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
    /* only changes from the defaults are needed */
    TIM_TimeBaseStructure.TIM_Period = ARR_Value;
    TIM_TimeBaseStructure.TIM_Prescaler = PSC_Value;
 80058ec:	b2ad      	uxth	r5, r5
    TIM_TimeBaseInit(TIMER_LED_EYE_RIGHT, &TIM_TimeBaseStructure);
 80058ee:	1c21      	adds	r1, r4, #0
 80058f0:	4808      	ldr	r0, [pc, #32]	; (8005914 <timer_clock_init+0x58>)
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    /* set everything back to default values */
    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
    /* only changes from the defaults are needed */
    TIM_TimeBaseStructure.TIM_Period = ARR_Value;
    TIM_TimeBaseStructure.TIM_Prescaler = PSC_Value;
 80058f2:	8025      	strh	r5, [r4, #0]
    TIM_TimeBaseInit(TIMER_LED_EYE_RIGHT, &TIM_TimeBaseStructure);
 80058f4:	f7fb f80c 	bl	8000910 <TIM_TimeBaseInit>

    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
 80058f8:	1c20      	adds	r0, r4, #0
 80058fa:	f7fb f857 	bl	80009ac <TIM_TimeBaseStructInit>
    TIM_TimeBaseStructure.TIM_Period = ARR_Value;
    TIM_TimeBaseStructure.TIM_Prescaler = PSC_Value;
    TIM_TimeBaseInit(TIMER_LED_EYE_LEFT, &TIM_TimeBaseStructure);
 80058fe:	2080      	movs	r0, #128	; 0x80
 8005900:	1c21      	adds	r1, r4, #0
 8005902:	05c0      	lsls	r0, r0, #23
    TIM_TimeBaseStructure.TIM_Period = ARR_Value;
    TIM_TimeBaseStructure.TIM_Prescaler = PSC_Value;
    TIM_TimeBaseInit(TIMER_LED_EYE_RIGHT, &TIM_TimeBaseStructure);

    TIM_TimeBaseStructInit (&TIM_TimeBaseStructure);
    TIM_TimeBaseStructure.TIM_Period = ARR_Value;
 8005904:	6066      	str	r6, [r4, #4]
    TIM_TimeBaseStructure.TIM_Prescaler = PSC_Value;
 8005906:	8025      	strh	r5, [r4, #0]
    TIM_TimeBaseInit(TIMER_LED_EYE_LEFT, &TIM_TimeBaseStructure);
 8005908:	f7fb f802 	bl	8000910 <TIM_TimeBaseInit>
}
 800590c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	00002710 	.word	0x00002710
 8005914:	40012c00 	.word	0x40012c00

08005918 <timer_pwm_init>:

void timer_pwm_init (void)
{
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b087      	sub	sp, #28
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  /* always initialise local variables before use */
  TIM_OCStructInit (&TIM_OCInitStructure);
 800591c:	ac01      	add	r4, sp, #4
 800591e:	1c20      	adds	r0, r4, #0
 8005920:	f7fb f9c2 	bl	8000ca8 <TIM_OCStructInit>
 
  /* Common settings for all channels */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8005924:	2500      	movs	r5, #0
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  /* always initialise local variables before use */
  TIM_OCStructInit (&TIM_OCInitStructure);
 
  /* Common settings for all channels */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8005926:	2370      	movs	r3, #112	; 0x70
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005928:	2701      	movs	r7, #1
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = 0;
 
  /* Channel2 - ORANGE LED*/
  TIM_OC1Init (TIMER_LED_EYE_RIGHT, &TIM_OCInitStructure);
 800592a:	4e12      	ldr	r6, [pc, #72]	; (8005974 <timer_pwm_init+0x5c>)
 800592c:	1c21      	adds	r1, r4, #0
 800592e:	1c30      	adds	r0, r6, #0
  TIM_OCInitTypeDef  TIM_OCInitStructure;
  /* always initialise local variables before use */
  TIM_OCStructInit (&TIM_OCInitStructure);
 
  /* Common settings for all channels */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
 8005930:	8023      	strh	r3, [r4, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8005932:	81a5      	strh	r5, [r4, #12]
  TIM_OCInitStructure.TIM_Pulse = 0;
 8005934:	60a5      	str	r5, [r4, #8]
  /* always initialise local variables before use */
  TIM_OCStructInit (&TIM_OCInitStructure);
 
  /* Common settings for all channels */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005936:	8067      	strh	r7, [r4, #2]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = 0;
 
  /* Channel2 - ORANGE LED*/
  TIM_OC1Init (TIMER_LED_EYE_RIGHT, &TIM_OCInitStructure);
 8005938:	f7fb f8c0 	bl	8000abc <TIM_OC1Init>
 
  /* Channel3 - RED LED*/
  TIM_OC2Init (TIMER_LED_EYE_RIGHT, &TIM_OCInitStructure);
 800593c:	1c30      	adds	r0, r6, #0
 800593e:	1c21      	adds	r1, r4, #0
 8005940:	f7fb f8fc 	bl	8000b3c <TIM_OC2Init>
 
  /* Channel4 - BLUE LED*/
  /* make this the opposite polarity to the other two */
  //TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
  TIM_OC3Init (TIMER_LED_EYE_RIGHT, &TIM_OCInitStructure);
 8005944:	1c21      	adds	r1, r4, #0
 8005946:	1c30      	adds	r0, r6, #0
 8005948:	f7fb f938 	bl	8000bbc <TIM_OC3Init>

  TIM_OCStructInit (&TIM_OCInitStructure);
 800594c:	1c20      	adds	r0, r4, #0
 800594e:	f7fb f9ab 	bl	8000ca8 <TIM_OCStructInit>
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8005952:	81a5      	strh	r5, [r4, #12]
  TIM_OCInitStructure.TIM_Pulse = 0;
 8005954:	60a5      	str	r5, [r4, #8]

  TIM_OC2Init (TIMER_LED_EYE_LEFT, &TIM_OCInitStructure);
 8005956:	2580      	movs	r5, #128	; 0x80
  /* make this the opposite polarity to the other two */
  //TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
  TIM_OC3Init (TIMER_LED_EYE_RIGHT, &TIM_OCInitStructure);

  TIM_OCStructInit (&TIM_OCInitStructure);
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8005958:	2360      	movs	r3, #96	; 0x60
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = 0;

  TIM_OC2Init (TIMER_LED_EYE_LEFT, &TIM_OCInitStructure);
 800595a:	05ed      	lsls	r5, r5, #23
 800595c:	1c28      	adds	r0, r5, #0
 800595e:	1c21      	adds	r1, r4, #0
  /* make this the opposite polarity to the other two */
  //TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
  TIM_OC3Init (TIMER_LED_EYE_RIGHT, &TIM_OCInitStructure);

  TIM_OCStructInit (&TIM_OCInitStructure);
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8005960:	8023      	strh	r3, [r4, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005962:	8067      	strh	r7, [r4, #2]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OCInitStructure.TIM_Pulse = 0;

  TIM_OC2Init (TIMER_LED_EYE_LEFT, &TIM_OCInitStructure);
 8005964:	f7fb f8ea 	bl	8000b3c <TIM_OC2Init>
  TIM_OC3Init (TIMER_LED_EYE_LEFT, &TIM_OCInitStructure);
 8005968:	1c28      	adds	r0, r5, #0
 800596a:	1c21      	adds	r1, r4, #0
 800596c:	f7fb f926 	bl	8000bbc <TIM_OC3Init>
}
 8005970:	b007      	add	sp, #28
 8005972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005974:	40012c00 	.word	0x40012c00

08005978 <led_init>:

void led_init(void){
 8005978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  /* always initialise local variables before use */
  GPIO_StructInit (&GPIO_InitStructure);
 800597a:	4668      	mov	r0, sp
 800597c:	f7fa fc58 	bl	8000230 <GPIO_StructInit>
 
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOA, ENABLE);
 8005980:	2080      	movs	r0, #128	; 0x80
 8005982:	2101      	movs	r1, #1
 8005984:	0280      	lsls	r0, r0, #10
 8005986:	f7fa fea5 	bl	80006d4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);
 800598a:	2080      	movs	r0, #128	; 0x80
 800598c:	2101      	movs	r1, #1
 800598e:	02c0      	lsls	r0, r0, #11
 8005990:	f7fa fea0 	bl	80006d4 <RCC_AHBPeriphClockCmd>
 
  /* these pins will be controlled by the CCRx registers */
  GPIO_InitStructure.GPIO_Pin = LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8005994:	466b      	mov	r3, sp
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8005996:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_Init (LED_EYE_RIGHT_PORT, &GPIO_InitStructure);
 8005998:	2590      	movs	r5, #144	; 0x90
 
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);
 
  /* these pins will be controlled by the CCRx registers */
  GPIO_InitStructure.GPIO_Pin = LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN ;
 800599a:	27e0      	movs	r7, #224	; 0xe0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800599c:	2402      	movs	r4, #2
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800599e:	719a      	strb	r2, [r3, #6]
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);
 
  /* these pins will be controlled by the CCRx registers */
  GPIO_InitStructure.GPIO_Pin = LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80059a0:	2603      	movs	r6, #3
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80059a2:	2201      	movs	r2, #1
  GPIO_Init (LED_EYE_RIGHT_PORT, &GPIO_InitStructure);
 80059a4:	05ed      	lsls	r5, r5, #23
 
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);
 
  /* these pins will be controlled by the CCRx registers */
  GPIO_InitStructure.GPIO_Pin = LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN ;
 80059a6:	00ff      	lsls	r7, r7, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_Init (LED_EYE_RIGHT_PORT, &GPIO_InitStructure);
 80059a8:	1c28      	adds	r0, r5, #0
 80059aa:	4669      	mov	r1, sp
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);
 
  /* these pins will be controlled by the CCRx registers */
  GPIO_InitStructure.GPIO_Pin = LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80059ac:	715e      	strb	r6, [r3, #5]
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);
 
  /* these pins will be controlled by the CCRx registers */
  GPIO_InitStructure.GPIO_Pin = LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80059ae:	711c      	strb	r4, [r3, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80059b0:	71da      	strb	r2, [r3, #7]
 
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd (RCC_AHBPeriph_GPIOB, ENABLE);
 
  /* these pins will be controlled by the CCRx registers */
  GPIO_InitStructure.GPIO_Pin = LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN ;
 80059b2:	9700      	str	r7, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_Init (LED_EYE_RIGHT_PORT, &GPIO_InitStructure);
 80059b4:	f7fa fbd8 	bl	8000168 <GPIO_Init>
 
  /* ensure that the pins all start off in a known state */
  //GPIO_ResetBits (LED_EYE_RIGHT_PORT, LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN);
  GPIO_SetBits (LED_EYE_RIGHT_PORT, LED_EYE_RIGHT_BLUE + LED_EYE_RIGHT_RED + LED_EYE_RIGHT_GREEN);
 80059b8:	1c39      	adds	r1, r7, #0
 80059ba:	1c28      	adds	r0, r5, #0
 80059bc:	f7fa fc6a 	bl	8000294 <GPIO_SetBits>
 
  /* The others get connected to the AF function for the timer */
  GPIO_PinAFConfig (LED_EYE_RIGHT_PORT, LED_EYE_RIGHT_BLUE_Pin_Source, GPIO_AF_2);
 80059c0:	1c28      	adds	r0, r5, #0
 80059c2:	1c22      	adds	r2, r4, #0
 80059c4:	2108      	movs	r1, #8
 80059c6:	f7fa fc71 	bl	80002ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig (LED_EYE_RIGHT_PORT, LED_EYE_RIGHT_GREEN_Pin_Source, GPIO_AF_2);
 80059ca:	1c28      	adds	r0, r5, #0
 80059cc:	1c22      	adds	r2, r4, #0
 80059ce:	210a      	movs	r1, #10
 80059d0:	f7fa fc6c 	bl	80002ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig (LED_EYE_RIGHT_PORT, LED_EYE_RIGHT_RED_Pin_Source, GPIO_AF_2);
 80059d4:	1c28      	adds	r0, r5, #0
 80059d6:	1c22      	adds	r2, r4, #0
 80059d8:	2109      	movs	r1, #9
 80059da:	f7fa fc67 	bl	80002ac <GPIO_PinAFConfig>

  //configure blue left LED
  GPIO_InitStructure.GPIO_Pin = LED_EYE_LEFT_BLUE;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80059de:	466b      	mov	r3, sp
 80059e0:	715e      	strb	r6, [r3, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
  //GPIO_Init (LED_EYE_RIGHT_PORT, &GPIO_InitStructure); //GPIO A

  GPIO_InitStructure.GPIO_Pin = LED_EYE_LEFT_RED + LED_EYE_LEFT_GREEN ;
 80059e2:	2381      	movs	r3, #129	; 0x81
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80059e8:	2200      	movs	r2, #0
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
  //GPIO_Init (LED_EYE_RIGHT_PORT, &GPIO_InitStructure); //GPIO A

  GPIO_InitStructure.GPIO_Pin = LED_EYE_LEFT_RED + LED_EYE_LEFT_GREEN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80059ea:	466b      	mov	r3, sp
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80059ec:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80059ee:	2201      	movs	r2, #1
  GPIO_Init (LED_EYE_LEFT_PORT, &GPIO_InitStructure);
 80059f0:	4d0a      	ldr	r5, [pc, #40]	; (8005a1c <led_init+0xa4>)
 80059f2:	4669      	mov	r1, sp
 80059f4:	1c28      	adds	r0, r5, #0

  GPIO_InitStructure.GPIO_Pin = LED_EYE_LEFT_RED + LED_EYE_LEFT_GREEN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80059f6:	71da      	strb	r2, [r3, #7]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN ;
  //GPIO_Init (LED_EYE_RIGHT_PORT, &GPIO_InitStructure); //GPIO A

  GPIO_InitStructure.GPIO_Pin = LED_EYE_LEFT_RED + LED_EYE_LEFT_GREEN ;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80059f8:	711c      	strb	r4, [r3, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
  GPIO_Init (LED_EYE_LEFT_PORT, &GPIO_InitStructure);
 80059fa:	f7fa fbb5 	bl	8000168 <GPIO_Init>
 
  GPIO_SetBits (LED_EYE_LEFT_PORT, LED_EYE_LEFT_BLUE + LED_EYE_LEFT_RED + LED_EYE_LEFT_GREEN);
 80059fe:	1c28      	adds	r0, r5, #0
 8005a00:	4907      	ldr	r1, [pc, #28]	; (8005a20 <led_init+0xa8>)
 8005a02:	f7fa fc47 	bl	8000294 <GPIO_SetBits>
  //GPIO_PinAFConfig (LED_EYE_LEFT_PORT, LED_EYE_LEFT_BLUE_Pin_Source, GPIO_AF_2);
  GPIO_PinAFConfig(LED_EYE_LEFT_PORT, LED_EYE_LEFT_GREEN_Pin_Source, GPIO_AF_2);
 8005a06:	1c28      	adds	r0, r5, #0
 8005a08:	1c22      	adds	r2, r4, #0
 8005a0a:	210a      	movs	r1, #10
 8005a0c:	f7fa fc4e 	bl	80002ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LED_EYE_LEFT_PORT, LED_EYE_LEFT_RED_Pin_Source, GPIO_AF_2);
 8005a10:	1c28      	adds	r0, r5, #0
 8005a12:	1c31      	adds	r1, r6, #0
 8005a14:	1c22      	adds	r2, r4, #0
 8005a16:	f7fa fc49 	bl	80002ac <GPIO_PinAFConfig>

}
 8005a1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005a1c:	48000400 	.word	0x48000400
 8005a20:	00008408 	.word	0x00008408

08005a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a24:	480d      	ldr	r0, [pc, #52]	; (8005a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005a28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005a2a:	e003      	b.n	8005a34 <LoopCopyDataInit>

08005a2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005a2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005a30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005a32:	3104      	adds	r1, #4

08005a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005a34:	480b      	ldr	r0, [pc, #44]	; (8005a64 <LoopForever+0xa>)
  ldr r3, =_edata
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <LoopForever+0xe>)
  adds r2, r0, r1
 8005a38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005a3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005a3c:	d3f6      	bcc.n	8005a2c <CopyDataInit>
  ldr r2, =_sbss
 8005a3e:	4a0b      	ldr	r2, [pc, #44]	; (8005a6c <LoopForever+0x12>)
  b LoopFillZerobss
 8005a40:	e002      	b.n	8005a48 <LoopFillZerobss>

08005a42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005a42:	2300      	movs	r3, #0
  str  r3, [r2]
 8005a44:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a46:	3204      	adds	r2, #4

08005a48 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <LoopForever+0x16>)
  cmp r2, r3
 8005a4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005a4c:	d3f9      	bcc.n	8005a42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005a4e:	f7ff fecb 	bl	80057e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a52:	f000 f811 	bl	8005a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a56:	f7ff fc43 	bl	80052e0 <main>

08005a5a <LoopForever>:
  
LoopForever:
    b LoopForever
 8005a5a:	e7fe      	b.n	8005a5a <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a5c:	20001800 	.word	0x20001800
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8005a60:	08007524 	.word	0x08007524
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8005a64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005a68:	20000874 	.word	0x20000874
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8005a6c:	20000874 	.word	0x20000874
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8005a70:	200009a0 	.word	0x200009a0

08005a74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a74:	e7fe      	b.n	8005a74 <ADC1_COMP_IRQHandler>
	...

08005a78 <__libc_init_array>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4e0d      	ldr	r6, [pc, #52]	; (8005ab0 <__libc_init_array+0x38>)
 8005a7c:	4d0d      	ldr	r5, [pc, #52]	; (8005ab4 <__libc_init_array+0x3c>)
 8005a7e:	2400      	movs	r4, #0
 8005a80:	1bad      	subs	r5, r5, r6
 8005a82:	10ad      	asrs	r5, r5, #2
 8005a84:	d005      	beq.n	8005a92 <__libc_init_array+0x1a>
 8005a86:	00a3      	lsls	r3, r4, #2
 8005a88:	58f3      	ldr	r3, [r6, r3]
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	4798      	blx	r3
 8005a8e:	42a5      	cmp	r5, r4
 8005a90:	d1f9      	bne.n	8005a86 <__libc_init_array+0xe>
 8005a92:	f001 fd3b 	bl	800750c <_init>
 8005a96:	4e08      	ldr	r6, [pc, #32]	; (8005ab8 <__libc_init_array+0x40>)
 8005a98:	4d08      	ldr	r5, [pc, #32]	; (8005abc <__libc_init_array+0x44>)
 8005a9a:	2400      	movs	r4, #0
 8005a9c:	1bad      	subs	r5, r5, r6
 8005a9e:	10ad      	asrs	r5, r5, #2
 8005aa0:	d005      	beq.n	8005aae <__libc_init_array+0x36>
 8005aa2:	00a3      	lsls	r3, r4, #2
 8005aa4:	58f3      	ldr	r3, [r6, r3]
 8005aa6:	3401      	adds	r4, #1
 8005aa8:	4798      	blx	r3
 8005aaa:	42a5      	cmp	r5, r4
 8005aac:	d1f9      	bne.n	8005aa2 <__libc_init_array+0x2a>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ac0 <malloc>:
 8005ac0:	b508      	push	{r3, lr}
 8005ac2:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <malloc+0x10>)
 8005ac4:	1c01      	adds	r1, r0, #0
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	f000 f80e 	bl	8005ae8 <_malloc_r>
 8005acc:	bd08      	pop	{r3, pc}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	20000460 	.word	0x20000460

08005ad4 <free>:
 8005ad4:	b508      	push	{r3, lr}
 8005ad6:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <free+0x10>)
 8005ad8:	1c01      	adds	r1, r0, #0
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	f000 fd80 	bl	80065e0 <_free_r>
 8005ae0:	bd08      	pop	{r3, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	20000460 	.word	0x20000460

08005ae8 <_malloc_r>:
 8005ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aea:	465f      	mov	r7, fp
 8005aec:	464d      	mov	r5, r9
 8005aee:	4656      	mov	r6, sl
 8005af0:	4644      	mov	r4, r8
 8005af2:	b4f0      	push	{r4, r5, r6, r7}
 8005af4:	1c0d      	adds	r5, r1, #0
 8005af6:	350b      	adds	r5, #11
 8005af8:	b083      	sub	sp, #12
 8005afa:	1c07      	adds	r7, r0, #0
 8005afc:	2d16      	cmp	r5, #22
 8005afe:	d92d      	bls.n	8005b5c <_malloc_r+0x74>
 8005b00:	2307      	movs	r3, #7
 8005b02:	439d      	bics	r5, r3
 8005b04:	d500      	bpl.n	8005b08 <_malloc_r+0x20>
 8005b06:	e0c7      	b.n	8005c98 <_malloc_r+0x1b0>
 8005b08:	42a9      	cmp	r1, r5
 8005b0a:	d900      	bls.n	8005b0e <_malloc_r+0x26>
 8005b0c:	e0c4      	b.n	8005c98 <_malloc_r+0x1b0>
 8005b0e:	f000 fb0d 	bl	800612c <__malloc_lock>
 8005b12:	23f8      	movs	r3, #248	; 0xf8
 8005b14:	33ff      	adds	r3, #255	; 0xff
 8005b16:	429d      	cmp	r5, r3
 8005b18:	d828      	bhi.n	8005b6c <_malloc_r+0x84>
 8005b1a:	08e9      	lsrs	r1, r5, #3
 8005b1c:	4ecb      	ldr	r6, [pc, #812]	; (8005e4c <_malloc_r+0x364>)
 8005b1e:	00cb      	lsls	r3, r1, #3
 8005b20:	18f3      	adds	r3, r6, r3
 8005b22:	68dc      	ldr	r4, [r3, #12]
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d100      	bne.n	8005b2a <_malloc_r+0x42>
 8005b28:	e1c1      	b.n	8005eae <_malloc_r+0x3c6>
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	6862      	ldr	r2, [r4, #4]
 8005b2e:	439a      	bics	r2, r3
 8005b30:	1c13      	adds	r3, r2, #0
 8005b32:	68e2      	ldr	r2, [r4, #12]
 8005b34:	68a1      	ldr	r1, [r4, #8]
 8005b36:	60ca      	str	r2, [r1, #12]
 8005b38:	6091      	str	r1, [r2, #8]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	18e3      	adds	r3, r4, r3
 8005b3e:	6859      	ldr	r1, [r3, #4]
 8005b40:	1c38      	adds	r0, r7, #0
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	f000 faf3 	bl	8006130 <__malloc_unlock>
 8005b4a:	1c20      	adds	r0, r4, #0
 8005b4c:	3008      	adds	r0, #8
 8005b4e:	b003      	add	sp, #12
 8005b50:	bc3c      	pop	{r2, r3, r4, r5}
 8005b52:	4690      	mov	r8, r2
 8005b54:	4699      	mov	r9, r3
 8005b56:	46a2      	mov	sl, r4
 8005b58:	46ab      	mov	fp, r5
 8005b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b5c:	2910      	cmp	r1, #16
 8005b5e:	d900      	bls.n	8005b62 <_malloc_r+0x7a>
 8005b60:	e09a      	b.n	8005c98 <_malloc_r+0x1b0>
 8005b62:	1c38      	adds	r0, r7, #0
 8005b64:	f000 fae2 	bl	800612c <__malloc_lock>
 8005b68:	2510      	movs	r5, #16
 8005b6a:	e7d6      	b.n	8005b1a <_malloc_r+0x32>
 8005b6c:	0a69      	lsrs	r1, r5, #9
 8005b6e:	d100      	bne.n	8005b72 <_malloc_r+0x8a>
 8005b70:	e096      	b.n	8005ca0 <_malloc_r+0x1b8>
 8005b72:	2904      	cmp	r1, #4
 8005b74:	d900      	bls.n	8005b78 <_malloc_r+0x90>
 8005b76:	e13c      	b.n	8005df2 <_malloc_r+0x30a>
 8005b78:	2338      	movs	r3, #56	; 0x38
 8005b7a:	469c      	mov	ip, r3
 8005b7c:	09a9      	lsrs	r1, r5, #6
 8005b7e:	448c      	add	ip, r1
 8005b80:	4663      	mov	r3, ip
 8005b82:	0059      	lsls	r1, r3, #1
 8005b84:	4eb1      	ldr	r6, [pc, #708]	; (8005e4c <_malloc_r+0x364>)
 8005b86:	0089      	lsls	r1, r1, #2
 8005b88:	1871      	adds	r1, r6, r1
 8005b8a:	68cc      	ldr	r4, [r1, #12]
 8005b8c:	42a1      	cmp	r1, r4
 8005b8e:	d015      	beq.n	8005bbc <_malloc_r+0xd4>
 8005b90:	2303      	movs	r3, #3
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	439a      	bics	r2, r3
 8005b96:	1c13      	adds	r3, r2, #0
 8005b98:	1b52      	subs	r2, r2, r5
 8005b9a:	2a0f      	cmp	r2, #15
 8005b9c:	dd00      	ble.n	8005ba0 <_malloc_r+0xb8>
 8005b9e:	e083      	b.n	8005ca8 <_malloc_r+0x1c0>
 8005ba0:	2003      	movs	r0, #3
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	db07      	blt.n	8005bb6 <_malloc_r+0xce>
 8005ba6:	e7c4      	b.n	8005b32 <_malloc_r+0x4a>
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	4383      	bics	r3, r0
 8005bac:	1b5a      	subs	r2, r3, r5
 8005bae:	2a0f      	cmp	r2, #15
 8005bb0:	dc7a      	bgt.n	8005ca8 <_malloc_r+0x1c0>
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	dabd      	bge.n	8005b32 <_malloc_r+0x4a>
 8005bb6:	68e4      	ldr	r4, [r4, #12]
 8005bb8:	42a1      	cmp	r1, r4
 8005bba:	d1f5      	bne.n	8005ba8 <_malloc_r+0xc0>
 8005bbc:	4661      	mov	r1, ip
 8005bbe:	3101      	adds	r1, #1
 8005bc0:	9100      	str	r1, [sp, #0]
 8005bc2:	1c32      	adds	r2, r6, #0
 8005bc4:	6934      	ldr	r4, [r6, #16]
 8005bc6:	3208      	adds	r2, #8
 8005bc8:	4294      	cmp	r4, r2
 8005bca:	d100      	bne.n	8005bce <_malloc_r+0xe6>
 8005bcc:	e161      	b.n	8005e92 <_malloc_r+0x3aa>
 8005bce:	2303      	movs	r3, #3
 8005bd0:	6861      	ldr	r1, [r4, #4]
 8005bd2:	4399      	bics	r1, r3
 8005bd4:	1c0b      	adds	r3, r1, #0
 8005bd6:	1b48      	subs	r0, r1, r5
 8005bd8:	280f      	cmp	r0, #15
 8005bda:	dd00      	ble.n	8005bde <_malloc_r+0xf6>
 8005bdc:	e148      	b.n	8005e70 <_malloc_r+0x388>
 8005bde:	6172      	str	r2, [r6, #20]
 8005be0:	6132      	str	r2, [r6, #16]
 8005be2:	2800      	cmp	r0, #0
 8005be4:	daa9      	bge.n	8005b3a <_malloc_r+0x52>
 8005be6:	4a9a      	ldr	r2, [pc, #616]	; (8005e50 <_malloc_r+0x368>)
 8005be8:	4291      	cmp	r1, r2
 8005bea:	d900      	bls.n	8005bee <_malloc_r+0x106>
 8005bec:	e10d      	b.n	8005e0a <_malloc_r+0x322>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	08c8      	lsrs	r0, r1, #3
 8005bf2:	1082      	asrs	r2, r0, #2
 8005bf4:	4093      	lsls	r3, r2
 8005bf6:	6872      	ldr	r2, [r6, #4]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	00c3      	lsls	r3, r0, #3
 8005bfc:	18f3      	adds	r3, r6, r3
 8005bfe:	6898      	ldr	r0, [r3, #8]
 8005c00:	60e3      	str	r3, [r4, #12]
 8005c02:	60a0      	str	r0, [r4, #8]
 8005c04:	609c      	str	r4, [r3, #8]
 8005c06:	1c13      	adds	r3, r2, #0
 8005c08:	6072      	str	r2, [r6, #4]
 8005c0a:	60c4      	str	r4, [r0, #12]
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	9a00      	ldr	r2, [sp, #0]
 8005c10:	1092      	asrs	r2, r2, #2
 8005c12:	4090      	lsls	r0, r2
 8005c14:	4298      	cmp	r0, r3
 8005c16:	d84c      	bhi.n	8005cb2 <_malloc_r+0x1ca>
 8005c18:	4218      	tst	r0, r3
 8005c1a:	d10d      	bne.n	8005c38 <_malloc_r+0x150>
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	9900      	ldr	r1, [sp, #0]
 8005c20:	0040      	lsls	r0, r0, #1
 8005c22:	4391      	bics	r1, r2
 8005c24:	1d0a      	adds	r2, r1, #4
 8005c26:	9200      	str	r2, [sp, #0]
 8005c28:	4218      	tst	r0, r3
 8005c2a:	d105      	bne.n	8005c38 <_malloc_r+0x150>
 8005c2c:	9a00      	ldr	r2, [sp, #0]
 8005c2e:	0040      	lsls	r0, r0, #1
 8005c30:	3204      	adds	r2, #4
 8005c32:	9200      	str	r2, [sp, #0]
 8005c34:	4218      	tst	r0, r3
 8005c36:	d0f9      	beq.n	8005c2c <_malloc_r+0x144>
 8005c38:	2303      	movs	r3, #3
 8005c3a:	4698      	mov	r8, r3
 8005c3c:	9a00      	ldr	r2, [sp, #0]
 8005c3e:	00d3      	lsls	r3, r2, #3
 8005c40:	4699      	mov	r9, r3
 8005c42:	44b1      	add	r9, r6
 8005c44:	46cc      	mov	ip, r9
 8005c46:	4692      	mov	sl, r2
 8005c48:	4663      	mov	r3, ip
 8005c4a:	68dc      	ldr	r4, [r3, #12]
 8005c4c:	45a4      	cmp	ip, r4
 8005c4e:	d107      	bne.n	8005c60 <_malloc_r+0x178>
 8005c50:	e121      	b.n	8005e96 <_malloc_r+0x3ae>
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	db00      	blt.n	8005c58 <_malloc_r+0x170>
 8005c56:	e133      	b.n	8005ec0 <_malloc_r+0x3d8>
 8005c58:	68e4      	ldr	r4, [r4, #12]
 8005c5a:	45a4      	cmp	ip, r4
 8005c5c:	d100      	bne.n	8005c60 <_malloc_r+0x178>
 8005c5e:	e11a      	b.n	8005e96 <_malloc_r+0x3ae>
 8005c60:	4642      	mov	r2, r8
 8005c62:	6863      	ldr	r3, [r4, #4]
 8005c64:	4393      	bics	r3, r2
 8005c66:	1b5a      	subs	r2, r3, r5
 8005c68:	2a0f      	cmp	r2, #15
 8005c6a:	ddf2      	ble.n	8005c52 <_malloc_r+0x16a>
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	1963      	adds	r3, r4, r5
 8005c70:	430d      	orrs	r5, r1
 8005c72:	6065      	str	r5, [r4, #4]
 8005c74:	68e0      	ldr	r0, [r4, #12]
 8005c76:	68a5      	ldr	r5, [r4, #8]
 8005c78:	3608      	adds	r6, #8
 8005c7a:	60e8      	str	r0, [r5, #12]
 8005c7c:	4311      	orrs	r1, r2
 8005c7e:	6085      	str	r5, [r0, #8]
 8005c80:	60f3      	str	r3, [r6, #12]
 8005c82:	60b3      	str	r3, [r6, #8]
 8005c84:	1c38      	adds	r0, r7, #0
 8005c86:	60de      	str	r6, [r3, #12]
 8005c88:	609e      	str	r6, [r3, #8]
 8005c8a:	6059      	str	r1, [r3, #4]
 8005c8c:	509a      	str	r2, [r3, r2]
 8005c8e:	f000 fa4f 	bl	8006130 <__malloc_unlock>
 8005c92:	1c20      	adds	r0, r4, #0
 8005c94:	3008      	adds	r0, #8
 8005c96:	e75a      	b.n	8005b4e <_malloc_r+0x66>
 8005c98:	230c      	movs	r3, #12
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	e756      	b.n	8005b4e <_malloc_r+0x66>
 8005ca0:	233f      	movs	r3, #63	; 0x3f
 8005ca2:	217e      	movs	r1, #126	; 0x7e
 8005ca4:	469c      	mov	ip, r3
 8005ca6:	e76d      	b.n	8005b84 <_malloc_r+0x9c>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	425b      	negs	r3, r3
 8005cac:	4698      	mov	r8, r3
 8005cae:	44c4      	add	ip, r8
 8005cb0:	e784      	b.n	8005bbc <_malloc_r+0xd4>
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	68b4      	ldr	r4, [r6, #8]
 8005cb6:	6862      	ldr	r2, [r4, #4]
 8005cb8:	439a      	bics	r2, r3
 8005cba:	4690      	mov	r8, r2
 8005cbc:	4295      	cmp	r5, r2
 8005cbe:	d803      	bhi.n	8005cc8 <_malloc_r+0x1e0>
 8005cc0:	1b52      	subs	r2, r2, r5
 8005cc2:	2a0f      	cmp	r2, #15
 8005cc4:	dd00      	ble.n	8005cc8 <_malloc_r+0x1e0>
 8005cc6:	e086      	b.n	8005dd6 <_malloc_r+0x2ee>
 8005cc8:	1c23      	adds	r3, r4, #0
 8005cca:	4443      	add	r3, r8
 8005ccc:	4a61      	ldr	r2, [pc, #388]	; (8005e54 <_malloc_r+0x36c>)
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	4b61      	ldr	r3, [pc, #388]	; (8005e58 <_malloc_r+0x370>)
 8005cd2:	4693      	mov	fp, r2
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	18eb      	adds	r3, r5, r3
 8005cda:	3201      	adds	r2, #1
 8005cdc:	d100      	bne.n	8005ce0 <_malloc_r+0x1f8>
 8005cde:	e15c      	b.n	8005f9a <_malloc_r+0x4b2>
 8005ce0:	4a5e      	ldr	r2, [pc, #376]	; (8005e5c <_malloc_r+0x374>)
 8005ce2:	4694      	mov	ip, r2
 8005ce4:	4463      	add	r3, ip
 8005ce6:	0b1b      	lsrs	r3, r3, #12
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	1c38      	adds	r0, r7, #0
 8005cee:	9900      	ldr	r1, [sp, #0]
 8005cf0:	f000 fc14 	bl	800651c <_sbrk_r>
 8005cf4:	1c03      	adds	r3, r0, #0
 8005cf6:	4681      	mov	r9, r0
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	d060      	beq.n	8005dbe <_malloc_r+0x2d6>
 8005cfc:	9b01      	ldr	r3, [sp, #4]
 8005cfe:	4283      	cmp	r3, r0
 8005d00:	d900      	bls.n	8005d04 <_malloc_r+0x21c>
 8005d02:	e0f8      	b.n	8005ef6 <_malloc_r+0x40e>
 8005d04:	4b56      	ldr	r3, [pc, #344]	; (8005e60 <_malloc_r+0x378>)
 8005d06:	9a00      	ldr	r2, [sp, #0]
 8005d08:	469a      	mov	sl, r3
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	469c      	mov	ip, r3
 8005d0e:	4653      	mov	r3, sl
 8005d10:	4462      	add	r2, ip
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	454b      	cmp	r3, r9
 8005d18:	d100      	bne.n	8005d1c <_malloc_r+0x234>
 8005d1a:	e14c      	b.n	8005fb6 <_malloc_r+0x4ce>
 8005d1c:	465b      	mov	r3, fp
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	d100      	bne.n	8005d26 <_malloc_r+0x23e>
 8005d24:	e15e      	b.n	8005fe4 <_malloc_r+0x4fc>
 8005d26:	464b      	mov	r3, r9
 8005d28:	9901      	ldr	r1, [sp, #4]
 8005d2a:	1a5b      	subs	r3, r3, r1
 8005d2c:	18d2      	adds	r2, r2, r3
 8005d2e:	4653      	mov	r3, sl
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	2307      	movs	r3, #7
 8005d34:	464a      	mov	r2, r9
 8005d36:	4013      	ands	r3, r2
 8005d38:	d100      	bne.n	8005d3c <_malloc_r+0x254>
 8005d3a:	e113      	b.n	8005f64 <_malloc_r+0x47c>
 8005d3c:	2108      	movs	r1, #8
 8005d3e:	4689      	mov	r9, r1
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	4491      	add	r9, r2
 8005d44:	4a47      	ldr	r2, [pc, #284]	; (8005e64 <_malloc_r+0x37c>)
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	9b00      	ldr	r3, [sp, #0]
 8005d4a:	1c38      	adds	r0, r7, #0
 8005d4c:	444b      	add	r3, r9
 8005d4e:	051b      	lsls	r3, r3, #20
 8005d50:	0d1b      	lsrs	r3, r3, #20
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	1c19      	adds	r1, r3, #0
 8005d56:	469b      	mov	fp, r3
 8005d58:	f000 fbe0 	bl	800651c <_sbrk_r>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	d100      	bne.n	8005d62 <_malloc_r+0x27a>
 8005d60:	e134      	b.n	8005fcc <_malloc_r+0x4e4>
 8005d62:	464b      	mov	r3, r9
 8005d64:	1ac0      	subs	r0, r0, r3
 8005d66:	2301      	movs	r3, #1
 8005d68:	4458      	add	r0, fp
 8005d6a:	4318      	orrs	r0, r3
 8005d6c:	4653      	mov	r3, sl
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	445b      	add	r3, fp
 8005d72:	1c1a      	adds	r2, r3, #0
 8005d74:	4653      	mov	r3, sl
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	464b      	mov	r3, r9
 8005d7a:	60b3      	str	r3, [r6, #8]
 8005d7c:	6058      	str	r0, [r3, #4]
 8005d7e:	42b4      	cmp	r4, r6
 8005d80:	d013      	beq.n	8005daa <_malloc_r+0x2c2>
 8005d82:	4643      	mov	r3, r8
 8005d84:	2b0f      	cmp	r3, #15
 8005d86:	d800      	bhi.n	8005d8a <_malloc_r+0x2a2>
 8005d88:	e0f7      	b.n	8005f7a <_malloc_r+0x492>
 8005d8a:	4643      	mov	r3, r8
 8005d8c:	2107      	movs	r1, #7
 8005d8e:	6860      	ldr	r0, [r4, #4]
 8005d90:	3b0c      	subs	r3, #12
 8005d92:	438b      	bics	r3, r1
 8005d94:	3906      	subs	r1, #6
 8005d96:	4001      	ands	r1, r0
 8005d98:	2005      	movs	r0, #5
 8005d9a:	4319      	orrs	r1, r3
 8005d9c:	6061      	str	r1, [r4, #4]
 8005d9e:	18e1      	adds	r1, r4, r3
 8005da0:	6048      	str	r0, [r1, #4]
 8005da2:	6088      	str	r0, [r1, #8]
 8005da4:	2b0f      	cmp	r3, #15
 8005da6:	d900      	bls.n	8005daa <_malloc_r+0x2c2>
 8005da8:	e114      	b.n	8005fd4 <_malloc_r+0x4ec>
 8005daa:	4b2f      	ldr	r3, [pc, #188]	; (8005e68 <_malloc_r+0x380>)
 8005dac:	6819      	ldr	r1, [r3, #0]
 8005dae:	428a      	cmp	r2, r1
 8005db0:	d900      	bls.n	8005db4 <_malloc_r+0x2cc>
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <_malloc_r+0x384>)
 8005db6:	6819      	ldr	r1, [r3, #0]
 8005db8:	428a      	cmp	r2, r1
 8005dba:	d900      	bls.n	8005dbe <_malloc_r+0x2d6>
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	68b4      	ldr	r4, [r6, #8]
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	439a      	bics	r2, r3
 8005dc6:	1c13      	adds	r3, r2, #0
 8005dc8:	1b5a      	subs	r2, r3, r5
 8005dca:	429d      	cmp	r5, r3
 8005dcc:	d900      	bls.n	8005dd0 <_malloc_r+0x2e8>
 8005dce:	e0b9      	b.n	8005f44 <_malloc_r+0x45c>
 8005dd0:	2a0f      	cmp	r2, #15
 8005dd2:	dc00      	bgt.n	8005dd6 <_malloc_r+0x2ee>
 8005dd4:	e0b6      	b.n	8005f44 <_malloc_r+0x45c>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	1c29      	adds	r1, r5, #0
 8005dda:	1965      	adds	r5, r4, r5
 8005ddc:	4319      	orrs	r1, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	6061      	str	r1, [r4, #4]
 8005de2:	1c38      	adds	r0, r7, #0
 8005de4:	60b5      	str	r5, [r6, #8]
 8005de6:	606b      	str	r3, [r5, #4]
 8005de8:	f000 f9a2 	bl	8006130 <__malloc_unlock>
 8005dec:	1c20      	adds	r0, r4, #0
 8005dee:	3008      	adds	r0, #8
 8005df0:	e6ad      	b.n	8005b4e <_malloc_r+0x66>
 8005df2:	2914      	cmp	r1, #20
 8005df4:	d973      	bls.n	8005ede <_malloc_r+0x3f6>
 8005df6:	2954      	cmp	r1, #84	; 0x54
 8005df8:	d900      	bls.n	8005dfc <_malloc_r+0x314>
 8005dfa:	e0a8      	b.n	8005f4e <_malloc_r+0x466>
 8005dfc:	236e      	movs	r3, #110	; 0x6e
 8005dfe:	469c      	mov	ip, r3
 8005e00:	0b29      	lsrs	r1, r5, #12
 8005e02:	448c      	add	ip, r1
 8005e04:	4663      	mov	r3, ip
 8005e06:	0059      	lsls	r1, r3, #1
 8005e08:	e6bc      	b.n	8005b84 <_malloc_r+0x9c>
 8005e0a:	0a4a      	lsrs	r2, r1, #9
 8005e0c:	2a04      	cmp	r2, #4
 8005e0e:	d86c      	bhi.n	8005eea <_malloc_r+0x402>
 8005e10:	098a      	lsrs	r2, r1, #6
 8005e12:	3238      	adds	r2, #56	; 0x38
 8005e14:	1c10      	adds	r0, r2, #0
 8005e16:	0052      	lsls	r2, r2, #1
 8005e18:	0092      	lsls	r2, r2, #2
 8005e1a:	4694      	mov	ip, r2
 8005e1c:	44b4      	add	ip, r6
 8005e1e:	4662      	mov	r2, ip
 8005e20:	2103      	movs	r1, #3
 8005e22:	6892      	ldr	r2, [r2, #8]
 8005e24:	4688      	mov	r8, r1
 8005e26:	4562      	cmp	r2, ip
 8005e28:	d100      	bne.n	8005e2c <_malloc_r+0x344>
 8005e2a:	e09e      	b.n	8005f6a <_malloc_r+0x482>
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	6850      	ldr	r0, [r2, #4]
 8005e30:	4388      	bics	r0, r1
 8005e32:	4283      	cmp	r3, r0
 8005e34:	d202      	bcs.n	8005e3c <_malloc_r+0x354>
 8005e36:	6892      	ldr	r2, [r2, #8]
 8005e38:	4594      	cmp	ip, r2
 8005e3a:	d1f7      	bne.n	8005e2c <_malloc_r+0x344>
 8005e3c:	68d0      	ldr	r0, [r2, #12]
 8005e3e:	6873      	ldr	r3, [r6, #4]
 8005e40:	60e0      	str	r0, [r4, #12]
 8005e42:	60a2      	str	r2, [r4, #8]
 8005e44:	6084      	str	r4, [r0, #8]
 8005e46:	60d4      	str	r4, [r2, #12]
 8005e48:	e6e0      	b.n	8005c0c <_malloc_r+0x124>
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	20000464 	.word	0x20000464
 8005e50:	000001ff 	.word	0x000001ff
 8005e54:	20000870 	.word	0x20000870
 8005e58:	20000960 	.word	0x20000960
 8005e5c:	0000100f 	.word	0x0000100f
 8005e60:	20000964 	.word	0x20000964
 8005e64:	00001008 	.word	0x00001008
 8005e68:	2000095c 	.word	0x2000095c
 8005e6c:	20000958 	.word	0x20000958
 8005e70:	2101      	movs	r1, #1
 8005e72:	1963      	adds	r3, r4, r5
 8005e74:	430d      	orrs	r5, r1
 8005e76:	4301      	orrs	r1, r0
 8005e78:	6065      	str	r5, [r4, #4]
 8005e7a:	6173      	str	r3, [r6, #20]
 8005e7c:	6133      	str	r3, [r6, #16]
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	6059      	str	r1, [r3, #4]
 8005e84:	5018      	str	r0, [r3, r0]
 8005e86:	1c38      	adds	r0, r7, #0
 8005e88:	f000 f952 	bl	8006130 <__malloc_unlock>
 8005e8c:	1c20      	adds	r0, r4, #0
 8005e8e:	3008      	adds	r0, #8
 8005e90:	e65d      	b.n	8005b4e <_malloc_r+0x66>
 8005e92:	6873      	ldr	r3, [r6, #4]
 8005e94:	e6ba      	b.n	8005c0c <_malloc_r+0x124>
 8005e96:	2308      	movs	r3, #8
 8005e98:	469b      	mov	fp, r3
 8005e9a:	3b07      	subs	r3, #7
 8005e9c:	44dc      	add	ip, fp
 8005e9e:	469b      	mov	fp, r3
 8005ea0:	44da      	add	sl, fp
 8005ea2:	4643      	mov	r3, r8
 8005ea4:	4652      	mov	r2, sl
 8005ea6:	4213      	tst	r3, r2
 8005ea8:	d000      	beq.n	8005eac <_malloc_r+0x3c4>
 8005eaa:	e6cd      	b.n	8005c48 <_malloc_r+0x160>
 8005eac:	e031      	b.n	8005f12 <_malloc_r+0x42a>
 8005eae:	1c23      	adds	r3, r4, #0
 8005eb0:	6964      	ldr	r4, [r4, #20]
 8005eb2:	1c8a      	adds	r2, r1, #2
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	9200      	str	r2, [sp, #0]
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	d100      	bne.n	8005ebe <_malloc_r+0x3d6>
 8005ebc:	e681      	b.n	8005bc2 <_malloc_r+0xda>
 8005ebe:	e634      	b.n	8005b2a <_malloc_r+0x42>
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	18e3      	adds	r3, r4, r3
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	1c38      	adds	r0, r7, #0
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
 8005ecc:	68e3      	ldr	r3, [r4, #12]
 8005ece:	68a2      	ldr	r2, [r4, #8]
 8005ed0:	60d3      	str	r3, [r2, #12]
 8005ed2:	609a      	str	r2, [r3, #8]
 8005ed4:	f000 f92c 	bl	8006130 <__malloc_unlock>
 8005ed8:	1c20      	adds	r0, r4, #0
 8005eda:	3008      	adds	r0, #8
 8005edc:	e637      	b.n	8005b4e <_malloc_r+0x66>
 8005ede:	235b      	movs	r3, #91	; 0x5b
 8005ee0:	469c      	mov	ip, r3
 8005ee2:	448c      	add	ip, r1
 8005ee4:	4663      	mov	r3, ip
 8005ee6:	0059      	lsls	r1, r3, #1
 8005ee8:	e64c      	b.n	8005b84 <_malloc_r+0x9c>
 8005eea:	2a14      	cmp	r2, #20
 8005eec:	d858      	bhi.n	8005fa0 <_malloc_r+0x4b8>
 8005eee:	325b      	adds	r2, #91	; 0x5b
 8005ef0:	1c10      	adds	r0, r2, #0
 8005ef2:	0052      	lsls	r2, r2, #1
 8005ef4:	e790      	b.n	8005e18 <_malloc_r+0x330>
 8005ef6:	42b4      	cmp	r4, r6
 8005ef8:	d000      	beq.n	8005efc <_malloc_r+0x414>
 8005efa:	e760      	b.n	8005dbe <_malloc_r+0x2d6>
 8005efc:	e702      	b.n	8005d04 <_malloc_r+0x21c>
 8005efe:	9b00      	ldr	r3, [sp, #0]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	464b      	mov	r3, r9
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	3b08      	subs	r3, #8
 8005f0a:	4691      	mov	r9, r2
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d000      	beq.n	8005f12 <_malloc_r+0x42a>
 8005f10:	e080      	b.n	8006014 <_malloc_r+0x52c>
 8005f12:	4643      	mov	r3, r8
 8005f14:	9a00      	ldr	r2, [sp, #0]
 8005f16:	4213      	tst	r3, r2
 8005f18:	d1f1      	bne.n	8005efe <_malloc_r+0x416>
 8005f1a:	6873      	ldr	r3, [r6, #4]
 8005f1c:	4383      	bics	r3, r0
 8005f1e:	6073      	str	r3, [r6, #4]
 8005f20:	0040      	lsls	r0, r0, #1
 8005f22:	4298      	cmp	r0, r3
 8005f24:	d900      	bls.n	8005f28 <_malloc_r+0x440>
 8005f26:	e6c4      	b.n	8005cb2 <_malloc_r+0x1ca>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d100      	bne.n	8005f2e <_malloc_r+0x446>
 8005f2c:	e6c1      	b.n	8005cb2 <_malloc_r+0x1ca>
 8005f2e:	4218      	tst	r0, r3
 8005f30:	d172      	bne.n	8006018 <_malloc_r+0x530>
 8005f32:	4652      	mov	r2, sl
 8005f34:	9200      	str	r2, [sp, #0]
 8005f36:	9a00      	ldr	r2, [sp, #0]
 8005f38:	0040      	lsls	r0, r0, #1
 8005f3a:	3204      	adds	r2, #4
 8005f3c:	9200      	str	r2, [sp, #0]
 8005f3e:	4218      	tst	r0, r3
 8005f40:	d0f9      	beq.n	8005f36 <_malloc_r+0x44e>
 8005f42:	e67b      	b.n	8005c3c <_malloc_r+0x154>
 8005f44:	1c38      	adds	r0, r7, #0
 8005f46:	f000 f8f3 	bl	8006130 <__malloc_unlock>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e5ff      	b.n	8005b4e <_malloc_r+0x66>
 8005f4e:	23aa      	movs	r3, #170	; 0xaa
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4299      	cmp	r1, r3
 8005f54:	d817      	bhi.n	8005f86 <_malloc_r+0x49e>
 8005f56:	3bdd      	subs	r3, #221	; 0xdd
 8005f58:	469c      	mov	ip, r3
 8005f5a:	0be9      	lsrs	r1, r5, #15
 8005f5c:	448c      	add	ip, r1
 8005f5e:	4663      	mov	r3, ip
 8005f60:	0059      	lsls	r1, r3, #1
 8005f62:	e60f      	b.n	8005b84 <_malloc_r+0x9c>
 8005f64:	2280      	movs	r2, #128	; 0x80
 8005f66:	0152      	lsls	r2, r2, #5
 8005f68:	e6ee      	b.n	8005d48 <_malloc_r+0x260>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	1080      	asrs	r0, r0, #2
 8005f6e:	4083      	lsls	r3, r0
 8005f70:	6871      	ldr	r1, [r6, #4]
 8005f72:	1c10      	adds	r0, r2, #0
 8005f74:	430b      	orrs	r3, r1
 8005f76:	6073      	str	r3, [r6, #4]
 8005f78:	e762      	b.n	8005e40 <_malloc_r+0x358>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	464a      	mov	r2, r9
 8005f7e:	464c      	mov	r4, r9
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	2300      	movs	r3, #0
 8005f84:	e720      	b.n	8005dc8 <_malloc_r+0x2e0>
 8005f86:	4b26      	ldr	r3, [pc, #152]	; (8006020 <_malloc_r+0x538>)
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	d810      	bhi.n	8005fae <_malloc_r+0x4c6>
 8005f8c:	237c      	movs	r3, #124	; 0x7c
 8005f8e:	469c      	mov	ip, r3
 8005f90:	0ca9      	lsrs	r1, r5, #18
 8005f92:	448c      	add	ip, r1
 8005f94:	4663      	mov	r3, ip
 8005f96:	0059      	lsls	r1, r3, #1
 8005f98:	e5f4      	b.n	8005b84 <_malloc_r+0x9c>
 8005f9a:	3310      	adds	r3, #16
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	e6a5      	b.n	8005cec <_malloc_r+0x204>
 8005fa0:	2a54      	cmp	r2, #84	; 0x54
 8005fa2:	d823      	bhi.n	8005fec <_malloc_r+0x504>
 8005fa4:	0b0a      	lsrs	r2, r1, #12
 8005fa6:	326e      	adds	r2, #110	; 0x6e
 8005fa8:	1c10      	adds	r0, r2, #0
 8005faa:	0052      	lsls	r2, r2, #1
 8005fac:	e734      	b.n	8005e18 <_malloc_r+0x330>
 8005fae:	237e      	movs	r3, #126	; 0x7e
 8005fb0:	21fc      	movs	r1, #252	; 0xfc
 8005fb2:	469c      	mov	ip, r3
 8005fb4:	e5e6      	b.n	8005b84 <_malloc_r+0x9c>
 8005fb6:	051b      	lsls	r3, r3, #20
 8005fb8:	d000      	beq.n	8005fbc <_malloc_r+0x4d4>
 8005fba:	e6af      	b.n	8005d1c <_malloc_r+0x234>
 8005fbc:	9b00      	ldr	r3, [sp, #0]
 8005fbe:	68b1      	ldr	r1, [r6, #8]
 8005fc0:	4443      	add	r3, r8
 8005fc2:	1c18      	adds	r0, r3, #0
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4303      	orrs	r3, r0
 8005fc8:	604b      	str	r3, [r1, #4]
 8005fca:	e6ee      	b.n	8005daa <_malloc_r+0x2c2>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2001      	movs	r0, #1
 8005fd0:	469b      	mov	fp, r3
 8005fd2:	e6cb      	b.n	8005d6c <_malloc_r+0x284>
 8005fd4:	1c21      	adds	r1, r4, #0
 8005fd6:	1c38      	adds	r0, r7, #0
 8005fd8:	3108      	adds	r1, #8
 8005fda:	f000 fb01 	bl	80065e0 <_free_r>
 8005fde:	4653      	mov	r3, sl
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	e6e2      	b.n	8005daa <_malloc_r+0x2c2>
 8005fe4:	465b      	mov	r3, fp
 8005fe6:	464a      	mov	r2, r9
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e6a2      	b.n	8005d32 <_malloc_r+0x24a>
 8005fec:	20aa      	movs	r0, #170	; 0xaa
 8005fee:	0040      	lsls	r0, r0, #1
 8005ff0:	4282      	cmp	r2, r0
 8005ff2:	d804      	bhi.n	8005ffe <_malloc_r+0x516>
 8005ff4:	0bca      	lsrs	r2, r1, #15
 8005ff6:	3277      	adds	r2, #119	; 0x77
 8005ff8:	1c10      	adds	r0, r2, #0
 8005ffa:	0052      	lsls	r2, r2, #1
 8005ffc:	e70c      	b.n	8005e18 <_malloc_r+0x330>
 8005ffe:	4808      	ldr	r0, [pc, #32]	; (8006020 <_malloc_r+0x538>)
 8006000:	4282      	cmp	r2, r0
 8006002:	d804      	bhi.n	800600e <_malloc_r+0x526>
 8006004:	0c8a      	lsrs	r2, r1, #18
 8006006:	327c      	adds	r2, #124	; 0x7c
 8006008:	1c10      	adds	r0, r2, #0
 800600a:	0052      	lsls	r2, r2, #1
 800600c:	e704      	b.n	8005e18 <_malloc_r+0x330>
 800600e:	22fc      	movs	r2, #252	; 0xfc
 8006010:	207e      	movs	r0, #126	; 0x7e
 8006012:	e701      	b.n	8005e18 <_malloc_r+0x330>
 8006014:	6873      	ldr	r3, [r6, #4]
 8006016:	e783      	b.n	8005f20 <_malloc_r+0x438>
 8006018:	4653      	mov	r3, sl
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	e60e      	b.n	8005c3c <_malloc_r+0x154>
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	00000554 	.word	0x00000554

08006024 <memcpy>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	2a0f      	cmp	r2, #15
 8006028:	d932      	bls.n	8006090 <memcpy+0x6c>
 800602a:	1c04      	adds	r4, r0, #0
 800602c:	430c      	orrs	r4, r1
 800602e:	1c0b      	adds	r3, r1, #0
 8006030:	07a4      	lsls	r4, r4, #30
 8006032:	d131      	bne.n	8006098 <memcpy+0x74>
 8006034:	1c15      	adds	r5, r2, #0
 8006036:	1c04      	adds	r4, r0, #0
 8006038:	3d10      	subs	r5, #16
 800603a:	092d      	lsrs	r5, r5, #4
 800603c:	3501      	adds	r5, #1
 800603e:	012d      	lsls	r5, r5, #4
 8006040:	1949      	adds	r1, r1, r5
 8006042:	681e      	ldr	r6, [r3, #0]
 8006044:	6026      	str	r6, [r4, #0]
 8006046:	685e      	ldr	r6, [r3, #4]
 8006048:	6066      	str	r6, [r4, #4]
 800604a:	689e      	ldr	r6, [r3, #8]
 800604c:	60a6      	str	r6, [r4, #8]
 800604e:	68de      	ldr	r6, [r3, #12]
 8006050:	3310      	adds	r3, #16
 8006052:	60e6      	str	r6, [r4, #12]
 8006054:	3410      	adds	r4, #16
 8006056:	4299      	cmp	r1, r3
 8006058:	d1f3      	bne.n	8006042 <memcpy+0x1e>
 800605a:	230f      	movs	r3, #15
 800605c:	1945      	adds	r5, r0, r5
 800605e:	4013      	ands	r3, r2
 8006060:	2b03      	cmp	r3, #3
 8006062:	d91b      	bls.n	800609c <memcpy+0x78>
 8006064:	1f1c      	subs	r4, r3, #4
 8006066:	2300      	movs	r3, #0
 8006068:	08a4      	lsrs	r4, r4, #2
 800606a:	3401      	adds	r4, #1
 800606c:	00a4      	lsls	r4, r4, #2
 800606e:	58ce      	ldr	r6, [r1, r3]
 8006070:	50ee      	str	r6, [r5, r3]
 8006072:	3304      	adds	r3, #4
 8006074:	42a3      	cmp	r3, r4
 8006076:	d1fa      	bne.n	800606e <memcpy+0x4a>
 8006078:	18ed      	adds	r5, r5, r3
 800607a:	18c9      	adds	r1, r1, r3
 800607c:	2303      	movs	r3, #3
 800607e:	401a      	ands	r2, r3
 8006080:	d005      	beq.n	800608e <memcpy+0x6a>
 8006082:	2300      	movs	r3, #0
 8006084:	5ccc      	ldrb	r4, [r1, r3]
 8006086:	54ec      	strb	r4, [r5, r3]
 8006088:	3301      	adds	r3, #1
 800608a:	4293      	cmp	r3, r2
 800608c:	d1fa      	bne.n	8006084 <memcpy+0x60>
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	1c05      	adds	r5, r0, #0
 8006092:	2a00      	cmp	r2, #0
 8006094:	d1f5      	bne.n	8006082 <memcpy+0x5e>
 8006096:	e7fa      	b.n	800608e <memcpy+0x6a>
 8006098:	1c05      	adds	r5, r0, #0
 800609a:	e7f2      	b.n	8006082 <memcpy+0x5e>
 800609c:	1c1a      	adds	r2, r3, #0
 800609e:	e7f8      	b.n	8006092 <memcpy+0x6e>

080060a0 <memset>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	0783      	lsls	r3, r0, #30
 80060a4:	d03f      	beq.n	8006126 <memset+0x86>
 80060a6:	1e54      	subs	r4, r2, #1
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d03b      	beq.n	8006124 <memset+0x84>
 80060ac:	b2ce      	uxtb	r6, r1
 80060ae:	1c03      	adds	r3, r0, #0
 80060b0:	2503      	movs	r5, #3
 80060b2:	e003      	b.n	80060bc <memset+0x1c>
 80060b4:	1e62      	subs	r2, r4, #1
 80060b6:	2c00      	cmp	r4, #0
 80060b8:	d034      	beq.n	8006124 <memset+0x84>
 80060ba:	1c14      	adds	r4, r2, #0
 80060bc:	3301      	adds	r3, #1
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	7016      	strb	r6, [r2, #0]
 80060c2:	422b      	tst	r3, r5
 80060c4:	d1f6      	bne.n	80060b4 <memset+0x14>
 80060c6:	2c03      	cmp	r4, #3
 80060c8:	d924      	bls.n	8006114 <memset+0x74>
 80060ca:	25ff      	movs	r5, #255	; 0xff
 80060cc:	400d      	ands	r5, r1
 80060ce:	022a      	lsls	r2, r5, #8
 80060d0:	4315      	orrs	r5, r2
 80060d2:	042a      	lsls	r2, r5, #16
 80060d4:	4315      	orrs	r5, r2
 80060d6:	2c0f      	cmp	r4, #15
 80060d8:	d911      	bls.n	80060fe <memset+0x5e>
 80060da:	1c26      	adds	r6, r4, #0
 80060dc:	3e10      	subs	r6, #16
 80060de:	0936      	lsrs	r6, r6, #4
 80060e0:	3601      	adds	r6, #1
 80060e2:	0136      	lsls	r6, r6, #4
 80060e4:	1c1a      	adds	r2, r3, #0
 80060e6:	199b      	adds	r3, r3, r6
 80060e8:	6015      	str	r5, [r2, #0]
 80060ea:	6055      	str	r5, [r2, #4]
 80060ec:	6095      	str	r5, [r2, #8]
 80060ee:	60d5      	str	r5, [r2, #12]
 80060f0:	3210      	adds	r2, #16
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d1f8      	bne.n	80060e8 <memset+0x48>
 80060f6:	220f      	movs	r2, #15
 80060f8:	4014      	ands	r4, r2
 80060fa:	2c03      	cmp	r4, #3
 80060fc:	d90a      	bls.n	8006114 <memset+0x74>
 80060fe:	1f26      	subs	r6, r4, #4
 8006100:	08b6      	lsrs	r6, r6, #2
 8006102:	3601      	adds	r6, #1
 8006104:	00b6      	lsls	r6, r6, #2
 8006106:	1c1a      	adds	r2, r3, #0
 8006108:	199b      	adds	r3, r3, r6
 800610a:	c220      	stmia	r2!, {r5}
 800610c:	4293      	cmp	r3, r2
 800610e:	d1fc      	bne.n	800610a <memset+0x6a>
 8006110:	2203      	movs	r2, #3
 8006112:	4014      	ands	r4, r2
 8006114:	2c00      	cmp	r4, #0
 8006116:	d005      	beq.n	8006124 <memset+0x84>
 8006118:	b2c9      	uxtb	r1, r1
 800611a:	191c      	adds	r4, r3, r4
 800611c:	7019      	strb	r1, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	42a3      	cmp	r3, r4
 8006122:	d1fb      	bne.n	800611c <memset+0x7c>
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	1c14      	adds	r4, r2, #0
 8006128:	1c03      	adds	r3, r0, #0
 800612a:	e7cc      	b.n	80060c6 <memset+0x26>

0800612c <__malloc_lock>:
 800612c:	4770      	bx	lr
 800612e:	46c0      	nop			; (mov r8, r8)

08006130 <__malloc_unlock>:
 8006130:	4770      	bx	lr
 8006132:	46c0      	nop			; (mov r8, r8)

08006134 <realloc>:
 8006134:	b508      	push	{r3, lr}
 8006136:	1c03      	adds	r3, r0, #0
 8006138:	1c0a      	adds	r2, r1, #0
 800613a:	4903      	ldr	r1, [pc, #12]	; (8006148 <realloc+0x14>)
 800613c:	6808      	ldr	r0, [r1, #0]
 800613e:	1c19      	adds	r1, r3, #0
 8006140:	f000 f804 	bl	800614c <_realloc_r>
 8006144:	bd08      	pop	{r3, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	20000460 	.word	0x20000460

0800614c <_realloc_r>:
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614e:	4656      	mov	r6, sl
 8006150:	464d      	mov	r5, r9
 8006152:	4644      	mov	r4, r8
 8006154:	465f      	mov	r7, fp
 8006156:	b4f0      	push	{r4, r5, r6, r7}
 8006158:	4680      	mov	r8, r0
 800615a:	b085      	sub	sp, #20
 800615c:	1e0e      	subs	r6, r1, #0
 800615e:	4691      	mov	r9, r2
 8006160:	d100      	bne.n	8006164 <_realloc_r+0x18>
 8006162:	e0fc      	b.n	800635e <_realloc_r+0x212>
 8006164:	1c37      	adds	r7, r6, #0
 8006166:	3f08      	subs	r7, #8
 8006168:	f7ff ffe0 	bl	800612c <__malloc_lock>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	464d      	mov	r5, r9
 8006170:	2203      	movs	r2, #3
 8006172:	1c1c      	adds	r4, r3, #0
 8006174:	350b      	adds	r5, #11
 8006176:	46ba      	mov	sl, r7
 8006178:	4394      	bics	r4, r2
 800617a:	2d16      	cmp	r5, #22
 800617c:	d900      	bls.n	8006180 <_realloc_r+0x34>
 800617e:	e074      	b.n	800626a <_realloc_r+0x11e>
 8006180:	2210      	movs	r2, #16
 8006182:	2510      	movs	r5, #16
 8006184:	45a9      	cmp	r9, r5
 8006186:	d900      	bls.n	800618a <_realloc_r+0x3e>
 8006188:	e074      	b.n	8006274 <_realloc_r+0x128>
 800618a:	4294      	cmp	r4, r2
 800618c:	da55      	bge.n	800623a <_realloc_r+0xee>
 800618e:	1939      	adds	r1, r7, r4
 8006190:	9101      	str	r1, [sp, #4]
 8006192:	49d5      	ldr	r1, [pc, #852]	; (80064e8 <_realloc_r+0x39c>)
 8006194:	6888      	ldr	r0, [r1, #8]
 8006196:	9901      	ldr	r1, [sp, #4]
 8006198:	4288      	cmp	r0, r1
 800619a:	d100      	bne.n	800619e <_realloc_r+0x52>
 800619c:	e0ea      	b.n	8006374 <_realloc_r+0x228>
 800619e:	6848      	ldr	r0, [r1, #4]
 80061a0:	2101      	movs	r1, #1
 80061a2:	9003      	str	r0, [sp, #12]
 80061a4:	9102      	str	r1, [sp, #8]
 80061a6:	1c01      	adds	r1, r0, #0
 80061a8:	2001      	movs	r0, #1
 80061aa:	4381      	bics	r1, r0
 80061ac:	468c      	mov	ip, r1
 80061ae:	9901      	ldr	r1, [sp, #4]
 80061b0:	468b      	mov	fp, r1
 80061b2:	44dc      	add	ip, fp
 80061b4:	4661      	mov	r1, ip
 80061b6:	6849      	ldr	r1, [r1, #4]
 80061b8:	4201      	tst	r1, r0
 80061ba:	d160      	bne.n	800627e <_realloc_r+0x132>
 80061bc:	2103      	movs	r1, #3
 80061be:	9803      	ldr	r0, [sp, #12]
 80061c0:	468c      	mov	ip, r1
 80061c2:	4388      	bics	r0, r1
 80061c4:	1900      	adds	r0, r0, r4
 80061c6:	4290      	cmp	r0, r2
 80061c8:	db00      	blt.n	80061cc <_realloc_r+0x80>
 80061ca:	e0cc      	b.n	8006366 <_realloc_r+0x21a>
 80061cc:	9902      	ldr	r1, [sp, #8]
 80061ce:	4219      	tst	r1, r3
 80061d0:	d000      	beq.n	80061d4 <_realloc_r+0x88>
 80061d2:	e09b      	b.n	800630c <_realloc_r+0x1c0>
 80061d4:	4661      	mov	r1, ip
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	1afb      	subs	r3, r7, r3
 80061da:	469b      	mov	fp, r3
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	438b      	bics	r3, r1
 80061e0:	18c1      	adds	r1, r0, r3
 80061e2:	9102      	str	r1, [sp, #8]
 80061e4:	4291      	cmp	r1, r2
 80061e6:	db55      	blt.n	8006294 <_realloc_r+0x148>
 80061e8:	9a01      	ldr	r2, [sp, #4]
 80061ea:	465f      	mov	r7, fp
 80061ec:	68d3      	ldr	r3, [r2, #12]
 80061ee:	6892      	ldr	r2, [r2, #8]
 80061f0:	3708      	adds	r7, #8
 80061f2:	60d3      	str	r3, [r2, #12]
 80061f4:	609a      	str	r2, [r3, #8]
 80061f6:	465b      	mov	r3, fp
 80061f8:	465a      	mov	r2, fp
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	6892      	ldr	r2, [r2, #8]
 80061fe:	60d3      	str	r3, [r2, #12]
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	1f22      	subs	r2, r4, #4
 8006204:	2a24      	cmp	r2, #36	; 0x24
 8006206:	d900      	bls.n	800620a <_realloc_r+0xbe>
 8006208:	e12e      	b.n	8006468 <_realloc_r+0x31c>
 800620a:	1c3b      	adds	r3, r7, #0
 800620c:	2a13      	cmp	r2, #19
 800620e:	d909      	bls.n	8006224 <_realloc_r+0xd8>
 8006210:	465b      	mov	r3, fp
 8006212:	6831      	ldr	r1, [r6, #0]
 8006214:	6099      	str	r1, [r3, #8]
 8006216:	6871      	ldr	r1, [r6, #4]
 8006218:	60d9      	str	r1, [r3, #12]
 800621a:	2a1b      	cmp	r2, #27
 800621c:	d900      	bls.n	8006220 <_realloc_r+0xd4>
 800621e:	e12d      	b.n	800647c <_realloc_r+0x330>
 8006220:	3310      	adds	r3, #16
 8006222:	3608      	adds	r6, #8
 8006224:	6832      	ldr	r2, [r6, #0]
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	6872      	ldr	r2, [r6, #4]
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	68b2      	ldr	r2, [r6, #8]
 800622e:	609a      	str	r2, [r3, #8]
 8006230:	465b      	mov	r3, fp
 8006232:	1c3e      	adds	r6, r7, #0
 8006234:	46da      	mov	sl, fp
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	9c02      	ldr	r4, [sp, #8]
 800623a:	1b62      	subs	r2, r4, r5
 800623c:	2a0f      	cmp	r2, #15
 800623e:	d852      	bhi.n	80062e6 <_realloc_r+0x19a>
 8006240:	2101      	movs	r1, #1
 8006242:	4652      	mov	r2, sl
 8006244:	400b      	ands	r3, r1
 8006246:	4323      	orrs	r3, r4
 8006248:	6053      	str	r3, [r2, #4]
 800624a:	1c22      	adds	r2, r4, #0
 800624c:	4452      	add	r2, sl
 800624e:	6853      	ldr	r3, [r2, #4]
 8006250:	4319      	orrs	r1, r3
 8006252:	6051      	str	r1, [r2, #4]
 8006254:	4640      	mov	r0, r8
 8006256:	f7ff ff6b 	bl	8006130 <__malloc_unlock>
 800625a:	1c30      	adds	r0, r6, #0
 800625c:	b005      	add	sp, #20
 800625e:	bc3c      	pop	{r2, r3, r4, r5}
 8006260:	4690      	mov	r8, r2
 8006262:	4699      	mov	r9, r3
 8006264:	46a2      	mov	sl, r4
 8006266:	46ab      	mov	fp, r5
 8006268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626a:	3204      	adds	r2, #4
 800626c:	4395      	bics	r5, r2
 800626e:	1e2a      	subs	r2, r5, #0
 8006270:	db00      	blt.n	8006274 <_realloc_r+0x128>
 8006272:	e787      	b.n	8006184 <_realloc_r+0x38>
 8006274:	230c      	movs	r3, #12
 8006276:	4642      	mov	r2, r8
 8006278:	2000      	movs	r0, #0
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	e7ee      	b.n	800625c <_realloc_r+0x110>
 800627e:	9902      	ldr	r1, [sp, #8]
 8006280:	4219      	tst	r1, r3
 8006282:	d143      	bne.n	800630c <_realloc_r+0x1c0>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	1afb      	subs	r3, r7, r3
 8006288:	469b      	mov	fp, r3
 800628a:	4659      	mov	r1, fp
 800628c:	2303      	movs	r3, #3
 800628e:	6849      	ldr	r1, [r1, #4]
 8006290:	4399      	bics	r1, r3
 8006292:	1c0b      	adds	r3, r1, #0
 8006294:	191b      	adds	r3, r3, r4
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	4293      	cmp	r3, r2
 800629a:	db37      	blt.n	800630c <_realloc_r+0x1c0>
 800629c:	465b      	mov	r3, fp
 800629e:	465a      	mov	r2, fp
 80062a0:	465f      	mov	r7, fp
 80062a2:	6892      	ldr	r2, [r2, #8]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	3708      	adds	r7, #8
 80062a8:	60d3      	str	r3, [r2, #12]
 80062aa:	609a      	str	r2, [r3, #8]
 80062ac:	1f22      	subs	r2, r4, #4
 80062ae:	2a24      	cmp	r2, #36	; 0x24
 80062b0:	d900      	bls.n	80062b4 <_realloc_r+0x168>
 80062b2:	e0de      	b.n	8006472 <_realloc_r+0x326>
 80062b4:	1c3b      	adds	r3, r7, #0
 80062b6:	2a13      	cmp	r2, #19
 80062b8:	d909      	bls.n	80062ce <_realloc_r+0x182>
 80062ba:	465b      	mov	r3, fp
 80062bc:	6831      	ldr	r1, [r6, #0]
 80062be:	6099      	str	r1, [r3, #8]
 80062c0:	6871      	ldr	r1, [r6, #4]
 80062c2:	60d9      	str	r1, [r3, #12]
 80062c4:	2a1b      	cmp	r2, #27
 80062c6:	d900      	bls.n	80062ca <_realloc_r+0x17e>
 80062c8:	e0ec      	b.n	80064a4 <_realloc_r+0x358>
 80062ca:	3310      	adds	r3, #16
 80062cc:	3608      	adds	r6, #8
 80062ce:	6832      	ldr	r2, [r6, #0]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	6872      	ldr	r2, [r6, #4]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	68b2      	ldr	r2, [r6, #8]
 80062d8:	609a      	str	r2, [r3, #8]
 80062da:	465b      	mov	r3, fp
 80062dc:	1c3e      	adds	r6, r7, #0
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	9c01      	ldr	r4, [sp, #4]
 80062e2:	46da      	mov	sl, fp
 80062e4:	e7a9      	b.n	800623a <_realloc_r+0xee>
 80062e6:	2001      	movs	r0, #1
 80062e8:	4651      	mov	r1, sl
 80062ea:	4003      	ands	r3, r0
 80062ec:	1949      	adds	r1, r1, r5
 80062ee:	431d      	orrs	r5, r3
 80062f0:	4653      	mov	r3, sl
 80062f2:	605d      	str	r5, [r3, #4]
 80062f4:	1c13      	adds	r3, r2, #0
 80062f6:	4303      	orrs	r3, r0
 80062f8:	188a      	adds	r2, r1, r2
 80062fa:	604b      	str	r3, [r1, #4]
 80062fc:	6853      	ldr	r3, [r2, #4]
 80062fe:	3108      	adds	r1, #8
 8006300:	4318      	orrs	r0, r3
 8006302:	6050      	str	r0, [r2, #4]
 8006304:	4640      	mov	r0, r8
 8006306:	f000 f96b 	bl	80065e0 <_free_r>
 800630a:	e7a3      	b.n	8006254 <_realloc_r+0x108>
 800630c:	4649      	mov	r1, r9
 800630e:	4640      	mov	r0, r8
 8006310:	f7ff fbea 	bl	8005ae8 <_malloc_r>
 8006314:	4681      	mov	r9, r0
 8006316:	2800      	cmp	r0, #0
 8006318:	d100      	bne.n	800631c <_realloc_r+0x1d0>
 800631a:	e0f1      	b.n	8006500 <_realloc_r+0x3b4>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1c01      	adds	r1, r0, #0
 8006320:	2201      	movs	r2, #1
 8006322:	1c18      	adds	r0, r3, #0
 8006324:	4390      	bics	r0, r2
 8006326:	3908      	subs	r1, #8
 8006328:	183f      	adds	r7, r7, r0
 800632a:	42b9      	cmp	r1, r7
 800632c:	d100      	bne.n	8006330 <_realloc_r+0x1e4>
 800632e:	e096      	b.n	800645e <_realloc_r+0x312>
 8006330:	1f22      	subs	r2, r4, #4
 8006332:	2a24      	cmp	r2, #36	; 0x24
 8006334:	d900      	bls.n	8006338 <_realloc_r+0x1ec>
 8006336:	e082      	b.n	800643e <_realloc_r+0x2f2>
 8006338:	464b      	mov	r3, r9
 800633a:	2a13      	cmp	r2, #19
 800633c:	d865      	bhi.n	800640a <_realloc_r+0x2be>
 800633e:	1c32      	adds	r2, r6, #0
 8006340:	6811      	ldr	r1, [r2, #0]
 8006342:	6019      	str	r1, [r3, #0]
 8006344:	6851      	ldr	r1, [r2, #4]
 8006346:	6059      	str	r1, [r3, #4]
 8006348:	6892      	ldr	r2, [r2, #8]
 800634a:	609a      	str	r2, [r3, #8]
 800634c:	4640      	mov	r0, r8
 800634e:	1c31      	adds	r1, r6, #0
 8006350:	f000 f946 	bl	80065e0 <_free_r>
 8006354:	4640      	mov	r0, r8
 8006356:	f7ff feeb 	bl	8006130 <__malloc_unlock>
 800635a:	4648      	mov	r0, r9
 800635c:	e77e      	b.n	800625c <_realloc_r+0x110>
 800635e:	1c11      	adds	r1, r2, #0
 8006360:	f7ff fbc2 	bl	8005ae8 <_malloc_r>
 8006364:	e77a      	b.n	800625c <_realloc_r+0x110>
 8006366:	9901      	ldr	r1, [sp, #4]
 8006368:	1c04      	adds	r4, r0, #0
 800636a:	68ca      	ldr	r2, [r1, #12]
 800636c:	6889      	ldr	r1, [r1, #8]
 800636e:	60ca      	str	r2, [r1, #12]
 8006370:	6091      	str	r1, [r2, #8]
 8006372:	e762      	b.n	800623a <_realloc_r+0xee>
 8006374:	6841      	ldr	r1, [r0, #4]
 8006376:	2003      	movs	r0, #3
 8006378:	4381      	bics	r1, r0
 800637a:	4684      	mov	ip, r0
 800637c:	1c28      	adds	r0, r5, #0
 800637e:	1909      	adds	r1, r1, r4
 8006380:	3010      	adds	r0, #16
 8006382:	9001      	str	r0, [sp, #4]
 8006384:	4281      	cmp	r1, r0
 8006386:	da4a      	bge.n	800641e <_realloc_r+0x2d2>
 8006388:	07db      	lsls	r3, r3, #31
 800638a:	d4bf      	bmi.n	800630c <_realloc_r+0x1c0>
 800638c:	4660      	mov	r0, ip
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	1afb      	subs	r3, r7, r3
 8006392:	469b      	mov	fp, r3
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4383      	bics	r3, r0
 8006398:	9801      	ldr	r0, [sp, #4]
 800639a:	18c9      	adds	r1, r1, r3
 800639c:	9102      	str	r1, [sp, #8]
 800639e:	4288      	cmp	r0, r1
 80063a0:	dd00      	ble.n	80063a4 <_realloc_r+0x258>
 80063a2:	e777      	b.n	8006294 <_realloc_r+0x148>
 80063a4:	465b      	mov	r3, fp
 80063a6:	465a      	mov	r2, fp
 80063a8:	465f      	mov	r7, fp
 80063aa:	6892      	ldr	r2, [r2, #8]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	3708      	adds	r7, #8
 80063b0:	60d3      	str	r3, [r2, #12]
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	1f22      	subs	r2, r4, #4
 80063b6:	2a24      	cmp	r2, #36	; 0x24
 80063b8:	d900      	bls.n	80063bc <_realloc_r+0x270>
 80063ba:	e08f      	b.n	80064dc <_realloc_r+0x390>
 80063bc:	1c3b      	adds	r3, r7, #0
 80063be:	2a13      	cmp	r2, #19
 80063c0:	d909      	bls.n	80063d6 <_realloc_r+0x28a>
 80063c2:	465b      	mov	r3, fp
 80063c4:	6831      	ldr	r1, [r6, #0]
 80063c6:	6099      	str	r1, [r3, #8]
 80063c8:	6871      	ldr	r1, [r6, #4]
 80063ca:	60d9      	str	r1, [r3, #12]
 80063cc:	2a1b      	cmp	r2, #27
 80063ce:	d900      	bls.n	80063d2 <_realloc_r+0x286>
 80063d0:	e08c      	b.n	80064ec <_realloc_r+0x3a0>
 80063d2:	3310      	adds	r3, #16
 80063d4:	3608      	adds	r6, #8
 80063d6:	6832      	ldr	r2, [r6, #0]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	6872      	ldr	r2, [r6, #4]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	68b2      	ldr	r2, [r6, #8]
 80063e0:	609a      	str	r2, [r3, #8]
 80063e2:	465b      	mov	r3, fp
 80063e4:	1959      	adds	r1, r3, r5
 80063e6:	4b40      	ldr	r3, [pc, #256]	; (80064e8 <_realloc_r+0x39c>)
 80063e8:	4640      	mov	r0, r8
 80063ea:	6099      	str	r1, [r3, #8]
 80063ec:	9b02      	ldr	r3, [sp, #8]
 80063ee:	1b5a      	subs	r2, r3, r5
 80063f0:	2301      	movs	r3, #1
 80063f2:	431a      	orrs	r2, r3
 80063f4:	604a      	str	r2, [r1, #4]
 80063f6:	465a      	mov	r2, fp
 80063f8:	6852      	ldr	r2, [r2, #4]
 80063fa:	4013      	ands	r3, r2
 80063fc:	431d      	orrs	r5, r3
 80063fe:	465b      	mov	r3, fp
 8006400:	605d      	str	r5, [r3, #4]
 8006402:	f7ff fe95 	bl	8006130 <__malloc_unlock>
 8006406:	1c38      	adds	r0, r7, #0
 8006408:	e728      	b.n	800625c <_realloc_r+0x110>
 800640a:	6831      	ldr	r1, [r6, #0]
 800640c:	6019      	str	r1, [r3, #0]
 800640e:	6871      	ldr	r1, [r6, #4]
 8006410:	6059      	str	r1, [r3, #4]
 8006412:	2a1b      	cmp	r2, #27
 8006414:	d818      	bhi.n	8006448 <_realloc_r+0x2fc>
 8006416:	1c32      	adds	r2, r6, #0
 8006418:	3308      	adds	r3, #8
 800641a:	3208      	adds	r2, #8
 800641c:	e790      	b.n	8006340 <_realloc_r+0x1f4>
 800641e:	4b32      	ldr	r3, [pc, #200]	; (80064e8 <_realloc_r+0x39c>)
 8006420:	197a      	adds	r2, r7, r5
 8006422:	609a      	str	r2, [r3, #8]
 8006424:	2301      	movs	r3, #1
 8006426:	1b49      	subs	r1, r1, r5
 8006428:	4319      	orrs	r1, r3
 800642a:	6051      	str	r1, [r2, #4]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4640      	mov	r0, r8
 8006430:	4013      	ands	r3, r2
 8006432:	431d      	orrs	r5, r3
 8006434:	607d      	str	r5, [r7, #4]
 8006436:	f7ff fe7b 	bl	8006130 <__malloc_unlock>
 800643a:	1c30      	adds	r0, r6, #0
 800643c:	e70e      	b.n	800625c <_realloc_r+0x110>
 800643e:	4648      	mov	r0, r9
 8006440:	1c31      	adds	r1, r6, #0
 8006442:	f000 f9a5 	bl	8006790 <memmove>
 8006446:	e781      	b.n	800634c <_realloc_r+0x200>
 8006448:	464b      	mov	r3, r9
 800644a:	68b1      	ldr	r1, [r6, #8]
 800644c:	6099      	str	r1, [r3, #8]
 800644e:	68f1      	ldr	r1, [r6, #12]
 8006450:	60d9      	str	r1, [r3, #12]
 8006452:	2a24      	cmp	r2, #36	; 0x24
 8006454:	d01c      	beq.n	8006490 <_realloc_r+0x344>
 8006456:	1c32      	adds	r2, r6, #0
 8006458:	3310      	adds	r3, #16
 800645a:	3210      	adds	r2, #16
 800645c:	e770      	b.n	8006340 <_realloc_r+0x1f4>
 800645e:	684a      	ldr	r2, [r1, #4]
 8006460:	2103      	movs	r1, #3
 8006462:	438a      	bics	r2, r1
 8006464:	18a4      	adds	r4, r4, r2
 8006466:	e6e8      	b.n	800623a <_realloc_r+0xee>
 8006468:	1c38      	adds	r0, r7, #0
 800646a:	1c31      	adds	r1, r6, #0
 800646c:	f000 f990 	bl	8006790 <memmove>
 8006470:	e6de      	b.n	8006230 <_realloc_r+0xe4>
 8006472:	1c38      	adds	r0, r7, #0
 8006474:	1c31      	adds	r1, r6, #0
 8006476:	f000 f98b 	bl	8006790 <memmove>
 800647a:	e72e      	b.n	80062da <_realloc_r+0x18e>
 800647c:	465b      	mov	r3, fp
 800647e:	68b1      	ldr	r1, [r6, #8]
 8006480:	6119      	str	r1, [r3, #16]
 8006482:	68f1      	ldr	r1, [r6, #12]
 8006484:	6159      	str	r1, [r3, #20]
 8006486:	2a24      	cmp	r2, #36	; 0x24
 8006488:	d016      	beq.n	80064b8 <_realloc_r+0x36c>
 800648a:	3318      	adds	r3, #24
 800648c:	3610      	adds	r6, #16
 800648e:	e6c9      	b.n	8006224 <_realloc_r+0xd8>
 8006490:	464b      	mov	r3, r9
 8006492:	6932      	ldr	r2, [r6, #16]
 8006494:	4649      	mov	r1, r9
 8006496:	611a      	str	r2, [r3, #16]
 8006498:	1c32      	adds	r2, r6, #0
 800649a:	6970      	ldr	r0, [r6, #20]
 800649c:	3318      	adds	r3, #24
 800649e:	3218      	adds	r2, #24
 80064a0:	6148      	str	r0, [r1, #20]
 80064a2:	e74d      	b.n	8006340 <_realloc_r+0x1f4>
 80064a4:	465b      	mov	r3, fp
 80064a6:	68b1      	ldr	r1, [r6, #8]
 80064a8:	6119      	str	r1, [r3, #16]
 80064aa:	68f1      	ldr	r1, [r6, #12]
 80064ac:	6159      	str	r1, [r3, #20]
 80064ae:	2a24      	cmp	r2, #36	; 0x24
 80064b0:	d00b      	beq.n	80064ca <_realloc_r+0x37e>
 80064b2:	3318      	adds	r3, #24
 80064b4:	3610      	adds	r6, #16
 80064b6:	e70a      	b.n	80062ce <_realloc_r+0x182>
 80064b8:	465b      	mov	r3, fp
 80064ba:	6932      	ldr	r2, [r6, #16]
 80064bc:	619a      	str	r2, [r3, #24]
 80064be:	465a      	mov	r2, fp
 80064c0:	6971      	ldr	r1, [r6, #20]
 80064c2:	3320      	adds	r3, #32
 80064c4:	61d1      	str	r1, [r2, #28]
 80064c6:	3618      	adds	r6, #24
 80064c8:	e6ac      	b.n	8006224 <_realloc_r+0xd8>
 80064ca:	465b      	mov	r3, fp
 80064cc:	6932      	ldr	r2, [r6, #16]
 80064ce:	619a      	str	r2, [r3, #24]
 80064d0:	465a      	mov	r2, fp
 80064d2:	6971      	ldr	r1, [r6, #20]
 80064d4:	3320      	adds	r3, #32
 80064d6:	61d1      	str	r1, [r2, #28]
 80064d8:	3618      	adds	r6, #24
 80064da:	e6f8      	b.n	80062ce <_realloc_r+0x182>
 80064dc:	1c38      	adds	r0, r7, #0
 80064de:	1c31      	adds	r1, r6, #0
 80064e0:	f000 f956 	bl	8006790 <memmove>
 80064e4:	e77d      	b.n	80063e2 <_realloc_r+0x296>
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	20000464 	.word	0x20000464
 80064ec:	465b      	mov	r3, fp
 80064ee:	68b1      	ldr	r1, [r6, #8]
 80064f0:	6119      	str	r1, [r3, #16]
 80064f2:	68f1      	ldr	r1, [r6, #12]
 80064f4:	6159      	str	r1, [r3, #20]
 80064f6:	2a24      	cmp	r2, #36	; 0x24
 80064f8:	d007      	beq.n	800650a <_realloc_r+0x3be>
 80064fa:	3318      	adds	r3, #24
 80064fc:	3610      	adds	r6, #16
 80064fe:	e76a      	b.n	80063d6 <_realloc_r+0x28a>
 8006500:	4640      	mov	r0, r8
 8006502:	f7ff fe15 	bl	8006130 <__malloc_unlock>
 8006506:	2000      	movs	r0, #0
 8006508:	e6a8      	b.n	800625c <_realloc_r+0x110>
 800650a:	465b      	mov	r3, fp
 800650c:	6932      	ldr	r2, [r6, #16]
 800650e:	619a      	str	r2, [r3, #24]
 8006510:	465a      	mov	r2, fp
 8006512:	6971      	ldr	r1, [r6, #20]
 8006514:	3320      	adds	r3, #32
 8006516:	61d1      	str	r1, [r2, #28]
 8006518:	3618      	adds	r6, #24
 800651a:	e75c      	b.n	80063d6 <_realloc_r+0x28a>

0800651c <_sbrk_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	2300      	movs	r3, #0
 8006520:	4c06      	ldr	r4, [pc, #24]	; (800653c <_sbrk_r+0x20>)
 8006522:	1c05      	adds	r5, r0, #0
 8006524:	1c08      	adds	r0, r1, #0
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	f000 f97e 	bl	8006828 <_sbrk>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d000      	beq.n	8006532 <_sbrk_r+0x16>
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0fb      	beq.n	8006530 <_sbrk_r+0x14>
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	e7f9      	b.n	8006530 <_sbrk_r+0x14>
 800653c:	2000099c 	.word	0x2000099c

08006540 <_malloc_trim_r>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	1c0c      	adds	r4, r1, #0
 8006544:	1c06      	adds	r6, r0, #0
 8006546:	f7ff fdf1 	bl	800612c <__malloc_lock>
 800654a:	4f20      	ldr	r7, [pc, #128]	; (80065cc <_malloc_trim_r+0x8c>)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	685d      	ldr	r5, [r3, #4]
 8006550:	2303      	movs	r3, #3
 8006552:	439d      	bics	r5, r3
 8006554:	4b1e      	ldr	r3, [pc, #120]	; (80065d0 <_malloc_trim_r+0x90>)
 8006556:	1b2c      	subs	r4, r5, r4
 8006558:	469c      	mov	ip, r3
 800655a:	4464      	add	r4, ip
 800655c:	0b24      	lsrs	r4, r4, #12
 800655e:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <_malloc_trim_r+0x94>)
 8006560:	3c01      	subs	r4, #1
 8006562:	0324      	lsls	r4, r4, #12
 8006564:	429c      	cmp	r4, r3
 8006566:	dd07      	ble.n	8006578 <_malloc_trim_r+0x38>
 8006568:	1c30      	adds	r0, r6, #0
 800656a:	2100      	movs	r1, #0
 800656c:	f7ff ffd6 	bl	800651c <_sbrk_r>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	195b      	adds	r3, r3, r5
 8006574:	4298      	cmp	r0, r3
 8006576:	d004      	beq.n	8006582 <_malloc_trim_r+0x42>
 8006578:	1c30      	adds	r0, r6, #0
 800657a:	f7ff fdd9 	bl	8006130 <__malloc_unlock>
 800657e:	2000      	movs	r0, #0
 8006580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006582:	4261      	negs	r1, r4
 8006584:	1c30      	adds	r0, r6, #0
 8006586:	f7ff ffc9 	bl	800651c <_sbrk_r>
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	d00d      	beq.n	80065aa <_malloc_trim_r+0x6a>
 800658e:	2301      	movs	r3, #1
 8006590:	1b2d      	subs	r5, r5, r4
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	431d      	orrs	r5, r3
 8006596:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <_malloc_trim_r+0x98>)
 8006598:	6055      	str	r5, [r2, #4]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	1c30      	adds	r0, r6, #0
 800659e:	1b14      	subs	r4, r2, r4
 80065a0:	601c      	str	r4, [r3, #0]
 80065a2:	f7ff fdc5 	bl	8006130 <__malloc_unlock>
 80065a6:	2001      	movs	r0, #1
 80065a8:	e7ea      	b.n	8006580 <_malloc_trim_r+0x40>
 80065aa:	1c30      	adds	r0, r6, #0
 80065ac:	2100      	movs	r1, #0
 80065ae:	f7ff ffb5 	bl	800651c <_sbrk_r>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	1ac2      	subs	r2, r0, r3
 80065b6:	2a0f      	cmp	r2, #15
 80065b8:	ddde      	ble.n	8006578 <_malloc_trim_r+0x38>
 80065ba:	4908      	ldr	r1, [pc, #32]	; (80065dc <_malloc_trim_r+0x9c>)
 80065bc:	6809      	ldr	r1, [r1, #0]
 80065be:	1a40      	subs	r0, r0, r1
 80065c0:	4905      	ldr	r1, [pc, #20]	; (80065d8 <_malloc_trim_r+0x98>)
 80065c2:	6008      	str	r0, [r1, #0]
 80065c4:	2101      	movs	r1, #1
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	e7d5      	b.n	8006578 <_malloc_trim_r+0x38>
 80065cc:	20000464 	.word	0x20000464
 80065d0:	00000fef 	.word	0x00000fef
 80065d4:	00000fff 	.word	0x00000fff
 80065d8:	20000964 	.word	0x20000964
 80065dc:	20000870 	.word	0x20000870

080065e0 <_free_r>:
 80065e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e2:	4647      	mov	r7, r8
 80065e4:	b480      	push	{r7}
 80065e6:	2900      	cmp	r1, #0
 80065e8:	d049      	beq.n	800667e <_free_r+0x9e>
 80065ea:	1c0c      	adds	r4, r1, #0
 80065ec:	1c05      	adds	r5, r0, #0
 80065ee:	f7ff fd9d 	bl	800612c <__malloc_lock>
 80065f2:	1c21      	adds	r1, r4, #0
 80065f4:	3908      	subs	r1, #8
 80065f6:	684f      	ldr	r7, [r1, #4]
 80065f8:	2301      	movs	r3, #1
 80065fa:	1c3c      	adds	r4, r7, #0
 80065fc:	439c      	bics	r4, r3
 80065fe:	190a      	adds	r2, r1, r4
 8006600:	6850      	ldr	r0, [r2, #4]
 8006602:	4698      	mov	r8, r3
 8006604:	3302      	adds	r3, #2
 8006606:	4398      	bics	r0, r3
 8006608:	1c03      	adds	r3, r0, #0
 800660a:	485b      	ldr	r0, [pc, #364]	; (8006778 <_free_r+0x198>)
 800660c:	6886      	ldr	r6, [r0, #8]
 800660e:	4296      	cmp	r6, r2
 8006610:	d052      	beq.n	80066b8 <_free_r+0xd8>
 8006612:	4646      	mov	r6, r8
 8006614:	6053      	str	r3, [r2, #4]
 8006616:	423e      	tst	r6, r7
 8006618:	d10b      	bne.n	8006632 <_free_r+0x52>
 800661a:	2608      	movs	r6, #8
 800661c:	46b4      	mov	ip, r6
 800661e:	680f      	ldr	r7, [r1, #0]
 8006620:	4484      	add	ip, r0
 8006622:	1bc9      	subs	r1, r1, r7
 8006624:	19e4      	adds	r4, r4, r7
 8006626:	688f      	ldr	r7, [r1, #8]
 8006628:	4567      	cmp	r7, ip
 800662a:	d05e      	beq.n	80066ea <_free_r+0x10a>
 800662c:	68ce      	ldr	r6, [r1, #12]
 800662e:	60fe      	str	r6, [r7, #12]
 8006630:	60b7      	str	r7, [r6, #8]
 8006632:	2701      	movs	r7, #1
 8006634:	18d6      	adds	r6, r2, r3
 8006636:	6876      	ldr	r6, [r6, #4]
 8006638:	423e      	tst	r6, r7
 800663a:	d108      	bne.n	800664e <_free_r+0x6e>
 800663c:	18e4      	adds	r4, r4, r3
 800663e:	4e4f      	ldr	r6, [pc, #316]	; (800677c <_free_r+0x19c>)
 8006640:	6893      	ldr	r3, [r2, #8]
 8006642:	42b3      	cmp	r3, r6
 8006644:	d100      	bne.n	8006648 <_free_r+0x68>
 8006646:	e073      	b.n	8006730 <_free_r+0x150>
 8006648:	68d2      	ldr	r2, [r2, #12]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	6093      	str	r3, [r2, #8]
 800664e:	4b4c      	ldr	r3, [pc, #304]	; (8006780 <_free_r+0x1a0>)
 8006650:	4327      	orrs	r7, r4
 8006652:	604f      	str	r7, [r1, #4]
 8006654:	510c      	str	r4, [r1, r4]
 8006656:	429c      	cmp	r4, r3
 8006658:	d814      	bhi.n	8006684 <_free_r+0xa4>
 800665a:	08e4      	lsrs	r4, r4, #3
 800665c:	3bff      	subs	r3, #255	; 0xff
 800665e:	10a2      	asrs	r2, r4, #2
 8006660:	3bff      	subs	r3, #255	; 0xff
 8006662:	4093      	lsls	r3, r2
 8006664:	6842      	ldr	r2, [r0, #4]
 8006666:	00e4      	lsls	r4, r4, #3
 8006668:	4313      	orrs	r3, r2
 800666a:	6043      	str	r3, [r0, #4]
 800666c:	1900      	adds	r0, r0, r4
 800666e:	6883      	ldr	r3, [r0, #8]
 8006670:	60c8      	str	r0, [r1, #12]
 8006672:	608b      	str	r3, [r1, #8]
 8006674:	6081      	str	r1, [r0, #8]
 8006676:	60d9      	str	r1, [r3, #12]
 8006678:	1c28      	adds	r0, r5, #0
 800667a:	f7ff fd59 	bl	8006130 <__malloc_unlock>
 800667e:	bc04      	pop	{r2}
 8006680:	4690      	mov	r8, r2
 8006682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006684:	0a63      	lsrs	r3, r4, #9
 8006686:	2b04      	cmp	r3, #4
 8006688:	d843      	bhi.n	8006712 <_free_r+0x132>
 800668a:	09a3      	lsrs	r3, r4, #6
 800668c:	3338      	adds	r3, #56	; 0x38
 800668e:	1c1a      	adds	r2, r3, #0
 8006690:	005e      	lsls	r6, r3, #1
 8006692:	00b6      	lsls	r6, r6, #2
 8006694:	1986      	adds	r6, r0, r6
 8006696:	68b3      	ldr	r3, [r6, #8]
 8006698:	2703      	movs	r7, #3
 800669a:	42b3      	cmp	r3, r6
 800669c:	d03f      	beq.n	800671e <_free_r+0x13e>
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	43ba      	bics	r2, r7
 80066a2:	42a2      	cmp	r2, r4
 80066a4:	d902      	bls.n	80066ac <_free_r+0xcc>
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	429e      	cmp	r6, r3
 80066aa:	d1f8      	bne.n	800669e <_free_r+0xbe>
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	60ca      	str	r2, [r1, #12]
 80066b0:	608b      	str	r3, [r1, #8]
 80066b2:	6091      	str	r1, [r2, #8]
 80066b4:	60d9      	str	r1, [r3, #12]
 80066b6:	e7df      	b.n	8006678 <_free_r+0x98>
 80066b8:	191c      	adds	r4, r3, r4
 80066ba:	4643      	mov	r3, r8
 80066bc:	423b      	tst	r3, r7
 80066be:	d106      	bne.n	80066ce <_free_r+0xee>
 80066c0:	680b      	ldr	r3, [r1, #0]
 80066c2:	1ac9      	subs	r1, r1, r3
 80066c4:	688a      	ldr	r2, [r1, #8]
 80066c6:	18e4      	adds	r4, r4, r3
 80066c8:	68cb      	ldr	r3, [r1, #12]
 80066ca:	60d3      	str	r3, [r2, #12]
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	2201      	movs	r2, #1
 80066d0:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <_free_r+0x1a4>)
 80066d2:	4322      	orrs	r2, r4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	604a      	str	r2, [r1, #4]
 80066d8:	6081      	str	r1, [r0, #8]
 80066da:	429c      	cmp	r4, r3
 80066dc:	d3cc      	bcc.n	8006678 <_free_r+0x98>
 80066de:	4b2a      	ldr	r3, [pc, #168]	; (8006788 <_free_r+0x1a8>)
 80066e0:	1c28      	adds	r0, r5, #0
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	f7ff ff2c 	bl	8006540 <_malloc_trim_r>
 80066e8:	e7c6      	b.n	8006678 <_free_r+0x98>
 80066ea:	4646      	mov	r6, r8
 80066ec:	18d0      	adds	r0, r2, r3
 80066ee:	6840      	ldr	r0, [r0, #4]
 80066f0:	4230      	tst	r0, r6
 80066f2:	d109      	bne.n	8006708 <_free_r+0x128>
 80066f4:	4646      	mov	r6, r8
 80066f6:	18e4      	adds	r4, r4, r3
 80066f8:	68d3      	ldr	r3, [r2, #12]
 80066fa:	6892      	ldr	r2, [r2, #8]
 80066fc:	4326      	orrs	r6, r4
 80066fe:	60d3      	str	r3, [r2, #12]
 8006700:	609a      	str	r2, [r3, #8]
 8006702:	604e      	str	r6, [r1, #4]
 8006704:	510c      	str	r4, [r1, r4]
 8006706:	e7b7      	b.n	8006678 <_free_r+0x98>
 8006708:	4646      	mov	r6, r8
 800670a:	4326      	orrs	r6, r4
 800670c:	604e      	str	r6, [r1, #4]
 800670e:	510c      	str	r4, [r1, r4]
 8006710:	e7b2      	b.n	8006678 <_free_r+0x98>
 8006712:	2b14      	cmp	r3, #20
 8006714:	d814      	bhi.n	8006740 <_free_r+0x160>
 8006716:	335b      	adds	r3, #91	; 0x5b
 8006718:	1c1a      	adds	r2, r3, #0
 800671a:	005e      	lsls	r6, r3, #1
 800671c:	e7b9      	b.n	8006692 <_free_r+0xb2>
 800671e:	2401      	movs	r4, #1
 8006720:	1092      	asrs	r2, r2, #2
 8006722:	4094      	lsls	r4, r2
 8006724:	1c22      	adds	r2, r4, #0
 8006726:	6844      	ldr	r4, [r0, #4]
 8006728:	4322      	orrs	r2, r4
 800672a:	6042      	str	r2, [r0, #4]
 800672c:	1c1a      	adds	r2, r3, #0
 800672e:	e7be      	b.n	80066ae <_free_r+0xce>
 8006730:	4327      	orrs	r7, r4
 8006732:	60d9      	str	r1, [r3, #12]
 8006734:	6099      	str	r1, [r3, #8]
 8006736:	60cb      	str	r3, [r1, #12]
 8006738:	608b      	str	r3, [r1, #8]
 800673a:	604f      	str	r7, [r1, #4]
 800673c:	510c      	str	r4, [r1, r4]
 800673e:	e79b      	b.n	8006678 <_free_r+0x98>
 8006740:	2b54      	cmp	r3, #84	; 0x54
 8006742:	d804      	bhi.n	800674e <_free_r+0x16e>
 8006744:	0b23      	lsrs	r3, r4, #12
 8006746:	336e      	adds	r3, #110	; 0x6e
 8006748:	1c1a      	adds	r2, r3, #0
 800674a:	005e      	lsls	r6, r3, #1
 800674c:	e7a1      	b.n	8006692 <_free_r+0xb2>
 800674e:	22aa      	movs	r2, #170	; 0xaa
 8006750:	0052      	lsls	r2, r2, #1
 8006752:	4293      	cmp	r3, r2
 8006754:	d804      	bhi.n	8006760 <_free_r+0x180>
 8006756:	0be3      	lsrs	r3, r4, #15
 8006758:	3377      	adds	r3, #119	; 0x77
 800675a:	1c1a      	adds	r2, r3, #0
 800675c:	005e      	lsls	r6, r3, #1
 800675e:	e798      	b.n	8006692 <_free_r+0xb2>
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <_free_r+0x1ac>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d804      	bhi.n	8006770 <_free_r+0x190>
 8006766:	0ca3      	lsrs	r3, r4, #18
 8006768:	337c      	adds	r3, #124	; 0x7c
 800676a:	1c1a      	adds	r2, r3, #0
 800676c:	005e      	lsls	r6, r3, #1
 800676e:	e790      	b.n	8006692 <_free_r+0xb2>
 8006770:	26fc      	movs	r6, #252	; 0xfc
 8006772:	227e      	movs	r2, #126	; 0x7e
 8006774:	e78d      	b.n	8006692 <_free_r+0xb2>
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	20000464 	.word	0x20000464
 800677c:	2000046c 	.word	0x2000046c
 8006780:	000001ff 	.word	0x000001ff
 8006784:	2000086c 	.word	0x2000086c
 8006788:	20000960 	.word	0x20000960
 800678c:	00000554 	.word	0x00000554

08006790 <memmove>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4288      	cmp	r0, r1
 8006794:	d90b      	bls.n	80067ae <memmove+0x1e>
 8006796:	188b      	adds	r3, r1, r2
 8006798:	4298      	cmp	r0, r3
 800679a:	d208      	bcs.n	80067ae <memmove+0x1e>
 800679c:	1a99      	subs	r1, r3, r2
 800679e:	1e53      	subs	r3, r2, #1
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d003      	beq.n	80067ac <memmove+0x1c>
 80067a4:	5cca      	ldrb	r2, [r1, r3]
 80067a6:	54c2      	strb	r2, [r0, r3]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	d2fb      	bcs.n	80067a4 <memmove+0x14>
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	2a0f      	cmp	r2, #15
 80067b0:	d809      	bhi.n	80067c6 <memmove+0x36>
 80067b2:	1c05      	adds	r5, r0, #0
 80067b4:	2a00      	cmp	r2, #0
 80067b6:	d0f9      	beq.n	80067ac <memmove+0x1c>
 80067b8:	2300      	movs	r3, #0
 80067ba:	5ccc      	ldrb	r4, [r1, r3]
 80067bc:	54ec      	strb	r4, [r5, r3]
 80067be:	3301      	adds	r3, #1
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d1fa      	bne.n	80067ba <memmove+0x2a>
 80067c4:	e7f2      	b.n	80067ac <memmove+0x1c>
 80067c6:	1c04      	adds	r4, r0, #0
 80067c8:	430c      	orrs	r4, r1
 80067ca:	1c0b      	adds	r3, r1, #0
 80067cc:	07a4      	lsls	r4, r4, #30
 80067ce:	d126      	bne.n	800681e <memmove+0x8e>
 80067d0:	1c15      	adds	r5, r2, #0
 80067d2:	1c04      	adds	r4, r0, #0
 80067d4:	3d10      	subs	r5, #16
 80067d6:	092d      	lsrs	r5, r5, #4
 80067d8:	3501      	adds	r5, #1
 80067da:	012d      	lsls	r5, r5, #4
 80067dc:	1949      	adds	r1, r1, r5
 80067de:	681e      	ldr	r6, [r3, #0]
 80067e0:	6026      	str	r6, [r4, #0]
 80067e2:	685e      	ldr	r6, [r3, #4]
 80067e4:	6066      	str	r6, [r4, #4]
 80067e6:	689e      	ldr	r6, [r3, #8]
 80067e8:	60a6      	str	r6, [r4, #8]
 80067ea:	68de      	ldr	r6, [r3, #12]
 80067ec:	3310      	adds	r3, #16
 80067ee:	60e6      	str	r6, [r4, #12]
 80067f0:	3410      	adds	r4, #16
 80067f2:	4299      	cmp	r1, r3
 80067f4:	d1f3      	bne.n	80067de <memmove+0x4e>
 80067f6:	240f      	movs	r4, #15
 80067f8:	1945      	adds	r5, r0, r5
 80067fa:	4014      	ands	r4, r2
 80067fc:	2c03      	cmp	r4, #3
 80067fe:	d910      	bls.n	8006822 <memmove+0x92>
 8006800:	2300      	movs	r3, #0
 8006802:	3c04      	subs	r4, #4
 8006804:	08a4      	lsrs	r4, r4, #2
 8006806:	3401      	adds	r4, #1
 8006808:	00a4      	lsls	r4, r4, #2
 800680a:	58ce      	ldr	r6, [r1, r3]
 800680c:	50ee      	str	r6, [r5, r3]
 800680e:	3304      	adds	r3, #4
 8006810:	42a3      	cmp	r3, r4
 8006812:	d1fa      	bne.n	800680a <memmove+0x7a>
 8006814:	2403      	movs	r4, #3
 8006816:	18ed      	adds	r5, r5, r3
 8006818:	18c9      	adds	r1, r1, r3
 800681a:	4022      	ands	r2, r4
 800681c:	e7ca      	b.n	80067b4 <memmove+0x24>
 800681e:	1c05      	adds	r5, r0, #0
 8006820:	e7ca      	b.n	80067b8 <memmove+0x28>
 8006822:	1c22      	adds	r2, r4, #0
 8006824:	e7c6      	b.n	80067b4 <memmove+0x24>
 8006826:	46c0      	nop			; (mov r8, r8)

08006828 <_sbrk>:
 8006828:	4a04      	ldr	r2, [pc, #16]	; (800683c <_sbrk+0x14>)
 800682a:	6813      	ldr	r3, [r2, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <_sbrk+0x10>
 8006830:	1818      	adds	r0, r3, r0
 8006832:	6010      	str	r0, [r2, #0]
 8006834:	1c18      	adds	r0, r3, #0
 8006836:	4770      	bx	lr
 8006838:	4b01      	ldr	r3, [pc, #4]	; (8006840 <_sbrk+0x18>)
 800683a:	e7f9      	b.n	8006830 <_sbrk+0x8>
 800683c:	2000098c 	.word	0x2000098c
 8006840:	200009a0 	.word	0x200009a0
 8006844:	65537a4f 	.word	0x65537a4f
 8006848:	6e6f4363 	.word	0x6e6f4363
 800684c:	31303220 	.word	0x31303220
 8006850:	00000038 	.word	0x00000038
 8006854:	08002462 	.word	0x08002462
 8006858:	08002466 	.word	0x08002466
 800685c:	08002470 	.word	0x08002470
 8006860:	08002454 	.word	0x08002454
 8006864:	08002474 	.word	0x08002474
 8006868:	08002478 	.word	0x08002478
 800686c:	0800245a 	.word	0x0800245a
 8006870:	0800247c 	.word	0x0800247c

08006874 <blks.6091>:
 8006874:	00060002 000a0001 000b0003 00010004     ................
 8006884:	00060006 00060001 00000008 000c0001     ................
 8006894:	00000009 00010006 000b0009 00010006     ................
 80068a4:	0006000e 00050001 0006000c 00010002     ................
 80068b4:	00000010 000c0001 00000011 00010006     ................
 80068c4:	00060011 00010003 00060016 00010007     ................
 80068d4:	00000018 00060001 00070016 00050001     ................
 80068e4:	0000001c 00060001 0007001a 00050001     ................

080068f4 <mf_bwfont_DejaVuSans12>:
 80068f4:	080074e4 080074f8 0d030d0d 020e0a01     .t...t..........
 8006904:	0000003f 080034c9 08003315 00010004     ?....4...3......
 8006914:	08006920                                 i..

08006918 <mf_bwfont_DejaVuSans12_listentry>:
 8006918:	00000000 080068f4                       .....h..

08006920 <mf_bwfont_DejaVuSans12_char_ranges>:
 8006920:	005f0020 0d020000 00000000 08006938      ._.........8i..
 8006930:	08006998 08006a58                       .i..Xj..

08006938 <mf_bwfont_DejaVuSans12_glyph_widths_0>:
 8006938:	0a050504 030a0b08 0a060505 04040404     ................
 8006948:	08080808 08080808 04040808 060a0a0a     ................
 8006958:	0808080d 09070809 07030309 09090a06     ................
 8006968:	08080908 0b080907 05090707 060a0504     ................
 8006978:	07080806 08040808 07030308 08080b03     ................
 8006988:	07050808 09060805 08050606 000a0804     ................

08006998 <mf_bwfont_DejaVuSans12_glyph_offsets_0>:
 8006998:	00000000 00090004 001b0013 00300026     ............&.0.
 80069a8:	00380033 0044003d 0050004d 00580055     3.8.=.D.M.P.U.X.
 80069b8:	0065005d 0074006c 0084007c 0094008c     ].e.l.t.|.......
 80069c8:	00a4009c 00af00ac 00bc00b2 00d000c6     ................
 80069d8:	00e300d6 00f400ec 010500fc 0114010d     ................
 80069e8:	0126011d 012c0129 013b0134 014e0145     ..&.).,.4.;.E.N.
 80069f8:	015f0157 01710168 01810179 0193018a     W._.h.q.y.......
 8006a08:	01a7019f 01b801af 01c201bd 01cf01c6     ................
 8006a18:	01db01d6 01eb01e3 01fa01f2 02070202     ................
 8006a28:	0217020f 021d021a 02270224 023a0232     ........$.'.2.:.
 8006a38:	024a0242 02580252 0264025f 0273026c     B.J.R.X._.d.l.s.
 8006a48:	0284027d 0291028b 029d0299 02ae02a4     }...............

08006a58 <mf_bwfont_DejaVuSans12_glyph_data_0>:
 8006a58:	00000000 037e0000 00000000 0000000e     ......~.........
 8006a68:	0000000e 00800000 01f00290 0390009c     ................
 8006a78:	009400f8 00000010 00000000 02240138     ............8.$.
 8006a88:	02440ffe 000001c8 0022001c 019c0222     ..D......."."...
 8006a98:	00300060 022201cc 01c00220 00000000     `.0...". .......
 8006aa8:	033c01c0 02220212 01800244 02600280     ..<...".D.....`.
 8006ab8:	00000000 0000000e 00f80000 04010707     ................
 8006ac8:	00000000 07070401 000000f8 00240000     ..............$.
 8006ad8:	007e0018 00240018 00000000 00400040     ..~...$.....@.@.
 8006ae8:	03f80040 00400040 00000040 07000000     @...@.@.@.......
 8006af8:	00000000 00400040 00000040 03000000     ....@.@.@.......
 8006b08:	06000000 003801c0 00000006 00f80000     ......8.........
 8006b18:	02020306 03060202 000000f8 02020000     ................
 8006b28:	03fe0202 02000200 00000000 03020204     ................
 8006b38:	02420282 021c0226 00000000 02020104     ..B.&...........
 8006b48:	02220222 01dc0222 00000000 00b000c0     "."."...........
 8006b58:	00860088 008003fe 00000000 0212011e     ................
 8006b68:	02120212 01e00332 00000000 032400f8     ....2.........$.
 8006b78:	02120212 01e40332 00000000 02020002     ....2...........
 8006b88:	00620182 0006001a 00000000 022201dc     ..b...........".
 8006b98:	02220222 01dc0222 00000000 0266013c     ".".".......<.f.
 8006ba8:	02420242 00f80126 00000000 00000330     B.B.&.......0...
 8006bb8:	07300000 00000000 00600060 00900060     ..0.....`.`.`...
 8006bc8:	00900090 01080198 00000000 00a000a0     ................
 8006bd8:	00a000a0 00a000a0 00a000a0 00000000     ................
 8006be8:	01980108 00900090 00600090 00600060     ..........`.`.`.
 8006bf8:	00040000 03620002 000c0012 00000000     ......b.........
 8006c08:	020801f0 08e20404 09120912 09f20912     ................
 8006c18:	008c0504 00000070 01c00200 008600b8     ....p...........
 8006c28:	00b80086 020001c0 00000000 022203fe     ..............".
 8006c38:	02220222 01dc0222 00000000 010400f8     "."."...........
 8006c48:	02020202 01040202 00000000 020203fe     ................
 8006c58:	02020202 01040202 000000f8 03fe0000     ................
 8006c68:	02220222 02220222 00000222 03fe0000     ".".".".".......
 8006c78:	00220022 00220022 00000000 010400f8     ".".".".........
 8006c88:	02020202 02220222 000001e4 03fe0000     ....".".........
 8006c98:	00200020 00200020 03fe0020 00000000      . . . . .......
 8006ca8:	080003fe 07fe0800 00000000 002003fe     .............. .
 8006cb8:	00880050 02020104 00000000 020003fe     P...............
 8006cc8:	02000200 00000200 03fe0000 0030000c     ..............0.
 8006cd8:	00c000c0 000c0030 000003fe 03fe0000     ....0...........
 8006ce8:	00180006 00c00020 03fe0300 00000000     .... ...........
 8006cf8:	010400f8 02020202 01040202 000000f8     ................
 8006d08:	03fe0000 00220022 00220022 0000001c     ....".".".".....
 8006d18:	00f80000 02020104 06020202 00f80904     ................
 8006d28:	00000000 002203fe 00220022 019c0062     ......".".".b...
 8006d38:	00000200 011c0000 02220222 02220222     ........".".".".
 8006d48:	000001c4 00020002 03fe0002 00020002     ................
 8006d58:	00000002 01fe0000 02000300 02000200     ................
 8006d68:	01fe0300 00060000 00c00038 03000300     ........8.......
 8006d78:	003800c0 00000006 001c0002 030000e0     ..8.............
 8006d88:	000e00f0 030000f0 001c00e0 00000002     ................
 8006d98:	01060202 002000d8 010600d8 00000202     ...... .........
 8006da8:	000c0002 03c00030 000c0030 00000002     ....0...0.......
 8006db8:	03020000 02420282 02120222 0206020a     ......B.".......
 8006dc8:	00000000 0ffe0000 00000802 00380006     ..............8.
 8006dd8:	060001c0 00000000 0ffe0802 00000000     ................
 8006de8:	00080000 00020004 00040002 00000008     ................
 8006df8:	10001000 10001000 10001000 00000000     ................
 8006e08:	00010000 00000002 01900000 02480248     ............H.H.
 8006e18:	01480248 000003f0 03ff0000 02080318     H.H.............
 8006e28:	03180208 000001f0 01f00000 02080318     ................
 8006e38:	01100208 00000000 031801f0 02080208     ................
 8006e48:	03ff0318 00000000 035801f0 02480248     ..........X.H.H.
 8006e58:	01700258 00080000 000903fe 00000009     X.p.............
 8006e68:	01f00000 12080b18 1b181208 00000ff8     ................
 8006e78:	03ff0000 00080010 00080008 000003f0     ................
 8006e88:	03fa0000 10000000 00001ffa 03ff0000     ................
 8006e98:	00a00040 02080110 00000000 000003ff     @...............
 8006ea8:	03f80000 00080008 03f00008 00080008     ................
 8006eb8:	03f00008 00000000 001003f8 00080008     ................
 8006ec8:	03f00008 00000000 031801f0 02080208     ................
 8006ed8:	01f00318 00000000 03181ff8 02080208     ................
 8006ee8:	01f00318 00000000 031801f0 02080208     ................
 8006ef8:	1ff80318 00000000 001003f8 00080008     ................
 8006f08:	00000000 02480130 02480248 00000190     ....0.H.H.H.....
 8006f18:	03fe0008 02080208 00000000 020001f8     ................
 8006f28:	02000200 03f80100 00180000 030000e0     ................
 8006f38:	00e00300 00000018 00e00018 00e00300     ................
 8006f48:	00e00018 00e00300 00000018 01b00208     ................
 8006f58:	00400040 020801b0 10180000 09801060     @.@.........`...
 8006f68:	00e00700 00000018 02880308 02280248     ............H.(.
 8006f78:	00000218 00000000 00400040 08020fbe     ........@.@.....
 8006f88:	00000802 00000000 00001ffe 08020000     ................
 8006f98:	0fbe0802 00400040 00000000 00200040     ....@.@.....@. .
 8006fa8:	00200020 00400040 00200040               . .@.@.@. .

08006fb4 <GDISPVMT_OnlyOne>:
 8006fb4:	00000067 00000048 08001b41 08001d85     g...H...A.......
 8006fc4:	08001b55 0800397d 00000000 00000000     U...}9..........
	...
 8006fec:	080037f5 00000000 08003611 00000000     .7.......6......
 8006ffc:	0800388d 00000000 00000000 00000000     .8..............
 800700c:	00000000 080038e9                       .....8..

08007014 <FsMemVMT>:
 8007014:	00000005 00000000 00000000 00000000     ................
	...
 8007030:	08004745 08004731 0800472d 00000000     EG..1G..-G......
	...

08007050 <aura_logo>:
 8007050:	04824d42 00000000 00820000 006c0000     BM............l.
 8007060:	00800000 00400000 00010000 00000001     ......@.........
 8007070:	04000000 5c490000 5c490000 00020000     ......I\..I\....
 8007080:	00020000 47420000 00007352 00000000     ......BGRs......
	...
 80070b8:	00020000 00000000 00000000 00000000     ................
 80070c8:	00000000 ffff0000 000000ff 00000000     ................
	...
 8007128:	fcffff7f 00000000 00000000 00000000     ................
	...
 80071e4:	b5924392 18244e14 842431e3 00000000     .C...N$..1$.....
 80071f4:	b4924292 24244aa4 84247984 00000000     .B...J$$.y$.....
 8007204:	b4544496 042c51e4 84444988 00000000     .DT..Q,..ID.....
 8007214:	b458449e 043c51a4 84444988 00000000     .DX..Q<..ID.....
 8007224:	fc5c749e 183c51a4 84e449e8 00000000     .t\..Q<..I......
 8007234:	cc52449a 203451a4 8a244988 00000000     .DR..Q4 .I$.....
 8007244:	48924292 20244a44 8a244984 00000000     .B.HDJ$ .I$.....
 8007254:	489c7392 1c244e4f d1c549e7 00000000     .s.HON$..I......
	...
 80072d4:	00007800 0000c003 00700000 00000000     .x........p.....
 80072e4:	001eff03 f000f83f 1eff0700 00000000     ....?...........
 80072f4:	00deff0f f000fe7f 9eff0f00 00000000     ................
 8007304:	00feff1f f000feff deff1f00 00000000     ................
 8007314:	00fe833f f0003ff8 fe833f00 00000000     ?....?...?......
 8007324:	01fe003e f0000ff0 fe017e00 00000000     >........~......
 8007334:	017e007c f0800fe0 7e00fc00 00000000     |.~........~....
 8007344:	013e0078 f08007e0 7e00f800 00000000     x.>........~....
 8007354:	031e00f8 f08007e0 3e00f000 00000000     ...........>....
 8007364:	031e00f8 f08007e0 3e00f001 00000000     ...........>....
 8007374:	031e00f0 f08007e0 1e00f001 00000000     ................
 8007384:	031e00f0 f08007e0 1e00f001 00000000     ................
 8007394:	031e00f0 f08007e0 1e00e001 00000000     ................
 80073a4:	031e00f0 f08007e0 1e00e001 00000000     ................
 80073b4:	031e00f0 f08007e0 1e00f001 00000000     ................
 80073c4:	031e00f0 f08007e0 1e00f001 00000000     ................
 80073d4:	031e00f8 f88007e0 3e00f000 00000000     ...........>....
 80073e4:	033e00f8 f88007e0 3e00f000 00000000     ..>........>....
 80073f4:	033e007c f88007e0 7e00f800 00000000     |.>........~....
 8007404:	037e003e fc8007e0 fe007c00 00000000     >.~......|......
 8007414:	03fe013f fc8007e0 fe017e00 00000000     ?........~......
 8007424:	03feff1f ff8007e0 deff3ff0 00000000     .........?......
 8007434:	03deff0f f78007e0 deff1ff0 00000000     ................
 8007444:	039eff07 f78007e0 1eff0ff8 00000000     ................
 8007454:	031efe01 f18007e0 1efc03f0 00000000     ................
	...
 80074d0:	65440000 7556616a 736e6153 72003231     ..DejaVuSans12.r
 80074e0:	00000062 616a6544 53207556 20736e61     b...DejaVu Sans 
 80074f0:	6b6f6f42 00323120 616a6544 61537556     Book 12.DejaVuSa
 8007500:	3231736e 00000000 00000043              ns12....C...

0800750c <_init>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007512:	bc08      	pop	{r3}
 8007514:	469e      	mov	lr, r3
 8007516:	4770      	bx	lr

08007518 <_fini>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr
